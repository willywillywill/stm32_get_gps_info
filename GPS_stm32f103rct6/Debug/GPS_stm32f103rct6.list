
GPS_stm32f103rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000503c  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08005228  08005228  00006228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800566c  0800566c  000071d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800566c  0800566c  000071d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800566c  0800566c  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800566c  0800566c  0000666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005670  08005670  00006670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005674  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001d8  08005848  000071d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08005848  000074e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075d6  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f9  00000000  00000000  0000e7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000fed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000546  00000000  00000000  000105c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b5b  00000000  00000000  00010b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f3e  00000000  00000000  0002a661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009273d  00000000  00000000  0003359f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5cdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cec  00000000  00000000  000c5d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000c8a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d8 	.word	0x200001d8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800520c 	.word	0x0800520c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001dc 	.word	0x200001dc
 8000224:	0800520c 	.word	0x0800520c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2lz>:
 8000b14:	b538      	push	{r3, r4, r5, lr}
 8000b16:	2200      	movs	r2, #0
 8000b18:	2300      	movs	r3, #0
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	460d      	mov	r5, r1
 8000b1e:	f7ff ffb1 	bl	8000a84 <__aeabi_dcmplt>
 8000b22:	b928      	cbnz	r0, 8000b30 <__aeabi_d2lz+0x1c>
 8000b24:	4620      	mov	r0, r4
 8000b26:	4629      	mov	r1, r5
 8000b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b2c:	f000 b80a 	b.w	8000b44 <__aeabi_d2ulz>
 8000b30:	4620      	mov	r0, r4
 8000b32:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b36:	f000 f805 	bl	8000b44 <__aeabi_d2ulz>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	bd38      	pop	{r3, r4, r5, pc}
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2ulz>:
 8000b44:	b5d0      	push	{r4, r6, r7, lr}
 8000b46:	2200      	movs	r2, #0
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <__aeabi_d2ulz+0x34>)
 8000b4a:	4606      	mov	r6, r0
 8000b4c:	460f      	mov	r7, r1
 8000b4e:	f7ff fd27 	bl	80005a0 <__aeabi_dmul>
 8000b52:	f7ff ffbf 	bl	8000ad4 <__aeabi_d2uiz>
 8000b56:	4604      	mov	r4, r0
 8000b58:	f7ff fca8 	bl	80004ac <__aeabi_ui2d>
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <__aeabi_d2ulz+0x38>)
 8000b60:	f7ff fd1e 	bl	80005a0 <__aeabi_dmul>
 8000b64:	4602      	mov	r2, r0
 8000b66:	460b      	mov	r3, r1
 8000b68:	4630      	mov	r0, r6
 8000b6a:	4639      	mov	r1, r7
 8000b6c:	f7ff fb60 	bl	8000230 <__aeabi_dsub>
 8000b70:	f7ff ffb0 	bl	8000ad4 <__aeabi_d2uiz>
 8000b74:	4621      	mov	r1, r4
 8000b76:	bdd0      	pop	{r4, r6, r7, pc}
 8000b78:	3df00000 	.word	0x3df00000
 8000b7c:	41f00000 	.word	0x41f00000

08000b80 <DMM_to_DD>:
extern UART_HandleTypeDef huart1;

char GPGGA_data[100];
char GPS_data[100];

void DMM_to_DD(GPGGA_info *gps){
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b090      	sub	sp, #64	@ 0x40
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    const char *d = ",";
 8000b88:	4b5f      	ldr	r3, [pc, #380]	@ (8000d08 <DMM_to_DD+0x188>)
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    char *p;
    int cnt=0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    char *DMM_Latitude, *DMM_Longitude;
    char localion_NS,localion_EW;

    p = strtok(gps->GPGGA_data, d);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 fc19 	bl	80033cc <strtok>
 8000b9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    while (p != NULL){
 8000b9c:	e026      	b.n	8000bec <DMM_to_DD+0x6c>

        switch (cnt) {
 8000b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ba0:	3b02      	subs	r3, #2
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d81a      	bhi.n	8000bdc <DMM_to_DD+0x5c>
 8000ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bac <DMM_to_DD+0x2c>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000bbd 	.word	0x08000bbd
 8000bb0:	08000bc9 	.word	0x08000bc9
 8000bb4:	08000bc3 	.word	0x08000bc3
 8000bb8:	08000bd3 	.word	0x08000bd3
        	case Latitude_flag:
        		DMM_Latitude = p;
 8000bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        		break;
 8000bc0:	e00c      	b.n	8000bdc <DMM_to_DD+0x5c>
        	case Longitude_flag:
                DMM_Longitude = p;
 8000bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bc4:	633b      	str	r3, [r7, #48]	@ 0x30
                break;
 8000bc6:	e009      	b.n	8000bdc <DMM_to_DD+0x5c>
        	case NS_flag:
                localion_NS = p[0];
 8000bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8000bd0:	e004      	b.n	8000bdc <DMM_to_DD+0x5c>
        	case EW_flag:
                localion_EW = p[0];
 8000bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                break;
 8000bda:	bf00      	nop
        }

        cnt++;
 8000bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bde:	3301      	adds	r3, #1
 8000be0:	63bb      	str	r3, [r7, #56]	@ 0x38
        p = strtok(NULL, d);
 8000be2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000be4:	2000      	movs	r0, #0
 8000be6:	f002 fbf1 	bl	80033cc <strtok>
 8000bea:	63f8      	str	r0, [r7, #60]	@ 0x3c
    while (p != NULL){
 8000bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1d5      	bne.n	8000b9e <DMM_to_DD+0x1e>
    }
    gps->cnt = cnt;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    gps->state = cnt > GPGGA_max_cnt;
 8000bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bfc:	2b0a      	cmp	r3, #10
 8000bfe:	bfcc      	ite	gt
 8000c00:	2301      	movgt	r3, #1
 8000c02:	2300      	movle	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    if (gps->state == OFF) // <15
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d072      	beq.n	8000cfe <DMM_to_DD+0x17e>
    	return;

    gps->DMM_Latitude = DMM_Latitude;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c1c:	669a      	str	r2, [r3, #104]	@ 0x68
    gps->DMM_Longitude = DMM_Longitude;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c22:	66da      	str	r2, [r3, #108]	@ 0x6c
    gps->localion_EW = localion_EW;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000c2a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    gps->localion_NS = localion_NS;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000c34:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    char DMM_Latitude_d[3], DMM_Latitude_c[9];
    char DMM_Longitude_d[4], DMM_Longitude_c[9];

    strncpy(DMM_Latitude_d, gps->DMM_Latitude, 2);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8000c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c40:	2202      	movs	r2, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 fbaf 	bl	80033a6 <strncpy>
    strncpy(DMM_Latitude_c, gps->DMM_Latitude+2, 8);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c4c:	1c99      	adds	r1, r3, #2
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	2208      	movs	r2, #8
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fba6 	bl	80033a6 <strncpy>
    strncpy(DMM_Longitude_d, gps->DMM_Longitude, 3);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	2203      	movs	r2, #3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fb9e 	bl	80033a6 <strncpy>
    strncpy(DMM_Longitude_c, gps->DMM_Longitude+3, 8);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000c6e:	1cd9      	adds	r1, r3, #3
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	2208      	movs	r2, #8
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fb95 	bl	80033a6 <strncpy>

    gps->DD_Latitude = (double)(atoi(DMM_Latitude_d) + atof(DMM_Latitude_c) / 60.0);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fbe2 	bl	800244a <atoi>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc1f 	bl	80004cc <__aeabi_i2d>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f107 0318 	add.w	r3, r7, #24
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fbd4 	bl	8002444 <atof>
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <DMM_to_DD+0x18c>)
 8000ca2:	f7ff fda7 	bl	80007f4 <__aeabi_ddiv>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4620      	mov	r0, r4
 8000cac:	4629      	mov	r1, r5
 8000cae:	f7ff fac1 	bl	8000234 <__adddf3>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    gps->DD_Longitude = (double)(atoi(DMM_Longitude_d) + atof(DMM_Longitude_c) / 60.0);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 fbc2 	bl	800244a <atoi>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fbff 	bl	80004cc <__aeabi_i2d>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fbb4 	bl	8002444 <atof>
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <DMM_to_DD+0x18c>)
 8000ce2:	f7ff fd87 	bl	80007f4 <__aeabi_ddiv>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	460b      	mov	r3, r1
 8000cea:	4620      	mov	r0, r4
 8000cec:	4629      	mov	r1, r5
 8000cee:	f7ff faa1 	bl	8000234 <__adddf3>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
 8000cfc:	e000      	b.n	8000d00 <DMM_to_DD+0x180>
    	return;
 8000cfe:	bf00      	nop
}
 8000d00:	3740      	adds	r7, #64	@ 0x40
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bdb0      	pop	{r4, r5, r7, pc}
 8000d06:	bf00      	nop
 8000d08:	08005228 	.word	0x08005228
 8000d0c:	404e0000 	.word	0x404e0000

08000d10 <get_gps_data>:
               pow(sin(deltaLongitude/2), 2);
    double c = 2 * atan2(sqrt(a), sqrt(1-a));
    double d = R * c;
    return d;
}
void get_gps_data(GPGGA_info *gps_ap){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Receive(&huart1, GPS_data, sizeof(GPS_data), 100)) {
 8000d18:	2364      	movs	r3, #100	@ 0x64
 8000d1a:	2264      	movs	r2, #100	@ 0x64
 8000d1c:	4947      	ldr	r1, [pc, #284]	@ (8000e3c <get_gps_data+0x12c>)
 8000d1e:	4848      	ldr	r0, [pc, #288]	@ (8000e40 <get_gps_data+0x130>)
 8000d20:	f001 fa02 	bl	8002128 <HAL_UART_Receive>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d07e      	beq.n	8000e28 <get_gps_data+0x118>
		for(int i=0; i<GPS_Data_Size ; i++){
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e061      	b.n	8000df4 <get_gps_data+0xe4>
			if (GPS_data[i]=='G' & GPS_data[i+1]=='N' & GPS_data[i+3]=='G' & GPS_data[i+4]=='A'){
 8000d30:	4a42      	ldr	r2, [pc, #264]	@ (8000e3c <get_gps_data+0x12c>)
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b47      	cmp	r3, #71	@ 0x47
 8000d3a:	bf0c      	ite	eq
 8000d3c:	2301      	moveq	r3, #1
 8000d3e:	2300      	movne	r3, #0
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3301      	adds	r3, #1
 8000d46:	493d      	ldr	r1, [pc, #244]	@ (8000e3c <get_gps_data+0x12c>)
 8000d48:	5ccb      	ldrb	r3, [r1, r3]
 8000d4a:	2b4e      	cmp	r3, #78	@ 0x4e
 8000d4c:	bf0c      	ite	eq
 8000d4e:	2301      	moveq	r3, #1
 8000d50:	2300      	movne	r3, #0
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4619      	mov	r1, r3
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3303      	adds	r3, #3
 8000d5e:	4a37      	ldr	r2, [pc, #220]	@ (8000e3c <get_gps_data+0x12c>)
 8000d60:	5cd3      	ldrb	r3, [r2, r3]
 8000d62:	2b47      	cmp	r3, #71	@ 0x47
 8000d64:	bf0c      	ite	eq
 8000d66:	2301      	moveq	r3, #1
 8000d68:	2300      	movne	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	400b      	ands	r3, r1
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	3204      	adds	r2, #4
 8000d72:	4932      	ldr	r1, [pc, #200]	@ (8000e3c <get_gps_data+0x12c>)
 8000d74:	5c8a      	ldrb	r2, [r1, r2]
 8000d76:	2a41      	cmp	r2, #65	@ 0x41
 8000d78:	bf0c      	ite	eq
 8000d7a:	2201      	moveq	r2, #1
 8000d7c:	2200      	movne	r2, #0
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d033      	beq.n	8000dee <get_gps_data+0xde>
				int j=i;
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	61bb      	str	r3, [r7, #24]
				while(GPS_data[j] != '$' & j<sizeof(GPS_data))
 8000d8a:	e002      	b.n	8000d92 <get_gps_data+0x82>
					j++;
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
				while(GPS_data[j] != '$' & j<sizeof(GPS_data))
 8000d92:	4a2a      	ldr	r2, [pc, #168]	@ (8000e3c <get_gps_data+0x12c>)
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	4413      	add	r3, r2
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b24      	cmp	r3, #36	@ 0x24
 8000d9c:	bf14      	ite	ne
 8000d9e:	2301      	movne	r3, #1
 8000da0:	2300      	moveq	r3, #0
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	2b63      	cmp	r3, #99	@ 0x63
 8000da8:	bf94      	ite	ls
 8000daa:	2301      	movls	r3, #1
 8000dac:	2300      	movhi	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4013      	ands	r3, r2
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1e9      	bne.n	8000d8c <get_gps_data+0x7c>
				if (j==sizeof(GPS_data)-1){
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	2b63      	cmp	r3, #99	@ 0x63
 8000dbc:	d01e      	beq.n	8000dfc <get_gps_data+0xec>
					break;
				} else{
					int y=0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
					for (int k=i ; k<j ; k++){
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	e00e      	b.n	8000de6 <get_gps_data+0xd6>
						GPGGA_data[y] = GPS_data[k];
 8000dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e3c <get_gps_data+0x12c>)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4413      	add	r3, r2
 8000dce:	7819      	ldrb	r1, [r3, #0]
 8000dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e44 <get_gps_data+0x134>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
						y++;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
					for (int k=i ; k<j ; k++){
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	3301      	adds	r3, #1
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	dbec      	blt.n	8000dc8 <get_gps_data+0xb8>
		for(int i=0; i<GPS_Data_Size ; i++){
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3301      	adds	r3, #1
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	2b63      	cmp	r3, #99	@ 0x63
 8000df8:	dd9a      	ble.n	8000d30 <get_gps_data+0x20>
 8000dfa:	e000      	b.n	8000dfe <get_gps_data+0xee>
					break;
 8000dfc:	bf00      	nop
				}
			}
		}
		//distance = distance_2(gps_ap.DD_Latitude, gps_ap.DD_Longitude, gps_sp.DD_Latitude, gps_sp.DD_Longitude);

		for (int i=0; i<sizeof(gps_ap->GPGGA_data) ; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	e00b      	b.n	8000e1c <get_gps_data+0x10c>
				gps_ap->GPGGA_data[i] = GPGGA_data[i];
 8000e04:	4a0f      	ldr	r2, [pc, #60]	@ (8000e44 <get_gps_data+0x134>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	7819      	ldrb	r1, [r3, #0]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4413      	add	r3, r2
 8000e12:	460a      	mov	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
		for (int i=0; i<sizeof(gps_ap->GPGGA_data) ; i++)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b63      	cmp	r3, #99	@ 0x63
 8000e20:	d9f0      	bls.n	8000e04 <get_gps_data+0xf4>
			DMM_to_DD(gps_ap);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff feac 	bl	8000b80 <DMM_to_DD>
	}

	memset(GPS_data, 0, sizeof(GPS_data));
 8000e28:	2264      	movs	r2, #100	@ 0x64
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4803      	ldr	r0, [pc, #12]	@ (8000e3c <get_gps_data+0x12c>)
 8000e2e:	f002 faa0 	bl	8003372 <memset>
}
 8000e32:	bf00      	nop
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000258 	.word	0x20000258
 8000e40:	200002bc 	.word	0x200002bc
 8000e44:	200001f4 	.word	0x200001f4

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fa32 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f80a 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 f86e 	bl	8000f34 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e58:	f000 f842 	bl	8000ee0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_gps_data(&gps_data);
 8000e5c:	4801      	ldr	r0, [pc, #4]	@ (8000e64 <main+0x1c>)
 8000e5e:	f7ff ff57 	bl	8000d10 <get_gps_data>
 8000e62:	e7fb      	b.n	8000e5c <main+0x14>
 8000e64:	20000308 	.word	0x20000308

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b090      	sub	sp, #64	@ 0x40
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	2228      	movs	r2, #40	@ 0x28
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 fa7b 	bl	8003372 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e92:	2310      	movs	r3, #16
 8000e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fce2 	bl	8001868 <HAL_RCC_OscConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f865 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 ff50 	bl	8001d6c <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 f851 	bl	8000f78 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3740      	adds	r7, #64	@ 0x40
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <MX_USART1_UART_Init+0x50>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000eec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f18:	f001 f8b6 	bl	8002088 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f22:	f000 f829 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200002bc 	.word	0x200002bc
 8000f30:	40013800 	.word	0x40013800

08000f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_GPIO_Init+0x40>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <MX_GPIO_Init+0x40>)
 8000f40:	f043 0320 	orr.w	r3, r3, #32
 8000f44:	6193      	str	r3, [r2, #24]
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_GPIO_Init+0x40>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_GPIO_Init+0x40>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a07      	ldr	r2, [pc, #28]	@ (8000f74 <MX_GPIO_Init+0x40>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <MX_GPIO_Init+0x40>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <Error_Handler+0x8>

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_MspInit+0x5c>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	4a14      	ldr	r2, [pc, #80]	@ (8000fe0 <HAL_MspInit+0x5c>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <HAL_MspInit+0x5c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_MspInit+0x5c>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <HAL_MspInit+0x5c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <HAL_MspInit+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_MspInit+0x60>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_MspInit+0x60>)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010000 	.word	0x40010000

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <HAL_UART_MspInit+0x8c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d131      	bne.n	800106c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001008:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <HAL_UART_MspInit+0x90>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a1a      	ldr	r2, [pc, #104]	@ (8001078 <HAL_UART_MspInit+0x90>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <HAL_UART_MspInit+0x90>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_UART_MspInit+0x90>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <HAL_UART_MspInit+0x90>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_UART_MspInit+0x90>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001038:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800103c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4619      	mov	r1, r3
 800104c:	480b      	ldr	r0, [pc, #44]	@ (800107c <HAL_UART_MspInit+0x94>)
 800104e:	f000 fa77 	bl	8001540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <HAL_UART_MspInit+0x94>)
 8001068:	f000 fa6a 	bl	8001540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40013800 	.word	0x40013800
 8001078:	40021000 	.word	0x40021000
 800107c:	40010800 	.word	0x40010800

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <NMI_Handler+0x4>

08001088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f936 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return 1;
 80010dc:	2301      	movs	r3, #1
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <_kill>:

int _kill(int pid, int sig)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010f0:	f002 fa0e 	bl	8003510 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2216      	movs	r2, #22
 80010f8:	601a      	str	r2, [r3, #0]
  return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_exit>:

void _exit (int status)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800110e:	f04f 31ff 	mov.w	r1, #4294967295
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffe7 	bl	80010e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <_exit+0x12>

0800111c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	e00a      	b.n	8001144 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800112e:	f3af 8000 	nop.w
 8001132:	4601      	mov	r1, r0
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	60ba      	str	r2, [r7, #8]
 800113a:	b2ca      	uxtb	r2, r1
 800113c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf0      	blt.n	800112e <_read+0x12>
  }

  return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	e009      	b.n	800117c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	60ba      	str	r2, [r7, #8]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	429a      	cmp	r2, r3
 8001182:	dbf1      	blt.n	8001168 <_write+0x12>
  }
  return len;
 8001184:	687b      	ldr	r3, [r7, #4]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <_close>:

int _close(int file)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011b4:	605a      	str	r2, [r3, #4]
  return 0;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <_isatty>:

int _isatty(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
	...

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	@ (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f002 f976 	bl	8003510 <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000c000 	.word	0x2000c000
 8001250:	00000400 	.word	0x00000400
 8001254:	20000390 	.word	0x20000390
 8001258:	200004e8 	.word	0x200004e8

0800125c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001268:	f7ff fff8 	bl	800125c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480b      	ldr	r0, [pc, #44]	@ (800129c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800126e:	490c      	ldr	r1, [pc, #48]	@ (80012a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001270:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001284:	4c09      	ldr	r4, [pc, #36]	@ (80012ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001292:	f002 f943 	bl	800351c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001296:	f7ff fdd7 	bl	8000e48 <main>
  bx lr
 800129a:	4770      	bx	lr
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80012a4:	08005674 	.word	0x08005674
  ldr r2, =_sbss
 80012a8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80012ac:	200004e4 	.word	0x200004e4

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_Init+0x28>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_Init+0x28>)
 80012be:	f043 0310 	orr.w	r3, r3, #16
 80012c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f907 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	200f      	movs	r0, #15
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fe58 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f911 	bl	8001526 <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 f8e7 	bl	80014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	@ (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <HAL_IncTick+0x1c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <HAL_IncTick+0x20>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a03      	ldr	r2, [pc, #12]	@ (8001360 <HAL_IncTick+0x20>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000008 	.word	0x20000008
 8001360:	20000394 	.word	0x20000394

08001364 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b02      	ldr	r3, [pc, #8]	@ (8001374 <HAL_GetTick+0x10>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000394 	.word	0x20000394

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	@ (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	@ (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	@ 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	@ 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff90 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff49 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff5e 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff90 	bl	8001430 <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5f 	bl	80013dc <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffb0 	bl	8001494 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b480      	push	{r7}
 8001542:	b08b      	sub	sp, #44	@ 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e179      	b.n	8001848 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001554:	2201      	movs	r2, #1
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 8168 	bne.w	8001842 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a96      	ldr	r2, [pc, #600]	@ (80017d0 <HAL_GPIO_Init+0x290>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d05e      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 800157c:	4a94      	ldr	r2, [pc, #592]	@ (80017d0 <HAL_GPIO_Init+0x290>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d875      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 8001582:	4a94      	ldr	r2, [pc, #592]	@ (80017d4 <HAL_GPIO_Init+0x294>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d058      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 8001588:	4a92      	ldr	r2, [pc, #584]	@ (80017d4 <HAL_GPIO_Init+0x294>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d86f      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 800158e:	4a92      	ldr	r2, [pc, #584]	@ (80017d8 <HAL_GPIO_Init+0x298>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d052      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 8001594:	4a90      	ldr	r2, [pc, #576]	@ (80017d8 <HAL_GPIO_Init+0x298>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d869      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 800159a:	4a90      	ldr	r2, [pc, #576]	@ (80017dc <HAL_GPIO_Init+0x29c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d04c      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 80015a0:	4a8e      	ldr	r2, [pc, #568]	@ (80017dc <HAL_GPIO_Init+0x29c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d863      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015a6:	4a8e      	ldr	r2, [pc, #568]	@ (80017e0 <HAL_GPIO_Init+0x2a0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d046      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 80015ac:	4a8c      	ldr	r2, [pc, #560]	@ (80017e0 <HAL_GPIO_Init+0x2a0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d85d      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d82a      	bhi.n	800160c <HAL_GPIO_Init+0xcc>
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d859      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015ba:	a201      	add	r2, pc, #4	@ (adr r2, 80015c0 <HAL_GPIO_Init+0x80>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	0800163b 	.word	0x0800163b
 80015c4:	08001615 	.word	0x08001615
 80015c8:	08001627 	.word	0x08001627
 80015cc:	08001669 	.word	0x08001669
 80015d0:	0800166f 	.word	0x0800166f
 80015d4:	0800166f 	.word	0x0800166f
 80015d8:	0800166f 	.word	0x0800166f
 80015dc:	0800166f 	.word	0x0800166f
 80015e0:	0800166f 	.word	0x0800166f
 80015e4:	0800166f 	.word	0x0800166f
 80015e8:	0800166f 	.word	0x0800166f
 80015ec:	0800166f 	.word	0x0800166f
 80015f0:	0800166f 	.word	0x0800166f
 80015f4:	0800166f 	.word	0x0800166f
 80015f8:	0800166f 	.word	0x0800166f
 80015fc:	0800166f 	.word	0x0800166f
 8001600:	0800166f 	.word	0x0800166f
 8001604:	0800161d 	.word	0x0800161d
 8001608:	08001631 	.word	0x08001631
 800160c:	4a75      	ldr	r2, [pc, #468]	@ (80017e4 <HAL_GPIO_Init+0x2a4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001612:	e02c      	b.n	800166e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e029      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	3304      	adds	r3, #4
 8001622:	623b      	str	r3, [r7, #32]
          break;
 8001624:	e024      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	3308      	adds	r3, #8
 800162c:	623b      	str	r3, [r7, #32]
          break;
 800162e:	e01f      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	330c      	adds	r3, #12
 8001636:	623b      	str	r3, [r7, #32]
          break;
 8001638:	e01a      	b.n	8001670 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001642:	2304      	movs	r3, #4
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e013      	b.n	8001670 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001650:	2308      	movs	r3, #8
 8001652:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	611a      	str	r2, [r3, #16]
          break;
 800165a:	e009      	b.n	8001670 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800165c:	2308      	movs	r3, #8
 800165e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	615a      	str	r2, [r3, #20]
          break;
 8001666:	e003      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
          break;
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x130>
          break;
 800166e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2bff      	cmp	r3, #255	@ 0xff
 8001674:	d801      	bhi.n	800167a <HAL_GPIO_Init+0x13a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	e001      	b.n	800167e <HAL_GPIO_Init+0x13e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3304      	adds	r3, #4
 800167e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2bff      	cmp	r3, #255	@ 0xff
 8001684:	d802      	bhi.n	800168c <HAL_GPIO_Init+0x14c>
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x152>
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	3b08      	subs	r3, #8
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	210f      	movs	r1, #15
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	6a39      	ldr	r1, [r7, #32]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	431a      	orrs	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80c1 	beq.w	8001842 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c0:	4b49      	ldr	r3, [pc, #292]	@ (80017e8 <HAL_GPIO_Init+0x2a8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a48      	ldr	r2, [pc, #288]	@ (80017e8 <HAL_GPIO_Init+0x2a8>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b46      	ldr	r3, [pc, #280]	@ (80017e8 <HAL_GPIO_Init+0x2a8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d8:	4a44      	ldr	r2, [pc, #272]	@ (80017ec <HAL_GPIO_Init+0x2ac>)
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	220f      	movs	r2, #15
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3c      	ldr	r2, [pc, #240]	@ (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d01f      	beq.n	8001744 <HAL_GPIO_Init+0x204>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a3b      	ldr	r2, [pc, #236]	@ (80017f4 <HAL_GPIO_Init+0x2b4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d019      	beq.n	8001740 <HAL_GPIO_Init+0x200>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3a      	ldr	r2, [pc, #232]	@ (80017f8 <HAL_GPIO_Init+0x2b8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d013      	beq.n	800173c <HAL_GPIO_Init+0x1fc>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a39      	ldr	r2, [pc, #228]	@ (80017fc <HAL_GPIO_Init+0x2bc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00d      	beq.n	8001738 <HAL_GPIO_Init+0x1f8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a38      	ldr	r2, [pc, #224]	@ (8001800 <HAL_GPIO_Init+0x2c0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <HAL_GPIO_Init+0x1f4>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a37      	ldr	r2, [pc, #220]	@ (8001804 <HAL_GPIO_Init+0x2c4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_Init+0x1f0>
 800172c:	2305      	movs	r3, #5
 800172e:	e00a      	b.n	8001746 <HAL_GPIO_Init+0x206>
 8001730:	2306      	movs	r3, #6
 8001732:	e008      	b.n	8001746 <HAL_GPIO_Init+0x206>
 8001734:	2304      	movs	r3, #4
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x206>
 8001738:	2303      	movs	r3, #3
 800173a:	e004      	b.n	8001746 <HAL_GPIO_Init+0x206>
 800173c:	2302      	movs	r3, #2
 800173e:	e002      	b.n	8001746 <HAL_GPIO_Init+0x206>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_GPIO_Init+0x206>
 8001744:	2300      	movs	r3, #0
 8001746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001748:	f002 0203 	and.w	r2, r2, #3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	4093      	lsls	r3, r2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001756:	4925      	ldr	r1, [pc, #148]	@ (80017ec <HAL_GPIO_Init+0x2ac>)
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001770:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	4924      	ldr	r1, [pc, #144]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	608b      	str	r3, [r1, #8]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800177e:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	4920      	ldr	r1, [pc, #128]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 8001788:	4013      	ands	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001798:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	491a      	ldr	r1, [pc, #104]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a6:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4916      	ldr	r1, [pc, #88]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d025      	beq.n	800180c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4910      	ldr	r1, [pc, #64]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e025      	b.n	800181a <HAL_GPIO_Init+0x2da>
 80017ce:	bf00      	nop
 80017d0:	10320000 	.word	0x10320000
 80017d4:	10310000 	.word	0x10310000
 80017d8:	10220000 	.word	0x10220000
 80017dc:	10210000 	.word	0x10210000
 80017e0:	10120000 	.word	0x10120000
 80017e4:	10110000 	.word	0x10110000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40010800 	.word	0x40010800
 80017f4:	40010c00 	.word	0x40010c00
 80017f8:	40011000 	.word	0x40011000
 80017fc:	40011400 	.word	0x40011400
 8001800:	40011800 	.word	0x40011800
 8001804:	40011c00 	.word	0x40011c00
 8001808:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_GPIO_Init+0x324>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	43db      	mvns	r3, r3
 8001814:	4913      	ldr	r1, [pc, #76]	@ (8001864 <HAL_GPIO_Init+0x324>)
 8001816:	4013      	ands	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001826:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <HAL_GPIO_Init+0x324>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	490e      	ldr	r1, [pc, #56]	@ (8001864 <HAL_GPIO_Init+0x324>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
 8001832:	e006      	b.n	8001842 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_GPIO_Init+0x324>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	43db      	mvns	r3, r3
 800183c:	4909      	ldr	r1, [pc, #36]	@ (8001864 <HAL_GPIO_Init+0x324>)
 800183e:	4013      	ands	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	3301      	adds	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	f47f ae7e 	bne.w	8001554 <HAL_GPIO_Init+0x14>
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	372c      	adds	r7, #44	@ 0x2c
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40010400 	.word	0x40010400

08001868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e272      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8087 	beq.w	8001996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001888:	4b92      	ldr	r3, [pc, #584]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b04      	cmp	r3, #4
 8001892:	d00c      	beq.n	80018ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001894:	4b8f      	ldr	r3, [pc, #572]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b08      	cmp	r3, #8
 800189e:	d112      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5e>
 80018a0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ac:	d10b      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ae:	4b89      	ldr	r3, [pc, #548]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d06c      	beq.n	8001994 <HAL_RCC_OscConfig+0x12c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d168      	bne.n	8001994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e24c      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x76>
 80018d0:	4b80      	ldr	r3, [pc, #512]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e02e      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x98>
 80018e6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7a      	ldr	r2, [pc, #488]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b78      	ldr	r3, [pc, #480]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a77      	ldr	r2, [pc, #476]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e01d      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0xbc>
 800190a:	4b72      	ldr	r3, [pc, #456]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a71      	ldr	r2, [pc, #452]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 8001924:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6a      	ldr	r2, [pc, #424]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800192a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b68      	ldr	r3, [pc, #416]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a67      	ldr	r2, [pc, #412]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800193a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fd0e 	bl	8001364 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fd0a 	bl	8001364 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e200      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0xe4>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fcfa 	bl	8001364 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff fcf6 	bl	8001364 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	@ 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e1ec      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	4b53      	ldr	r3, [pc, #332]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x10c>
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d063      	beq.n	8001a6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ae:	4b49      	ldr	r3, [pc, #292]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d11c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x18c>
 80019ba:	4b46      	ldr	r3, [pc, #280]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d116      	bne.n	80019f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x176>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e1c0      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4939      	ldr	r1, [pc, #228]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	e03a      	b.n	8001a6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fc:	4b36      	ldr	r3, [pc, #216]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff fcaf 	bl	8001364 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0a:	f7ff fcab 	bl	8001364 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1a1      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4927      	ldr	r1, [pc, #156]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e015      	b.n	8001a6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fc8e 	bl	8001364 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fc8a 	bl	8001364 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e180      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d03a      	beq.n	8001aec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d019      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_RCC_OscConfig+0x274>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff fc6e 	bl	8001364 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fc6a 	bl	8001364 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e160      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 face 	bl	800204c <RCC_Delay>
 8001ab0:	e01c      	b.n	8001aec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_RCC_OscConfig+0x274>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab8:	f7ff fc54 	bl	8001364 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abe:	e00f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fc50 	bl	8001364 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d908      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e146      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	42420000 	.word	0x42420000
 8001adc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	4b92      	ldr	r3, [pc, #584]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e9      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a6 	beq.w	8001c46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afe:	4b8b      	ldr	r3, [pc, #556]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10d      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b88      	ldr	r3, [pc, #544]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a87      	ldr	r2, [pc, #540]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	61d3      	str	r3, [r2, #28]
 8001b16:	4b85      	ldr	r3, [pc, #532]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b22:	2301      	movs	r3, #1
 8001b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b26:	4b82      	ldr	r3, [pc, #520]	@ (8001d30 <HAL_RCC_OscConfig+0x4c8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d118      	bne.n	8001b64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b32:	4b7f      	ldr	r3, [pc, #508]	@ (8001d30 <HAL_RCC_OscConfig+0x4c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7e      	ldr	r2, [pc, #504]	@ (8001d30 <HAL_RCC_OscConfig+0x4c8>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fc11 	bl	8001364 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b46:	f7ff fc0d 	bl	8001364 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	@ 0x64
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e103      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	4b75      	ldr	r3, [pc, #468]	@ (8001d30 <HAL_RCC_OscConfig+0x4c8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x312>
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a6e      	ldr	r2, [pc, #440]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	e02d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x36e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x334>
 8001b82:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a69      	ldr	r2, [pc, #420]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4b67      	ldr	r3, [pc, #412]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a66      	ldr	r2, [pc, #408]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	e01c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x36e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d10c      	bne.n	8001bbe <HAL_RCC_OscConfig+0x356>
 8001ba4:	4b61      	ldr	r3, [pc, #388]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a60      	ldr	r2, [pc, #384]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6213      	str	r3, [r2, #32]
 8001bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a5d      	ldr	r2, [pc, #372]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	e00b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x36e>
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6213      	str	r3, [r2, #32]
 8001bca:	4b58      	ldr	r3, [pc, #352]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a57      	ldr	r2, [pc, #348]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d015      	beq.n	8001c0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7ff fbc1 	bl	8001364 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff fbbd 	bl	8001364 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0b1      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ee      	beq.n	8001be6 <HAL_RCC_OscConfig+0x37e>
 8001c08:	e014      	b.n	8001c34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fbab 	bl	8001364 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff fba7 	bl	8001364 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e09b      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	4b40      	ldr	r3, [pc, #256]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ee      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d105      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8087 	beq.w	8001d5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c50:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d061      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d146      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c64:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <HAL_RCC_OscConfig+0x4cc>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fb7b 	bl	8001364 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c72:	f7ff fb77 	bl	8001364 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e06d      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c84:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c98:	d108      	bne.n	8001cac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c9a:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4921      	ldr	r1, [pc, #132]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cac:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a19      	ldr	r1, [r3, #32]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	491b      	ldr	r1, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_RCC_OscConfig+0x4cc>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff fb4b 	bl	8001364 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff fb47 	bl	8001364 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e03d      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x46a>
 8001cf0:	e035      	b.n	8001d5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_RCC_OscConfig+0x4cc>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fb34 	bl	8001364 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7ff fb30 	bl	8001364 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e026      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x498>
 8001d1e:	e01e      	b.n	8001d5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e019      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
 8001d34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_RCC_OscConfig+0x500>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0d0      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b6a      	ldr	r3, [pc, #424]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b67      	ldr	r3, [pc, #412]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4965      	ldr	r1, [pc, #404]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b63      	ldr	r3, [pc, #396]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0b8      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc8:	4b59      	ldr	r3, [pc, #356]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a58      	ldr	r2, [pc, #352]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de0:	4b53      	ldr	r3, [pc, #332]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a52      	ldr	r2, [pc, #328]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b50      	ldr	r3, [pc, #320]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	494d      	ldr	r1, [pc, #308]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d040      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b47      	ldr	r3, [pc, #284]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d115      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e07f      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4b41      	ldr	r3, [pc, #260]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e073      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e06b      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4936      	ldr	r1, [pc, #216]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7ff fa82 	bl	8001364 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff fa7e 	bl	8001364 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e053      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d210      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0207 	bic.w	r2, r3, #7
 8001ea2:	4922      	ldr	r1, [pc, #136]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e032      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4916      	ldr	r1, [pc, #88]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	490e      	ldr	r1, [pc, #56]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001efa:	f000 f821 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001efe:	4602      	mov	r2, r0
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	490a      	ldr	r1, [pc, #40]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0c:	5ccb      	ldrb	r3, [r1, r3]
 8001f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f12:	4a09      	ldr	r2, [pc, #36]	@ (8001f38 <HAL_RCC_ClockConfig+0x1cc>)
 8001f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_RCC_ClockConfig+0x1d0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f9e0 	bl	80012e0 <HAL_InitTick>

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	0800522c 	.word	0x0800522c
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d002      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x30>
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x36>
 8001f6e:	e027      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f72:	613b      	str	r3, [r7, #16]
      break;
 8001f74:	e027      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	0c9b      	lsrs	r3, r3, #18
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	4a17      	ldr	r2, [pc, #92]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f80:	5cd3      	ldrb	r3, [r2, r3]
 8001f82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d010      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f8e:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	0c5b      	lsrs	r3, r3, #17
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f9a:	5cd3      	ldrb	r3, [r2, r3]
 8001f9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fa2:	fb03 f202 	mul.w	r2, r3, r2
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e004      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	613b      	str	r3, [r7, #16]
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fc2:	613b      	str	r3, [r7, #16]
      break;
 8001fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc6:	693b      	ldr	r3, [r7, #16]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	007a1200 	.word	0x007a1200
 8001fdc:	08005244 	.word	0x08005244
 8001fe0:	08005254 	.word	0x08005254
 8001fe4:	003d0900 	.word	0x003d0900

08001fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b02      	ldr	r3, [pc, #8]	@ (8001ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	20000000 	.word	0x20000000

08001ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002000:	f7ff fff2 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	4903      	ldr	r1, [pc, #12]	@ (8002020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	0800523c 	.word	0x0800523c

08002024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	0adb      	lsrs	r3, r3, #11
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4903      	ldr	r1, [pc, #12]	@ (8002048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	0800523c 	.word	0x0800523c

0800204c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002054:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <RCC_Delay+0x34>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <RCC_Delay+0x38>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0a5b      	lsrs	r3, r3, #9
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002068:	bf00      	nop
  }
  while (Delay --);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1e5a      	subs	r2, r3, #1
 800206e:	60fa      	str	r2, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f9      	bne.n	8002068 <RCC_Delay+0x1c>
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	20000000 	.word	0x20000000
 8002084:	10624dd3 	.word	0x10624dd3

08002088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e042      	b.n	8002120 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe ff9a 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2224      	movs	r2, #36	@ 0x24
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f92b 	bl	8002328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	4613      	mov	r3, r2
 8002136:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b20      	cmp	r3, #32
 8002146:	d17c      	bne.n	8002242 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_UART_Receive+0x2c>
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e075      	b.n	8002244 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2222      	movs	r2, #34	@ 0x22
 8002162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800216c:	f7ff f8fa 	bl	8001364 <HAL_GetTick>
 8002170:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	88fa      	ldrh	r2, [r7, #6]
 8002176:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002186:	d108      	bne.n	800219a <HAL_UART_Receive+0x72>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	e003      	b.n	80021a2 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021a2:	e043      	b.n	800222c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2200      	movs	r2, #0
 80021ac:	2120      	movs	r1, #32
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f84c 	bl	800224c <UART_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e042      	b.n	8002244 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10c      	bne.n	80021de <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	3302      	adds	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	e01f      	b.n	800221e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e6:	d007      	beq.n	80021f8 <HAL_UART_Receive+0xd0>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <HAL_UART_Receive+0xde>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	e008      	b.n	8002218 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002212:	b2da      	uxtb	r2, r3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3301      	adds	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1b6      	bne.n	80021a4 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002242:	2302      	movs	r3, #2
  }
}
 8002244:	4618      	mov	r0, r3
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b090      	sub	sp, #64	@ 0x40
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800225c:	e050      	b.n	8002300 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d04c      	beq.n	8002300 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <UART_WaitOnFlagUntilTimeout+0x30>
 800226c:	f7ff f87a 	bl	8001364 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002278:	429a      	cmp	r2, r3
 800227a:	d241      	bcs.n	8002300 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	330c      	adds	r3, #12
 8002282:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002286:	e853 3f00 	ldrex	r3, [r3]
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800229c:	637a      	str	r2, [r7, #52]	@ 0x34
 800229e:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022a4:	e841 2300 	strex	r3, r2, [r1]
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80022aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e5      	bne.n	800227c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3314      	adds	r3, #20
 80022b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	e853 3f00 	ldrex	r3, [r3]
 80022be:	613b      	str	r3, [r7, #16]
   return(result);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3314      	adds	r3, #20
 80022ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022d0:	623a      	str	r2, [r7, #32]
 80022d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d4:	69f9      	ldr	r1, [r7, #28]
 80022d6:	6a3a      	ldr	r2, [r7, #32]
 80022d8:	e841 2300 	strex	r3, r2, [r1]
 80022dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e5      	bne.n	80022b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e00f      	b.n	8002320 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4013      	ands	r3, r2
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	429a      	cmp	r2, r3
 800231c:	d09f      	beq.n	800225e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3740      	adds	r7, #64	@ 0x40
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002362:	f023 030c 	bic.w	r3, r3, #12
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	430b      	orrs	r3, r1
 800236e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2c      	ldr	r2, [pc, #176]	@ (800243c <UART_SetConfig+0x114>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d103      	bne.n	8002398 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002390:	f7ff fe48 	bl	8002024 <HAL_RCC_GetPCLK2Freq>
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	e002      	b.n	800239e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002398:	f7ff fe30 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 800239c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	009a      	lsls	r2, r3, #2
 80023a8:	441a      	add	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	4a22      	ldr	r2, [pc, #136]	@ (8002440 <UART_SetConfig+0x118>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	0119      	lsls	r1, r3, #4
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009a      	lsls	r2, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <UART_SetConfig+0x118>)
 80023d6:	fba3 0302 	umull	r0, r3, r3, r2
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2064      	movs	r0, #100	@ 0x64
 80023de:	fb00 f303 	mul.w	r3, r0, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	3332      	adds	r3, #50	@ 0x32
 80023e8:	4a15      	ldr	r2, [pc, #84]	@ (8002440 <UART_SetConfig+0x118>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f4:	4419      	add	r1, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	009a      	lsls	r2, r3, #2
 8002400:	441a      	add	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fbb2 f2f3 	udiv	r2, r2, r3
 800240c:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <UART_SetConfig+0x118>)
 800240e:	fba3 0302 	umull	r0, r3, r3, r2
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2064      	movs	r0, #100	@ 0x64
 8002416:	fb00 f303 	mul.w	r3, r0, r3
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	3332      	adds	r3, #50	@ 0x32
 8002420:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <UART_SetConfig+0x118>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	440a      	add	r2, r1
 8002432:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013800 	.word	0x40013800
 8002440:	51eb851f 	.word	0x51eb851f

08002444 <atof>:
 8002444:	2100      	movs	r1, #0
 8002446:	f000 bdff 	b.w	8003048 <strtod>

0800244a <atoi>:
 800244a:	220a      	movs	r2, #10
 800244c:	2100      	movs	r1, #0
 800244e:	f000 be81 	b.w	8003154 <strtol>

08002452 <sulp>:
 8002452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002456:	460f      	mov	r7, r1
 8002458:	4690      	mov	r8, r2
 800245a:	f002 f875 	bl	8004548 <__ulp>
 800245e:	4604      	mov	r4, r0
 8002460:	460d      	mov	r5, r1
 8002462:	f1b8 0f00 	cmp.w	r8, #0
 8002466:	d011      	beq.n	800248c <sulp+0x3a>
 8002468:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800246c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8002470:	2b00      	cmp	r3, #0
 8002472:	dd0b      	ble.n	800248c <sulp+0x3a>
 8002474:	2400      	movs	r4, #0
 8002476:	051b      	lsls	r3, r3, #20
 8002478:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800247c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8002480:	4622      	mov	r2, r4
 8002482:	462b      	mov	r3, r5
 8002484:	f7fe f88c 	bl	80005a0 <__aeabi_dmul>
 8002488:	4604      	mov	r4, r0
 800248a:	460d      	mov	r5, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002494:	0000      	movs	r0, r0
	...

08002498 <_strtod_l>:
 8002498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800249c:	b09f      	sub	sp, #124	@ 0x7c
 800249e:	9217      	str	r2, [sp, #92]	@ 0x5c
 80024a0:	2200      	movs	r2, #0
 80024a2:	460c      	mov	r4, r1
 80024a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80024a6:	f04f 0a00 	mov.w	sl, #0
 80024aa:	f04f 0b00 	mov.w	fp, #0
 80024ae:	460a      	mov	r2, r1
 80024b0:	9005      	str	r0, [sp, #20]
 80024b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80024b4:	7811      	ldrb	r1, [r2, #0]
 80024b6:	292b      	cmp	r1, #43	@ 0x2b
 80024b8:	d048      	beq.n	800254c <_strtod_l+0xb4>
 80024ba:	d836      	bhi.n	800252a <_strtod_l+0x92>
 80024bc:	290d      	cmp	r1, #13
 80024be:	d830      	bhi.n	8002522 <_strtod_l+0x8a>
 80024c0:	2908      	cmp	r1, #8
 80024c2:	d830      	bhi.n	8002526 <_strtod_l+0x8e>
 80024c4:	2900      	cmp	r1, #0
 80024c6:	d039      	beq.n	800253c <_strtod_l+0xa4>
 80024c8:	2200      	movs	r2, #0
 80024ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80024cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80024ce:	782a      	ldrb	r2, [r5, #0]
 80024d0:	2a30      	cmp	r2, #48	@ 0x30
 80024d2:	f040 80b1 	bne.w	8002638 <_strtod_l+0x1a0>
 80024d6:	786a      	ldrb	r2, [r5, #1]
 80024d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80024dc:	2a58      	cmp	r2, #88	@ 0x58
 80024de:	d16c      	bne.n	80025ba <_strtod_l+0x122>
 80024e0:	9302      	str	r3, [sp, #8]
 80024e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80024e4:	4a8e      	ldr	r2, [pc, #568]	@ (8002720 <_strtod_l+0x288>)
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	ab1a      	add	r3, sp, #104	@ 0x68
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	9805      	ldr	r0, [sp, #20]
 80024ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80024f0:	a919      	add	r1, sp, #100	@ 0x64
 80024f2:	f001 f91d 	bl	8003730 <__gethex>
 80024f6:	f010 060f 	ands.w	r6, r0, #15
 80024fa:	4604      	mov	r4, r0
 80024fc:	d005      	beq.n	800250a <_strtod_l+0x72>
 80024fe:	2e06      	cmp	r6, #6
 8002500:	d126      	bne.n	8002550 <_strtod_l+0xb8>
 8002502:	2300      	movs	r3, #0
 8002504:	3501      	adds	r5, #1
 8002506:	9519      	str	r5, [sp, #100]	@ 0x64
 8002508:	930b      	str	r3, [sp, #44]	@ 0x2c
 800250a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800250c:	2b00      	cmp	r3, #0
 800250e:	f040 8584 	bne.w	800301a <_strtod_l+0xb82>
 8002512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002514:	b1bb      	cbz	r3, 8002546 <_strtod_l+0xae>
 8002516:	4650      	mov	r0, sl
 8002518:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800251c:	b01f      	add	sp, #124	@ 0x7c
 800251e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002522:	2920      	cmp	r1, #32
 8002524:	d1d0      	bne.n	80024c8 <_strtod_l+0x30>
 8002526:	3201      	adds	r2, #1
 8002528:	e7c3      	b.n	80024b2 <_strtod_l+0x1a>
 800252a:	292d      	cmp	r1, #45	@ 0x2d
 800252c:	d1cc      	bne.n	80024c8 <_strtod_l+0x30>
 800252e:	2101      	movs	r1, #1
 8002530:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002532:	1c51      	adds	r1, r2, #1
 8002534:	9119      	str	r1, [sp, #100]	@ 0x64
 8002536:	7852      	ldrb	r2, [r2, #1]
 8002538:	2a00      	cmp	r2, #0
 800253a:	d1c7      	bne.n	80024cc <_strtod_l+0x34>
 800253c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800253e:	9419      	str	r4, [sp, #100]	@ 0x64
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 8568 	bne.w	8003016 <_strtod_l+0xb7e>
 8002546:	4650      	mov	r0, sl
 8002548:	4659      	mov	r1, fp
 800254a:	e7e7      	b.n	800251c <_strtod_l+0x84>
 800254c:	2100      	movs	r1, #0
 800254e:	e7ef      	b.n	8002530 <_strtod_l+0x98>
 8002550:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8002552:	b13a      	cbz	r2, 8002564 <_strtod_l+0xcc>
 8002554:	2135      	movs	r1, #53	@ 0x35
 8002556:	a81c      	add	r0, sp, #112	@ 0x70
 8002558:	f002 f8e6 	bl	8004728 <__copybits>
 800255c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800255e:	9805      	ldr	r0, [sp, #20]
 8002560:	f001 fcc0 	bl	8003ee4 <_Bfree>
 8002564:	3e01      	subs	r6, #1
 8002566:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8002568:	2e04      	cmp	r6, #4
 800256a:	d806      	bhi.n	800257a <_strtod_l+0xe2>
 800256c:	e8df f006 	tbb	[pc, r6]
 8002570:	201d0314 	.word	0x201d0314
 8002574:	14          	.byte	0x14
 8002575:	00          	.byte	0x00
 8002576:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800257a:	05e1      	lsls	r1, r4, #23
 800257c:	bf48      	it	mi
 800257e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8002582:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8002586:	0d1b      	lsrs	r3, r3, #20
 8002588:	051b      	lsls	r3, r3, #20
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1bd      	bne.n	800250a <_strtod_l+0x72>
 800258e:	f000 ffbf 	bl	8003510 <__errno>
 8002592:	2322      	movs	r3, #34	@ 0x22
 8002594:	6003      	str	r3, [r0, #0]
 8002596:	e7b8      	b.n	800250a <_strtod_l+0x72>
 8002598:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800259c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80025a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025a4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80025a8:	e7e7      	b.n	800257a <_strtod_l+0xe2>
 80025aa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8002724 <_strtod_l+0x28c>
 80025ae:	e7e4      	b.n	800257a <_strtod_l+0xe2>
 80025b0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80025b4:	f04f 3aff 	mov.w	sl, #4294967295
 80025b8:	e7df      	b.n	800257a <_strtod_l+0xe2>
 80025ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	9219      	str	r2, [sp, #100]	@ 0x64
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	2b30      	cmp	r3, #48	@ 0x30
 80025c4:	d0f9      	beq.n	80025ba <_strtod_l+0x122>
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d09f      	beq.n	800250a <_strtod_l+0x72>
 80025ca:	2301      	movs	r3, #1
 80025cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80025ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80025d0:	220a      	movs	r2, #10
 80025d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80025d4:	2300      	movs	r3, #0
 80025d6:	461f      	mov	r7, r3
 80025d8:	9308      	str	r3, [sp, #32]
 80025da:	930a      	str	r3, [sp, #40]	@ 0x28
 80025dc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80025de:	7805      	ldrb	r5, [r0, #0]
 80025e0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80025e4:	b2d9      	uxtb	r1, r3
 80025e6:	2909      	cmp	r1, #9
 80025e8:	d928      	bls.n	800263c <_strtod_l+0x1a4>
 80025ea:	2201      	movs	r2, #1
 80025ec:	494e      	ldr	r1, [pc, #312]	@ (8002728 <_strtod_l+0x290>)
 80025ee:	f000 fec8 	bl	8003382 <strncmp>
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d032      	beq.n	800265c <_strtod_l+0x1c4>
 80025f6:	2000      	movs	r0, #0
 80025f8:	462a      	mov	r2, r5
 80025fa:	4681      	mov	r9, r0
 80025fc:	463d      	mov	r5, r7
 80025fe:	4603      	mov	r3, r0
 8002600:	2a65      	cmp	r2, #101	@ 0x65
 8002602:	d001      	beq.n	8002608 <_strtod_l+0x170>
 8002604:	2a45      	cmp	r2, #69	@ 0x45
 8002606:	d114      	bne.n	8002632 <_strtod_l+0x19a>
 8002608:	b91d      	cbnz	r5, 8002612 <_strtod_l+0x17a>
 800260a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800260c:	4302      	orrs	r2, r0
 800260e:	d095      	beq.n	800253c <_strtod_l+0xa4>
 8002610:	2500      	movs	r5, #0
 8002612:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8002614:	1c62      	adds	r2, r4, #1
 8002616:	9219      	str	r2, [sp, #100]	@ 0x64
 8002618:	7862      	ldrb	r2, [r4, #1]
 800261a:	2a2b      	cmp	r2, #43	@ 0x2b
 800261c:	d077      	beq.n	800270e <_strtod_l+0x276>
 800261e:	2a2d      	cmp	r2, #45	@ 0x2d
 8002620:	d07b      	beq.n	800271a <_strtod_l+0x282>
 8002622:	f04f 0c00 	mov.w	ip, #0
 8002626:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800262a:	2909      	cmp	r1, #9
 800262c:	f240 8082 	bls.w	8002734 <_strtod_l+0x29c>
 8002630:	9419      	str	r4, [sp, #100]	@ 0x64
 8002632:	f04f 0800 	mov.w	r8, #0
 8002636:	e0a2      	b.n	800277e <_strtod_l+0x2e6>
 8002638:	2300      	movs	r3, #0
 800263a:	e7c7      	b.n	80025cc <_strtod_l+0x134>
 800263c:	2f08      	cmp	r7, #8
 800263e:	bfd5      	itete	le
 8002640:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8002642:	9908      	ldrgt	r1, [sp, #32]
 8002644:	fb02 3301 	mlale	r3, r2, r1, r3
 8002648:	fb02 3301 	mlagt	r3, r2, r1, r3
 800264c:	f100 0001 	add.w	r0, r0, #1
 8002650:	bfd4      	ite	le
 8002652:	930a      	strle	r3, [sp, #40]	@ 0x28
 8002654:	9308      	strgt	r3, [sp, #32]
 8002656:	3701      	adds	r7, #1
 8002658:	9019      	str	r0, [sp, #100]	@ 0x64
 800265a:	e7bf      	b.n	80025dc <_strtod_l+0x144>
 800265c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	9219      	str	r2, [sp, #100]	@ 0x64
 8002662:	785a      	ldrb	r2, [r3, #1]
 8002664:	b37f      	cbz	r7, 80026c6 <_strtod_l+0x22e>
 8002666:	4681      	mov	r9, r0
 8002668:	463d      	mov	r5, r7
 800266a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800266e:	2b09      	cmp	r3, #9
 8002670:	d912      	bls.n	8002698 <_strtod_l+0x200>
 8002672:	2301      	movs	r3, #1
 8002674:	e7c4      	b.n	8002600 <_strtod_l+0x168>
 8002676:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002678:	3001      	adds	r0, #1
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	9219      	str	r2, [sp, #100]	@ 0x64
 800267e:	785a      	ldrb	r2, [r3, #1]
 8002680:	2a30      	cmp	r2, #48	@ 0x30
 8002682:	d0f8      	beq.n	8002676 <_strtod_l+0x1de>
 8002684:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8002688:	2b08      	cmp	r3, #8
 800268a:	f200 84cb 	bhi.w	8003024 <_strtod_l+0xb8c>
 800268e:	4681      	mov	r9, r0
 8002690:	2000      	movs	r0, #0
 8002692:	4605      	mov	r5, r0
 8002694:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002696:	930c      	str	r3, [sp, #48]	@ 0x30
 8002698:	3a30      	subs	r2, #48	@ 0x30
 800269a:	f100 0301 	add.w	r3, r0, #1
 800269e:	d02a      	beq.n	80026f6 <_strtod_l+0x25e>
 80026a0:	4499      	add	r9, r3
 80026a2:	210a      	movs	r1, #10
 80026a4:	462b      	mov	r3, r5
 80026a6:	eb00 0c05 	add.w	ip, r0, r5
 80026aa:	4563      	cmp	r3, ip
 80026ac:	d10d      	bne.n	80026ca <_strtod_l+0x232>
 80026ae:	1c69      	adds	r1, r5, #1
 80026b0:	4401      	add	r1, r0
 80026b2:	4428      	add	r0, r5
 80026b4:	2808      	cmp	r0, #8
 80026b6:	dc16      	bgt.n	80026e6 <_strtod_l+0x24e>
 80026b8:	230a      	movs	r3, #10
 80026ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80026bc:	fb03 2300 	mla	r3, r3, r0, r2
 80026c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80026c2:	2300      	movs	r3, #0
 80026c4:	e018      	b.n	80026f8 <_strtod_l+0x260>
 80026c6:	4638      	mov	r0, r7
 80026c8:	e7da      	b.n	8002680 <_strtod_l+0x1e8>
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	f103 0301 	add.w	r3, r3, #1
 80026d0:	dc03      	bgt.n	80026da <_strtod_l+0x242>
 80026d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80026d4:	434e      	muls	r6, r1
 80026d6:	960a      	str	r6, [sp, #40]	@ 0x28
 80026d8:	e7e7      	b.n	80026aa <_strtod_l+0x212>
 80026da:	2b10      	cmp	r3, #16
 80026dc:	bfde      	ittt	le
 80026de:	9e08      	ldrle	r6, [sp, #32]
 80026e0:	434e      	mulle	r6, r1
 80026e2:	9608      	strle	r6, [sp, #32]
 80026e4:	e7e1      	b.n	80026aa <_strtod_l+0x212>
 80026e6:	280f      	cmp	r0, #15
 80026e8:	dceb      	bgt.n	80026c2 <_strtod_l+0x22a>
 80026ea:	230a      	movs	r3, #10
 80026ec:	9808      	ldr	r0, [sp, #32]
 80026ee:	fb03 2300 	mla	r3, r3, r0, r2
 80026f2:	9308      	str	r3, [sp, #32]
 80026f4:	e7e5      	b.n	80026c2 <_strtod_l+0x22a>
 80026f6:	4629      	mov	r1, r5
 80026f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80026fa:	460d      	mov	r5, r1
 80026fc:	1c50      	adds	r0, r2, #1
 80026fe:	9019      	str	r0, [sp, #100]	@ 0x64
 8002700:	7852      	ldrb	r2, [r2, #1]
 8002702:	4618      	mov	r0, r3
 8002704:	e7b1      	b.n	800266a <_strtod_l+0x1d2>
 8002706:	f04f 0900 	mov.w	r9, #0
 800270a:	2301      	movs	r3, #1
 800270c:	e77d      	b.n	800260a <_strtod_l+0x172>
 800270e:	f04f 0c00 	mov.w	ip, #0
 8002712:	1ca2      	adds	r2, r4, #2
 8002714:	9219      	str	r2, [sp, #100]	@ 0x64
 8002716:	78a2      	ldrb	r2, [r4, #2]
 8002718:	e785      	b.n	8002626 <_strtod_l+0x18e>
 800271a:	f04f 0c01 	mov.w	ip, #1
 800271e:	e7f8      	b.n	8002712 <_strtod_l+0x27a>
 8002720:	08005278 	.word	0x08005278
 8002724:	7ff00000 	.word	0x7ff00000
 8002728:	08005256 	.word	0x08005256
 800272c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800272e:	1c51      	adds	r1, r2, #1
 8002730:	9119      	str	r1, [sp, #100]	@ 0x64
 8002732:	7852      	ldrb	r2, [r2, #1]
 8002734:	2a30      	cmp	r2, #48	@ 0x30
 8002736:	d0f9      	beq.n	800272c <_strtod_l+0x294>
 8002738:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800273c:	2908      	cmp	r1, #8
 800273e:	f63f af78 	bhi.w	8002632 <_strtod_l+0x19a>
 8002742:	f04f 080a 	mov.w	r8, #10
 8002746:	3a30      	subs	r2, #48	@ 0x30
 8002748:	920e      	str	r2, [sp, #56]	@ 0x38
 800274a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800274c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800274e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002750:	1c56      	adds	r6, r2, #1
 8002752:	9619      	str	r6, [sp, #100]	@ 0x64
 8002754:	7852      	ldrb	r2, [r2, #1]
 8002756:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800275a:	f1be 0f09 	cmp.w	lr, #9
 800275e:	d939      	bls.n	80027d4 <_strtod_l+0x33c>
 8002760:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002762:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8002766:	1a76      	subs	r6, r6, r1
 8002768:	2e08      	cmp	r6, #8
 800276a:	dc03      	bgt.n	8002774 <_strtod_l+0x2dc>
 800276c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800276e:	4588      	cmp	r8, r1
 8002770:	bfa8      	it	ge
 8002772:	4688      	movge	r8, r1
 8002774:	f1bc 0f00 	cmp.w	ip, #0
 8002778:	d001      	beq.n	800277e <_strtod_l+0x2e6>
 800277a:	f1c8 0800 	rsb	r8, r8, #0
 800277e:	2d00      	cmp	r5, #0
 8002780:	d14e      	bne.n	8002820 <_strtod_l+0x388>
 8002782:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002784:	4308      	orrs	r0, r1
 8002786:	f47f aec0 	bne.w	800250a <_strtod_l+0x72>
 800278a:	2b00      	cmp	r3, #0
 800278c:	f47f aed6 	bne.w	800253c <_strtod_l+0xa4>
 8002790:	2a69      	cmp	r2, #105	@ 0x69
 8002792:	d028      	beq.n	80027e6 <_strtod_l+0x34e>
 8002794:	dc25      	bgt.n	80027e2 <_strtod_l+0x34a>
 8002796:	2a49      	cmp	r2, #73	@ 0x49
 8002798:	d025      	beq.n	80027e6 <_strtod_l+0x34e>
 800279a:	2a4e      	cmp	r2, #78	@ 0x4e
 800279c:	f47f aece 	bne.w	800253c <_strtod_l+0xa4>
 80027a0:	499a      	ldr	r1, [pc, #616]	@ (8002a0c <_strtod_l+0x574>)
 80027a2:	a819      	add	r0, sp, #100	@ 0x64
 80027a4:	f001 f9e6 	bl	8003b74 <__match>
 80027a8:	2800      	cmp	r0, #0
 80027aa:	f43f aec7 	beq.w	800253c <_strtod_l+0xa4>
 80027ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b28      	cmp	r3, #40	@ 0x28
 80027b4:	d12e      	bne.n	8002814 <_strtod_l+0x37c>
 80027b6:	4996      	ldr	r1, [pc, #600]	@ (8002a10 <_strtod_l+0x578>)
 80027b8:	aa1c      	add	r2, sp, #112	@ 0x70
 80027ba:	a819      	add	r0, sp, #100	@ 0x64
 80027bc:	f001 f9ee 	bl	8003b9c <__hexnan>
 80027c0:	2805      	cmp	r0, #5
 80027c2:	d127      	bne.n	8002814 <_strtod_l+0x37c>
 80027c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80027c6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80027ca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80027ce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80027d2:	e69a      	b.n	800250a <_strtod_l+0x72>
 80027d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80027d6:	fb08 2101 	mla	r1, r8, r1, r2
 80027da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80027de:	920e      	str	r2, [sp, #56]	@ 0x38
 80027e0:	e7b5      	b.n	800274e <_strtod_l+0x2b6>
 80027e2:	2a6e      	cmp	r2, #110	@ 0x6e
 80027e4:	e7da      	b.n	800279c <_strtod_l+0x304>
 80027e6:	498b      	ldr	r1, [pc, #556]	@ (8002a14 <_strtod_l+0x57c>)
 80027e8:	a819      	add	r0, sp, #100	@ 0x64
 80027ea:	f001 f9c3 	bl	8003b74 <__match>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	f43f aea4 	beq.w	800253c <_strtod_l+0xa4>
 80027f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80027f6:	4988      	ldr	r1, [pc, #544]	@ (8002a18 <_strtod_l+0x580>)
 80027f8:	3b01      	subs	r3, #1
 80027fa:	a819      	add	r0, sp, #100	@ 0x64
 80027fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80027fe:	f001 f9b9 	bl	8003b74 <__match>
 8002802:	b910      	cbnz	r0, 800280a <_strtod_l+0x372>
 8002804:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002806:	3301      	adds	r3, #1
 8002808:	9319      	str	r3, [sp, #100]	@ 0x64
 800280a:	f04f 0a00 	mov.w	sl, #0
 800280e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8002a1c <_strtod_l+0x584>
 8002812:	e67a      	b.n	800250a <_strtod_l+0x72>
 8002814:	4882      	ldr	r0, [pc, #520]	@ (8002a20 <_strtod_l+0x588>)
 8002816:	f000 feb7 	bl	8003588 <nan>
 800281a:	4682      	mov	sl, r0
 800281c:	468b      	mov	fp, r1
 800281e:	e674      	b.n	800250a <_strtod_l+0x72>
 8002820:	eba8 0309 	sub.w	r3, r8, r9
 8002824:	2f00      	cmp	r7, #0
 8002826:	bf08      	it	eq
 8002828:	462f      	moveq	r7, r5
 800282a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800282c:	2d10      	cmp	r5, #16
 800282e:	462c      	mov	r4, r5
 8002830:	9309      	str	r3, [sp, #36]	@ 0x24
 8002832:	bfa8      	it	ge
 8002834:	2410      	movge	r4, #16
 8002836:	f7fd fe39 	bl	80004ac <__aeabi_ui2d>
 800283a:	2d09      	cmp	r5, #9
 800283c:	4682      	mov	sl, r0
 800283e:	468b      	mov	fp, r1
 8002840:	dc11      	bgt.n	8002866 <_strtod_l+0x3ce>
 8002842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002844:	2b00      	cmp	r3, #0
 8002846:	f43f ae60 	beq.w	800250a <_strtod_l+0x72>
 800284a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800284c:	dd76      	ble.n	800293c <_strtod_l+0x4a4>
 800284e:	2b16      	cmp	r3, #22
 8002850:	dc5d      	bgt.n	800290e <_strtod_l+0x476>
 8002852:	4974      	ldr	r1, [pc, #464]	@ (8002a24 <_strtod_l+0x58c>)
 8002854:	4652      	mov	r2, sl
 8002856:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800285a:	465b      	mov	r3, fp
 800285c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002860:	f7fd fe9e 	bl	80005a0 <__aeabi_dmul>
 8002864:	e7d9      	b.n	800281a <_strtod_l+0x382>
 8002866:	4b6f      	ldr	r3, [pc, #444]	@ (8002a24 <_strtod_l+0x58c>)
 8002868:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800286c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8002870:	f7fd fe96 	bl	80005a0 <__aeabi_dmul>
 8002874:	4682      	mov	sl, r0
 8002876:	9808      	ldr	r0, [sp, #32]
 8002878:	468b      	mov	fp, r1
 800287a:	f7fd fe17 	bl	80004ac <__aeabi_ui2d>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4650      	mov	r0, sl
 8002884:	4659      	mov	r1, fp
 8002886:	f7fd fcd5 	bl	8000234 <__adddf3>
 800288a:	2d0f      	cmp	r5, #15
 800288c:	4682      	mov	sl, r0
 800288e:	468b      	mov	fp, r1
 8002890:	ddd7      	ble.n	8002842 <_strtod_l+0x3aa>
 8002892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002894:	1b2c      	subs	r4, r5, r4
 8002896:	441c      	add	r4, r3
 8002898:	2c00      	cmp	r4, #0
 800289a:	f340 8096 	ble.w	80029ca <_strtod_l+0x532>
 800289e:	f014 030f 	ands.w	r3, r4, #15
 80028a2:	d00a      	beq.n	80028ba <_strtod_l+0x422>
 80028a4:	495f      	ldr	r1, [pc, #380]	@ (8002a24 <_strtod_l+0x58c>)
 80028a6:	4652      	mov	r2, sl
 80028a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80028ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028b0:	465b      	mov	r3, fp
 80028b2:	f7fd fe75 	bl	80005a0 <__aeabi_dmul>
 80028b6:	4682      	mov	sl, r0
 80028b8:	468b      	mov	fp, r1
 80028ba:	f034 040f 	bics.w	r4, r4, #15
 80028be:	d073      	beq.n	80029a8 <_strtod_l+0x510>
 80028c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80028c4:	dd48      	ble.n	8002958 <_strtod_l+0x4c0>
 80028c6:	2400      	movs	r4, #0
 80028c8:	46a0      	mov	r8, r4
 80028ca:	46a1      	mov	r9, r4
 80028cc:	940a      	str	r4, [sp, #40]	@ 0x28
 80028ce:	2322      	movs	r3, #34	@ 0x22
 80028d0:	f04f 0a00 	mov.w	sl, #0
 80028d4:	9a05      	ldr	r2, [sp, #20]
 80028d6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8002a1c <_strtod_l+0x584>
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f43f ae13 	beq.w	800250a <_strtod_l+0x72>
 80028e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80028e6:	9805      	ldr	r0, [sp, #20]
 80028e8:	f001 fafc 	bl	8003ee4 <_Bfree>
 80028ec:	4649      	mov	r1, r9
 80028ee:	9805      	ldr	r0, [sp, #20]
 80028f0:	f001 faf8 	bl	8003ee4 <_Bfree>
 80028f4:	4641      	mov	r1, r8
 80028f6:	9805      	ldr	r0, [sp, #20]
 80028f8:	f001 faf4 	bl	8003ee4 <_Bfree>
 80028fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80028fe:	9805      	ldr	r0, [sp, #20]
 8002900:	f001 faf0 	bl	8003ee4 <_Bfree>
 8002904:	4621      	mov	r1, r4
 8002906:	9805      	ldr	r0, [sp, #20]
 8002908:	f001 faec 	bl	8003ee4 <_Bfree>
 800290c:	e5fd      	b.n	800250a <_strtod_l+0x72>
 800290e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002910:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8002914:	4293      	cmp	r3, r2
 8002916:	dbbc      	blt.n	8002892 <_strtod_l+0x3fa>
 8002918:	4c42      	ldr	r4, [pc, #264]	@ (8002a24 <_strtod_l+0x58c>)
 800291a:	f1c5 050f 	rsb	r5, r5, #15
 800291e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8002922:	4652      	mov	r2, sl
 8002924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002928:	465b      	mov	r3, fp
 800292a:	f7fd fe39 	bl	80005a0 <__aeabi_dmul>
 800292e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002930:	1b5d      	subs	r5, r3, r5
 8002932:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8002936:	e9d4 2300 	ldrd	r2, r3, [r4]
 800293a:	e791      	b.n	8002860 <_strtod_l+0x3c8>
 800293c:	3316      	adds	r3, #22
 800293e:	dba8      	blt.n	8002892 <_strtod_l+0x3fa>
 8002940:	4b38      	ldr	r3, [pc, #224]	@ (8002a24 <_strtod_l+0x58c>)
 8002942:	eba9 0808 	sub.w	r8, r9, r8
 8002946:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800294a:	4650      	mov	r0, sl
 800294c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8002950:	4659      	mov	r1, fp
 8002952:	f7fd ff4f 	bl	80007f4 <__aeabi_ddiv>
 8002956:	e760      	b.n	800281a <_strtod_l+0x382>
 8002958:	4b33      	ldr	r3, [pc, #204]	@ (8002a28 <_strtod_l+0x590>)
 800295a:	4650      	mov	r0, sl
 800295c:	9308      	str	r3, [sp, #32]
 800295e:	2300      	movs	r3, #0
 8002960:	4659      	mov	r1, fp
 8002962:	461e      	mov	r6, r3
 8002964:	1124      	asrs	r4, r4, #4
 8002966:	2c01      	cmp	r4, #1
 8002968:	dc21      	bgt.n	80029ae <_strtod_l+0x516>
 800296a:	b10b      	cbz	r3, 8002970 <_strtod_l+0x4d8>
 800296c:	4682      	mov	sl, r0
 800296e:	468b      	mov	fp, r1
 8002970:	492d      	ldr	r1, [pc, #180]	@ (8002a28 <_strtod_l+0x590>)
 8002972:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8002976:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800297a:	4652      	mov	r2, sl
 800297c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002980:	465b      	mov	r3, fp
 8002982:	f7fd fe0d 	bl	80005a0 <__aeabi_dmul>
 8002986:	4b25      	ldr	r3, [pc, #148]	@ (8002a1c <_strtod_l+0x584>)
 8002988:	460a      	mov	r2, r1
 800298a:	400b      	ands	r3, r1
 800298c:	4927      	ldr	r1, [pc, #156]	@ (8002a2c <_strtod_l+0x594>)
 800298e:	4682      	mov	sl, r0
 8002990:	428b      	cmp	r3, r1
 8002992:	d898      	bhi.n	80028c6 <_strtod_l+0x42e>
 8002994:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8002998:	428b      	cmp	r3, r1
 800299a:	bf86      	itte	hi
 800299c:	f04f 3aff 	movhi.w	sl, #4294967295
 80029a0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8002a30 <_strtod_l+0x598>
 80029a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80029a8:	2300      	movs	r3, #0
 80029aa:	9308      	str	r3, [sp, #32]
 80029ac:	e07a      	b.n	8002aa4 <_strtod_l+0x60c>
 80029ae:	07e2      	lsls	r2, r4, #31
 80029b0:	d505      	bpl.n	80029be <_strtod_l+0x526>
 80029b2:	9b08      	ldr	r3, [sp, #32]
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fdf2 	bl	80005a0 <__aeabi_dmul>
 80029bc:	2301      	movs	r3, #1
 80029be:	9a08      	ldr	r2, [sp, #32]
 80029c0:	3601      	adds	r6, #1
 80029c2:	3208      	adds	r2, #8
 80029c4:	1064      	asrs	r4, r4, #1
 80029c6:	9208      	str	r2, [sp, #32]
 80029c8:	e7cd      	b.n	8002966 <_strtod_l+0x4ce>
 80029ca:	d0ed      	beq.n	80029a8 <_strtod_l+0x510>
 80029cc:	4264      	negs	r4, r4
 80029ce:	f014 020f 	ands.w	r2, r4, #15
 80029d2:	d00a      	beq.n	80029ea <_strtod_l+0x552>
 80029d4:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <_strtod_l+0x58c>)
 80029d6:	4650      	mov	r0, sl
 80029d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029dc:	4659      	mov	r1, fp
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd ff07 	bl	80007f4 <__aeabi_ddiv>
 80029e6:	4682      	mov	sl, r0
 80029e8:	468b      	mov	fp, r1
 80029ea:	1124      	asrs	r4, r4, #4
 80029ec:	d0dc      	beq.n	80029a8 <_strtod_l+0x510>
 80029ee:	2c1f      	cmp	r4, #31
 80029f0:	dd20      	ble.n	8002a34 <_strtod_l+0x59c>
 80029f2:	2400      	movs	r4, #0
 80029f4:	46a0      	mov	r8, r4
 80029f6:	46a1      	mov	r9, r4
 80029f8:	940a      	str	r4, [sp, #40]	@ 0x28
 80029fa:	2322      	movs	r3, #34	@ 0x22
 80029fc:	9a05      	ldr	r2, [sp, #20]
 80029fe:	f04f 0a00 	mov.w	sl, #0
 8002a02:	f04f 0b00 	mov.w	fp, #0
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	e768      	b.n	80028dc <_strtod_l+0x444>
 8002a0a:	bf00      	nop
 8002a0c:	08005261 	.word	0x08005261
 8002a10:	08005264 	.word	0x08005264
 8002a14:	08005258 	.word	0x08005258
 8002a18:	0800525b 	.word	0x0800525b
 8002a1c:	7ff00000 	.word	0x7ff00000
 8002a20:	0800546d 	.word	0x0800546d
 8002a24:	08005570 	.word	0x08005570
 8002a28:	08005548 	.word	0x08005548
 8002a2c:	7ca00000 	.word	0x7ca00000
 8002a30:	7fefffff 	.word	0x7fefffff
 8002a34:	f014 0310 	ands.w	r3, r4, #16
 8002a38:	bf18      	it	ne
 8002a3a:	236a      	movne	r3, #106	@ 0x6a
 8002a3c:	4650      	mov	r0, sl
 8002a3e:	9308      	str	r3, [sp, #32]
 8002a40:	4659      	mov	r1, fp
 8002a42:	2300      	movs	r3, #0
 8002a44:	4ea9      	ldr	r6, [pc, #676]	@ (8002cec <_strtod_l+0x854>)
 8002a46:	07e2      	lsls	r2, r4, #31
 8002a48:	d504      	bpl.n	8002a54 <_strtod_l+0x5bc>
 8002a4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002a4e:	f7fd fda7 	bl	80005a0 <__aeabi_dmul>
 8002a52:	2301      	movs	r3, #1
 8002a54:	1064      	asrs	r4, r4, #1
 8002a56:	f106 0608 	add.w	r6, r6, #8
 8002a5a:	d1f4      	bne.n	8002a46 <_strtod_l+0x5ae>
 8002a5c:	b10b      	cbz	r3, 8002a62 <_strtod_l+0x5ca>
 8002a5e:	4682      	mov	sl, r0
 8002a60:	468b      	mov	fp, r1
 8002a62:	9b08      	ldr	r3, [sp, #32]
 8002a64:	b1b3      	cbz	r3, 8002a94 <_strtod_l+0x5fc>
 8002a66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8002a6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	4659      	mov	r1, fp
 8002a72:	dd0f      	ble.n	8002a94 <_strtod_l+0x5fc>
 8002a74:	2b1f      	cmp	r3, #31
 8002a76:	dd57      	ble.n	8002b28 <_strtod_l+0x690>
 8002a78:	2b34      	cmp	r3, #52	@ 0x34
 8002a7a:	bfd8      	it	le
 8002a7c:	f04f 33ff 	movle.w	r3, #4294967295
 8002a80:	f04f 0a00 	mov.w	sl, #0
 8002a84:	bfcf      	iteee	gt
 8002a86:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8002a8a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8002a8e:	4093      	lslle	r3, r2
 8002a90:	ea03 0b01 	andle.w	fp, r3, r1
 8002a94:	2200      	movs	r2, #0
 8002a96:	2300      	movs	r3, #0
 8002a98:	4650      	mov	r0, sl
 8002a9a:	4659      	mov	r1, fp
 8002a9c:	f7fd ffe8 	bl	8000a70 <__aeabi_dcmpeq>
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d1a6      	bne.n	80029f2 <_strtod_l+0x55a>
 8002aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002aa6:	463a      	mov	r2, r7
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8002aac:	462b      	mov	r3, r5
 8002aae:	9805      	ldr	r0, [sp, #20]
 8002ab0:	f001 fa80 	bl	8003fb4 <__s2b>
 8002ab4:	900a      	str	r0, [sp, #40]	@ 0x28
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	f43f af05 	beq.w	80028c6 <_strtod_l+0x42e>
 8002abc:	2400      	movs	r4, #0
 8002abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ac0:	eba9 0308 	sub.w	r3, r9, r8
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	bfa8      	it	ge
 8002ac8:	2300      	movge	r3, #0
 8002aca:	46a0      	mov	r8, r4
 8002acc:	9312      	str	r3, [sp, #72]	@ 0x48
 8002ace:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8002ad2:	9316      	str	r3, [sp, #88]	@ 0x58
 8002ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002ad6:	9805      	ldr	r0, [sp, #20]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	f001 f9c3 	bl	8003e64 <_Balloc>
 8002ade:	4681      	mov	r9, r0
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	f43f aef4 	beq.w	80028ce <_strtod_l+0x436>
 8002ae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002ae8:	300c      	adds	r0, #12
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	f103 010c 	add.w	r1, r3, #12
 8002af0:	3202      	adds	r2, #2
 8002af2:	0092      	lsls	r2, r2, #2
 8002af4:	f000 fd39 	bl	800356a <memcpy>
 8002af8:	ab1c      	add	r3, sp, #112	@ 0x70
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	4652      	mov	r2, sl
 8002b02:	465b      	mov	r3, fp
 8002b04:	9805      	ldr	r0, [sp, #20]
 8002b06:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8002b0a:	f001 fd85 	bl	8004618 <__d2b>
 8002b0e:	901a      	str	r0, [sp, #104]	@ 0x68
 8002b10:	2800      	cmp	r0, #0
 8002b12:	f43f aedc 	beq.w	80028ce <_strtod_l+0x436>
 8002b16:	2101      	movs	r1, #1
 8002b18:	9805      	ldr	r0, [sp, #20]
 8002b1a:	f001 fae1 	bl	80040e0 <__i2b>
 8002b1e:	4680      	mov	r8, r0
 8002b20:	b948      	cbnz	r0, 8002b36 <_strtod_l+0x69e>
 8002b22:	f04f 0800 	mov.w	r8, #0
 8002b26:	e6d2      	b.n	80028ce <_strtod_l+0x436>
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	ea03 0a0a 	and.w	sl, r3, sl
 8002b34:	e7ae      	b.n	8002a94 <_strtod_l+0x5fc>
 8002b36:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8002b38:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8002b3a:	2d00      	cmp	r5, #0
 8002b3c:	bfab      	itete	ge
 8002b3e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8002b40:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8002b42:	18ef      	addge	r7, r5, r3
 8002b44:	1b5e      	sublt	r6, r3, r5
 8002b46:	9b08      	ldr	r3, [sp, #32]
 8002b48:	bfa8      	it	ge
 8002b4a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8002b4c:	eba5 0503 	sub.w	r5, r5, r3
 8002b50:	4415      	add	r5, r2
 8002b52:	4b67      	ldr	r3, [pc, #412]	@ (8002cf0 <_strtod_l+0x858>)
 8002b54:	f105 35ff 	add.w	r5, r5, #4294967295
 8002b58:	bfb8      	it	lt
 8002b5a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8002b5c:	429d      	cmp	r5, r3
 8002b5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8002b62:	da50      	bge.n	8002c06 <_strtod_l+0x76e>
 8002b64:	1b5b      	subs	r3, r3, r5
 8002b66:	2b1f      	cmp	r3, #31
 8002b68:	f04f 0101 	mov.w	r1, #1
 8002b6c:	eba2 0203 	sub.w	r2, r2, r3
 8002b70:	dc3d      	bgt.n	8002bee <_strtod_l+0x756>
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8002b7c:	18bd      	adds	r5, r7, r2
 8002b7e:	9b08      	ldr	r3, [sp, #32]
 8002b80:	42af      	cmp	r7, r5
 8002b82:	4416      	add	r6, r2
 8002b84:	441e      	add	r6, r3
 8002b86:	463b      	mov	r3, r7
 8002b88:	bfa8      	it	ge
 8002b8a:	462b      	movge	r3, r5
 8002b8c:	42b3      	cmp	r3, r6
 8002b8e:	bfa8      	it	ge
 8002b90:	4633      	movge	r3, r6
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bfc2      	ittt	gt
 8002b96:	1aed      	subgt	r5, r5, r3
 8002b98:	1af6      	subgt	r6, r6, r3
 8002b9a:	1aff      	subgt	r7, r7, r3
 8002b9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	dd16      	ble.n	8002bd0 <_strtod_l+0x738>
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	9805      	ldr	r0, [sp, #20]
 8002ba8:	f001 fb58 	bl	800425c <__pow5mult>
 8002bac:	4680      	mov	r8, r0
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d0b7      	beq.n	8002b22 <_strtod_l+0x68a>
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8002bb6:	9805      	ldr	r0, [sp, #20]
 8002bb8:	f001 faa8 	bl	800410c <__multiply>
 8002bbc:	900e      	str	r0, [sp, #56]	@ 0x38
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	f43f ae85 	beq.w	80028ce <_strtod_l+0x436>
 8002bc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002bc6:	9805      	ldr	r0, [sp, #20]
 8002bc8:	f001 f98c 	bl	8003ee4 <_Bfree>
 8002bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002bce:	931a      	str	r3, [sp, #104]	@ 0x68
 8002bd0:	2d00      	cmp	r5, #0
 8002bd2:	dc1d      	bgt.n	8002c10 <_strtod_l+0x778>
 8002bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	dd23      	ble.n	8002c22 <_strtod_l+0x78a>
 8002bda:	4649      	mov	r1, r9
 8002bdc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8002bde:	9805      	ldr	r0, [sp, #20]
 8002be0:	f001 fb3c 	bl	800425c <__pow5mult>
 8002be4:	4681      	mov	r9, r0
 8002be6:	b9e0      	cbnz	r0, 8002c22 <_strtod_l+0x78a>
 8002be8:	f04f 0900 	mov.w	r9, #0
 8002bec:	e66f      	b.n	80028ce <_strtod_l+0x436>
 8002bee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8002bf2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8002bf6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8002bfa:	35e2      	adds	r5, #226	@ 0xe2
 8002bfc:	fa01 f305 	lsl.w	r3, r1, r5
 8002c00:	9310      	str	r3, [sp, #64]	@ 0x40
 8002c02:	9113      	str	r1, [sp, #76]	@ 0x4c
 8002c04:	e7ba      	b.n	8002b7c <_strtod_l+0x6e4>
 8002c06:	2300      	movs	r3, #0
 8002c08:	9310      	str	r3, [sp, #64]	@ 0x40
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002c0e:	e7b5      	b.n	8002b7c <_strtod_l+0x6e4>
 8002c10:	462a      	mov	r2, r5
 8002c12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002c14:	9805      	ldr	r0, [sp, #20]
 8002c16:	f001 fb7b 	bl	8004310 <__lshift>
 8002c1a:	901a      	str	r0, [sp, #104]	@ 0x68
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d1d9      	bne.n	8002bd4 <_strtod_l+0x73c>
 8002c20:	e655      	b.n	80028ce <_strtod_l+0x436>
 8002c22:	2e00      	cmp	r6, #0
 8002c24:	dd07      	ble.n	8002c36 <_strtod_l+0x79e>
 8002c26:	4649      	mov	r1, r9
 8002c28:	4632      	mov	r2, r6
 8002c2a:	9805      	ldr	r0, [sp, #20]
 8002c2c:	f001 fb70 	bl	8004310 <__lshift>
 8002c30:	4681      	mov	r9, r0
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d0d8      	beq.n	8002be8 <_strtod_l+0x750>
 8002c36:	2f00      	cmp	r7, #0
 8002c38:	dd08      	ble.n	8002c4c <_strtod_l+0x7b4>
 8002c3a:	4641      	mov	r1, r8
 8002c3c:	463a      	mov	r2, r7
 8002c3e:	9805      	ldr	r0, [sp, #20]
 8002c40:	f001 fb66 	bl	8004310 <__lshift>
 8002c44:	4680      	mov	r8, r0
 8002c46:	2800      	cmp	r0, #0
 8002c48:	f43f ae41 	beq.w	80028ce <_strtod_l+0x436>
 8002c4c:	464a      	mov	r2, r9
 8002c4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002c50:	9805      	ldr	r0, [sp, #20]
 8002c52:	f001 fbe5 	bl	8004420 <__mdiff>
 8002c56:	4604      	mov	r4, r0
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	f43f ae38 	beq.w	80028ce <_strtod_l+0x436>
 8002c5e:	68c3      	ldr	r3, [r0, #12]
 8002c60:	4641      	mov	r1, r8
 8002c62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002c64:	2300      	movs	r3, #0
 8002c66:	60c3      	str	r3, [r0, #12]
 8002c68:	f001 fbbe 	bl	80043e8 <__mcmp>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	da45      	bge.n	8002cfc <_strtod_l+0x864>
 8002c70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002c72:	ea53 030a 	orrs.w	r3, r3, sl
 8002c76:	d16b      	bne.n	8002d50 <_strtod_l+0x8b8>
 8002c78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d167      	bne.n	8002d50 <_strtod_l+0x8b8>
 8002c80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8002c84:	0d1b      	lsrs	r3, r3, #20
 8002c86:	051b      	lsls	r3, r3, #20
 8002c88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8002c8c:	d960      	bls.n	8002d50 <_strtod_l+0x8b8>
 8002c8e:	6963      	ldr	r3, [r4, #20]
 8002c90:	b913      	cbnz	r3, 8002c98 <_strtod_l+0x800>
 8002c92:	6923      	ldr	r3, [r4, #16]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	dd5b      	ble.n	8002d50 <_strtod_l+0x8b8>
 8002c98:	4621      	mov	r1, r4
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	9805      	ldr	r0, [sp, #20]
 8002c9e:	f001 fb37 	bl	8004310 <__lshift>
 8002ca2:	4641      	mov	r1, r8
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	f001 fb9f 	bl	80043e8 <__mcmp>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	dd50      	ble.n	8002d50 <_strtod_l+0x8b8>
 8002cae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8002cb2:	9a08      	ldr	r2, [sp, #32]
 8002cb4:	0d1b      	lsrs	r3, r3, #20
 8002cb6:	051b      	lsls	r3, r3, #20
 8002cb8:	2a00      	cmp	r2, #0
 8002cba:	d06a      	beq.n	8002d92 <_strtod_l+0x8fa>
 8002cbc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8002cc0:	d867      	bhi.n	8002d92 <_strtod_l+0x8fa>
 8002cc2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8002cc6:	f67f ae98 	bls.w	80029fa <_strtod_l+0x562>
 8002cca:	4650      	mov	r0, sl
 8002ccc:	4659      	mov	r1, fp
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <_strtod_l+0x85c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f7fd fc65 	bl	80005a0 <__aeabi_dmul>
 8002cd6:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <_strtod_l+0x860>)
 8002cd8:	4682      	mov	sl, r0
 8002cda:	400b      	ands	r3, r1
 8002cdc:	468b      	mov	fp, r1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f47f ae00 	bne.w	80028e4 <_strtod_l+0x44c>
 8002ce4:	2322      	movs	r3, #34	@ 0x22
 8002ce6:	9a05      	ldr	r2, [sp, #20]
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e5fb      	b.n	80028e4 <_strtod_l+0x44c>
 8002cec:	08005290 	.word	0x08005290
 8002cf0:	fffffc02 	.word	0xfffffc02
 8002cf4:	39500000 	.word	0x39500000
 8002cf8:	7ff00000 	.word	0x7ff00000
 8002cfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8002d00:	d165      	bne.n	8002dce <_strtod_l+0x936>
 8002d02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8002d04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002d08:	b35a      	cbz	r2, 8002d62 <_strtod_l+0x8ca>
 8002d0a:	4a99      	ldr	r2, [pc, #612]	@ (8002f70 <_strtod_l+0xad8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d12b      	bne.n	8002d68 <_strtod_l+0x8d0>
 8002d10:	9b08      	ldr	r3, [sp, #32]
 8002d12:	4651      	mov	r1, sl
 8002d14:	b303      	cbz	r3, 8002d58 <_strtod_l+0x8c0>
 8002d16:	465a      	mov	r2, fp
 8002d18:	4b96      	ldr	r3, [pc, #600]	@ (8002f74 <_strtod_l+0xadc>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	d81b      	bhi.n	8002d5e <_strtod_l+0x8c6>
 8002d26:	0d1b      	lsrs	r3, r3, #20
 8002d28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	4299      	cmp	r1, r3
 8002d32:	d119      	bne.n	8002d68 <_strtod_l+0x8d0>
 8002d34:	4b90      	ldr	r3, [pc, #576]	@ (8002f78 <_strtod_l+0xae0>)
 8002d36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d102      	bne.n	8002d42 <_strtod_l+0x8aa>
 8002d3c:	3101      	adds	r1, #1
 8002d3e:	f43f adc6 	beq.w	80028ce <_strtod_l+0x436>
 8002d42:	f04f 0a00 	mov.w	sl, #0
 8002d46:	4b8b      	ldr	r3, [pc, #556]	@ (8002f74 <_strtod_l+0xadc>)
 8002d48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8002d50:	9b08      	ldr	r3, [sp, #32]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1b9      	bne.n	8002cca <_strtod_l+0x832>
 8002d56:	e5c5      	b.n	80028e4 <_strtod_l+0x44c>
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5c:	e7e8      	b.n	8002d30 <_strtod_l+0x898>
 8002d5e:	4613      	mov	r3, r2
 8002d60:	e7e6      	b.n	8002d30 <_strtod_l+0x898>
 8002d62:	ea53 030a 	orrs.w	r3, r3, sl
 8002d66:	d0a2      	beq.n	8002cae <_strtod_l+0x816>
 8002d68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002d6a:	b1db      	cbz	r3, 8002da4 <_strtod_l+0x90c>
 8002d6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002d6e:	4213      	tst	r3, r2
 8002d70:	d0ee      	beq.n	8002d50 <_strtod_l+0x8b8>
 8002d72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002d74:	4650      	mov	r0, sl
 8002d76:	4659      	mov	r1, fp
 8002d78:	9a08      	ldr	r2, [sp, #32]
 8002d7a:	b1bb      	cbz	r3, 8002dac <_strtod_l+0x914>
 8002d7c:	f7ff fb69 	bl	8002452 <sulp>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002d88:	f7fd fa54 	bl	8000234 <__adddf3>
 8002d8c:	4682      	mov	sl, r0
 8002d8e:	468b      	mov	fp, r1
 8002d90:	e7de      	b.n	8002d50 <_strtod_l+0x8b8>
 8002d92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8002d96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8002d9a:	f04f 3aff 	mov.w	sl, #4294967295
 8002d9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8002da2:	e7d5      	b.n	8002d50 <_strtod_l+0x8b8>
 8002da4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002da6:	ea13 0f0a 	tst.w	r3, sl
 8002daa:	e7e1      	b.n	8002d70 <_strtod_l+0x8d8>
 8002dac:	f7ff fb51 	bl	8002452 <sulp>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002db8:	f7fd fa3a 	bl	8000230 <__aeabi_dsub>
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	4682      	mov	sl, r0
 8002dc2:	468b      	mov	fp, r1
 8002dc4:	f7fd fe54 	bl	8000a70 <__aeabi_dcmpeq>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d0c1      	beq.n	8002d50 <_strtod_l+0x8b8>
 8002dcc:	e615      	b.n	80029fa <_strtod_l+0x562>
 8002dce:	4641      	mov	r1, r8
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f001 fc79 	bl	80046c8 <__ratio>
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ddc:	4606      	mov	r6, r0
 8002dde:	460f      	mov	r7, r1
 8002de0:	f7fd fe5a 	bl	8000a98 <__aeabi_dcmple>
 8002de4:	2800      	cmp	r0, #0
 8002de6:	d06d      	beq.n	8002ec4 <_strtod_l+0xa2c>
 8002de8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d178      	bne.n	8002ee0 <_strtod_l+0xa48>
 8002dee:	f1ba 0f00 	cmp.w	sl, #0
 8002df2:	d156      	bne.n	8002ea2 <_strtod_l+0xa0a>
 8002df4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d158      	bne.n	8002eb0 <_strtod_l+0xa18>
 8002dfe:	2200      	movs	r2, #0
 8002e00:	4630      	mov	r0, r6
 8002e02:	4639      	mov	r1, r7
 8002e04:	4b5d      	ldr	r3, [pc, #372]	@ (8002f7c <_strtod_l+0xae4>)
 8002e06:	f7fd fe3d 	bl	8000a84 <__aeabi_dcmplt>
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d157      	bne.n	8002ebe <_strtod_l+0xa26>
 8002e0e:	4630      	mov	r0, r6
 8002e10:	4639      	mov	r1, r7
 8002e12:	2200      	movs	r2, #0
 8002e14:	4b5a      	ldr	r3, [pc, #360]	@ (8002f80 <_strtod_l+0xae8>)
 8002e16:	f7fd fbc3 	bl	80005a0 <__aeabi_dmul>
 8002e1a:	4606      	mov	r6, r0
 8002e1c:	460f      	mov	r7, r1
 8002e1e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8002e22:	9606      	str	r6, [sp, #24]
 8002e24:	9307      	str	r3, [sp, #28]
 8002e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002e2a:	4d52      	ldr	r5, [pc, #328]	@ (8002f74 <_strtod_l+0xadc>)
 8002e2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002e30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002e32:	401d      	ands	r5, r3
 8002e34:	4b53      	ldr	r3, [pc, #332]	@ (8002f84 <_strtod_l+0xaec>)
 8002e36:	429d      	cmp	r5, r3
 8002e38:	f040 80aa 	bne.w	8002f90 <_strtod_l+0xaf8>
 8002e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002e3e:	4650      	mov	r0, sl
 8002e40:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8002e44:	4659      	mov	r1, fp
 8002e46:	f001 fb7f 	bl	8004548 <__ulp>
 8002e4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002e4e:	f7fd fba7 	bl	80005a0 <__aeabi_dmul>
 8002e52:	4652      	mov	r2, sl
 8002e54:	465b      	mov	r3, fp
 8002e56:	f7fd f9ed 	bl	8000234 <__adddf3>
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4945      	ldr	r1, [pc, #276]	@ (8002f74 <_strtod_l+0xadc>)
 8002e5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002f88 <_strtod_l+0xaf0>)
 8002e60:	4019      	ands	r1, r3
 8002e62:	4291      	cmp	r1, r2
 8002e64:	4682      	mov	sl, r0
 8002e66:	d942      	bls.n	8002eee <_strtod_l+0xa56>
 8002e68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002e6a:	4b43      	ldr	r3, [pc, #268]	@ (8002f78 <_strtod_l+0xae0>)
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d103      	bne.n	8002e78 <_strtod_l+0x9e0>
 8002e70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002e72:	3301      	adds	r3, #1
 8002e74:	f43f ad2b 	beq.w	80028ce <_strtod_l+0x436>
 8002e78:	f04f 3aff 	mov.w	sl, #4294967295
 8002e7c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8002f78 <_strtod_l+0xae0>
 8002e80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002e82:	9805      	ldr	r0, [sp, #20]
 8002e84:	f001 f82e 	bl	8003ee4 <_Bfree>
 8002e88:	4649      	mov	r1, r9
 8002e8a:	9805      	ldr	r0, [sp, #20]
 8002e8c:	f001 f82a 	bl	8003ee4 <_Bfree>
 8002e90:	4641      	mov	r1, r8
 8002e92:	9805      	ldr	r0, [sp, #20]
 8002e94:	f001 f826 	bl	8003ee4 <_Bfree>
 8002e98:	4621      	mov	r1, r4
 8002e9a:	9805      	ldr	r0, [sp, #20]
 8002e9c:	f001 f822 	bl	8003ee4 <_Bfree>
 8002ea0:	e618      	b.n	8002ad4 <_strtod_l+0x63c>
 8002ea2:	f1ba 0f01 	cmp.w	sl, #1
 8002ea6:	d103      	bne.n	8002eb0 <_strtod_l+0xa18>
 8002ea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f43f ada5 	beq.w	80029fa <_strtod_l+0x562>
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4b36      	ldr	r3, [pc, #216]	@ (8002f8c <_strtod_l+0xaf4>)
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002eba:	4f30      	ldr	r7, [pc, #192]	@ (8002f7c <_strtod_l+0xae4>)
 8002ebc:	e7b3      	b.n	8002e26 <_strtod_l+0x98e>
 8002ebe:	2600      	movs	r6, #0
 8002ec0:	4f2f      	ldr	r7, [pc, #188]	@ (8002f80 <_strtod_l+0xae8>)
 8002ec2:	e7ac      	b.n	8002e1e <_strtod_l+0x986>
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	4639      	mov	r1, r7
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f80 <_strtod_l+0xae8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f7fd fb68 	bl	80005a0 <__aeabi_dmul>
 8002ed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002ed2:	4606      	mov	r6, r0
 8002ed4:	460f      	mov	r7, r1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0a1      	beq.n	8002e1e <_strtod_l+0x986>
 8002eda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002ede:	e7a2      	b.n	8002e26 <_strtod_l+0x98e>
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	4b26      	ldr	r3, [pc, #152]	@ (8002f7c <_strtod_l+0xae4>)
 8002ee4:	4616      	mov	r6, r2
 8002ee6:	461f      	mov	r7, r3
 8002ee8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002eec:	e79b      	b.n	8002e26 <_strtod_l+0x98e>
 8002eee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8002ef2:	9b08      	ldr	r3, [sp, #32]
 8002ef4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1c1      	bne.n	8002e80 <_strtod_l+0x9e8>
 8002efc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8002f00:	0d1b      	lsrs	r3, r3, #20
 8002f02:	051b      	lsls	r3, r3, #20
 8002f04:	429d      	cmp	r5, r3
 8002f06:	d1bb      	bne.n	8002e80 <_strtod_l+0x9e8>
 8002f08:	4630      	mov	r0, r6
 8002f0a:	4639      	mov	r1, r7
 8002f0c:	f7fd fe02 	bl	8000b14 <__aeabi_d2lz>
 8002f10:	f7fd fb18 	bl	8000544 <__aeabi_l2d>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4630      	mov	r0, r6
 8002f1a:	4639      	mov	r1, r7
 8002f1c:	f7fd f988 	bl	8000230 <__aeabi_dsub>
 8002f20:	460b      	mov	r3, r1
 8002f22:	4602      	mov	r2, r0
 8002f24:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8002f28:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8002f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002f2e:	ea46 060a 	orr.w	r6, r6, sl
 8002f32:	431e      	orrs	r6, r3
 8002f34:	d069      	beq.n	800300a <_strtod_l+0xb72>
 8002f36:	a30a      	add	r3, pc, #40	@ (adr r3, 8002f60 <_strtod_l+0xac8>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f7fd fda2 	bl	8000a84 <__aeabi_dcmplt>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	f47f accf 	bne.w	80028e4 <_strtod_l+0x44c>
 8002f46:	a308      	add	r3, pc, #32	@ (adr r3, 8002f68 <_strtod_l+0xad0>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002f50:	f7fd fdb6 	bl	8000ac0 <__aeabi_dcmpgt>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d093      	beq.n	8002e80 <_strtod_l+0x9e8>
 8002f58:	e4c4      	b.n	80028e4 <_strtod_l+0x44c>
 8002f5a:	bf00      	nop
 8002f5c:	f3af 8000 	nop.w
 8002f60:	94a03595 	.word	0x94a03595
 8002f64:	3fdfffff 	.word	0x3fdfffff
 8002f68:	35afe535 	.word	0x35afe535
 8002f6c:	3fe00000 	.word	0x3fe00000
 8002f70:	000fffff 	.word	0x000fffff
 8002f74:	7ff00000 	.word	0x7ff00000
 8002f78:	7fefffff 	.word	0x7fefffff
 8002f7c:	3ff00000 	.word	0x3ff00000
 8002f80:	3fe00000 	.word	0x3fe00000
 8002f84:	7fe00000 	.word	0x7fe00000
 8002f88:	7c9fffff 	.word	0x7c9fffff
 8002f8c:	bff00000 	.word	0xbff00000
 8002f90:	9b08      	ldr	r3, [sp, #32]
 8002f92:	b323      	cbz	r3, 8002fde <_strtod_l+0xb46>
 8002f94:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8002f98:	d821      	bhi.n	8002fde <_strtod_l+0xb46>
 8002f9a:	a327      	add	r3, pc, #156	@ (adr r3, 8003038 <_strtod_l+0xba0>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	4639      	mov	r1, r7
 8002fa4:	f7fd fd78 	bl	8000a98 <__aeabi_dcmple>
 8002fa8:	b1a0      	cbz	r0, 8002fd4 <_strtod_l+0xb3c>
 8002faa:	4639      	mov	r1, r7
 8002fac:	4630      	mov	r0, r6
 8002fae:	f7fd fd91 	bl	8000ad4 <__aeabi_d2uiz>
 8002fb2:	2801      	cmp	r0, #1
 8002fb4:	bf38      	it	cc
 8002fb6:	2001      	movcc	r0, #1
 8002fb8:	f7fd fa78 	bl	80004ac <__aeabi_ui2d>
 8002fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002fbe:	4606      	mov	r6, r0
 8002fc0:	460f      	mov	r7, r1
 8002fc2:	b9fb      	cbnz	r3, 8003004 <_strtod_l+0xb6c>
 8002fc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002fc8:	9014      	str	r0, [sp, #80]	@ 0x50
 8002fca:	9315      	str	r3, [sp, #84]	@ 0x54
 8002fcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8002fd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002fd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002fd6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8002fda:	1b5b      	subs	r3, r3, r5
 8002fdc:	9311      	str	r3, [sp, #68]	@ 0x44
 8002fde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002fe2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8002fe6:	f001 faaf 	bl	8004548 <__ulp>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4650      	mov	r0, sl
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	f7fd fad5 	bl	80005a0 <__aeabi_dmul>
 8002ff6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8002ffa:	f7fd f91b 	bl	8000234 <__adddf3>
 8002ffe:	4682      	mov	sl, r0
 8003000:	468b      	mov	fp, r1
 8003002:	e776      	b.n	8002ef2 <_strtod_l+0xa5a>
 8003004:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8003008:	e7e0      	b.n	8002fcc <_strtod_l+0xb34>
 800300a:	a30d      	add	r3, pc, #52	@ (adr r3, 8003040 <_strtod_l+0xba8>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f7fd fd38 	bl	8000a84 <__aeabi_dcmplt>
 8003014:	e79e      	b.n	8002f54 <_strtod_l+0xabc>
 8003016:	2300      	movs	r3, #0
 8003018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800301a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800301c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	f7ff ba77 	b.w	8002512 <_strtod_l+0x7a>
 8003024:	2a65      	cmp	r2, #101	@ 0x65
 8003026:	f43f ab6e 	beq.w	8002706 <_strtod_l+0x26e>
 800302a:	2a45      	cmp	r2, #69	@ 0x45
 800302c:	f43f ab6b 	beq.w	8002706 <_strtod_l+0x26e>
 8003030:	2301      	movs	r3, #1
 8003032:	f7ff bba6 	b.w	8002782 <_strtod_l+0x2ea>
 8003036:	bf00      	nop
 8003038:	ffc00000 	.word	0xffc00000
 800303c:	41dfffff 	.word	0x41dfffff
 8003040:	94a03595 	.word	0x94a03595
 8003044:	3fcfffff 	.word	0x3fcfffff

08003048 <strtod>:
 8003048:	460a      	mov	r2, r1
 800304a:	4601      	mov	r1, r0
 800304c:	4802      	ldr	r0, [pc, #8]	@ (8003058 <strtod+0x10>)
 800304e:	4b03      	ldr	r3, [pc, #12]	@ (800305c <strtod+0x14>)
 8003050:	6800      	ldr	r0, [r0, #0]
 8003052:	f7ff ba21 	b.w	8002498 <_strtod_l>
 8003056:	bf00      	nop
 8003058:	20000184 	.word	0x20000184
 800305c:	20000018 	.word	0x20000018

08003060 <_strtol_l.constprop.0>:
 8003060:	2b24      	cmp	r3, #36	@ 0x24
 8003062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003066:	4686      	mov	lr, r0
 8003068:	4690      	mov	r8, r2
 800306a:	d801      	bhi.n	8003070 <_strtol_l.constprop.0+0x10>
 800306c:	2b01      	cmp	r3, #1
 800306e:	d106      	bne.n	800307e <_strtol_l.constprop.0+0x1e>
 8003070:	f000 fa4e 	bl	8003510 <__errno>
 8003074:	2316      	movs	r3, #22
 8003076:	6003      	str	r3, [r0, #0]
 8003078:	2000      	movs	r0, #0
 800307a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307e:	460d      	mov	r5, r1
 8003080:	4833      	ldr	r0, [pc, #204]	@ (8003150 <_strtol_l.constprop.0+0xf0>)
 8003082:	462a      	mov	r2, r5
 8003084:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003088:	5d06      	ldrb	r6, [r0, r4]
 800308a:	f016 0608 	ands.w	r6, r6, #8
 800308e:	d1f8      	bne.n	8003082 <_strtol_l.constprop.0+0x22>
 8003090:	2c2d      	cmp	r4, #45	@ 0x2d
 8003092:	d12d      	bne.n	80030f0 <_strtol_l.constprop.0+0x90>
 8003094:	2601      	movs	r6, #1
 8003096:	782c      	ldrb	r4, [r5, #0]
 8003098:	1c95      	adds	r5, r2, #2
 800309a:	f033 0210 	bics.w	r2, r3, #16
 800309e:	d109      	bne.n	80030b4 <_strtol_l.constprop.0+0x54>
 80030a0:	2c30      	cmp	r4, #48	@ 0x30
 80030a2:	d12a      	bne.n	80030fa <_strtol_l.constprop.0+0x9a>
 80030a4:	782a      	ldrb	r2, [r5, #0]
 80030a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80030aa:	2a58      	cmp	r2, #88	@ 0x58
 80030ac:	d125      	bne.n	80030fa <_strtol_l.constprop.0+0x9a>
 80030ae:	2310      	movs	r3, #16
 80030b0:	786c      	ldrb	r4, [r5, #1]
 80030b2:	3502      	adds	r5, #2
 80030b4:	2200      	movs	r2, #0
 80030b6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80030ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80030be:	fbbc f9f3 	udiv	r9, ip, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80030c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80030cc:	2f09      	cmp	r7, #9
 80030ce:	d81b      	bhi.n	8003108 <_strtol_l.constprop.0+0xa8>
 80030d0:	463c      	mov	r4, r7
 80030d2:	42a3      	cmp	r3, r4
 80030d4:	dd27      	ble.n	8003126 <_strtol_l.constprop.0+0xc6>
 80030d6:	1c57      	adds	r7, r2, #1
 80030d8:	d007      	beq.n	80030ea <_strtol_l.constprop.0+0x8a>
 80030da:	4581      	cmp	r9, r0
 80030dc:	d320      	bcc.n	8003120 <_strtol_l.constprop.0+0xc0>
 80030de:	d101      	bne.n	80030e4 <_strtol_l.constprop.0+0x84>
 80030e0:	45a2      	cmp	sl, r4
 80030e2:	db1d      	blt.n	8003120 <_strtol_l.constprop.0+0xc0>
 80030e4:	2201      	movs	r2, #1
 80030e6:	fb00 4003 	mla	r0, r0, r3, r4
 80030ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80030ee:	e7eb      	b.n	80030c8 <_strtol_l.constprop.0+0x68>
 80030f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80030f2:	bf04      	itt	eq
 80030f4:	782c      	ldrbeq	r4, [r5, #0]
 80030f6:	1c95      	addeq	r5, r2, #2
 80030f8:	e7cf      	b.n	800309a <_strtol_l.constprop.0+0x3a>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1da      	bne.n	80030b4 <_strtol_l.constprop.0+0x54>
 80030fe:	2c30      	cmp	r4, #48	@ 0x30
 8003100:	bf0c      	ite	eq
 8003102:	2308      	moveq	r3, #8
 8003104:	230a      	movne	r3, #10
 8003106:	e7d5      	b.n	80030b4 <_strtol_l.constprop.0+0x54>
 8003108:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800310c:	2f19      	cmp	r7, #25
 800310e:	d801      	bhi.n	8003114 <_strtol_l.constprop.0+0xb4>
 8003110:	3c37      	subs	r4, #55	@ 0x37
 8003112:	e7de      	b.n	80030d2 <_strtol_l.constprop.0+0x72>
 8003114:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003118:	2f19      	cmp	r7, #25
 800311a:	d804      	bhi.n	8003126 <_strtol_l.constprop.0+0xc6>
 800311c:	3c57      	subs	r4, #87	@ 0x57
 800311e:	e7d8      	b.n	80030d2 <_strtol_l.constprop.0+0x72>
 8003120:	f04f 32ff 	mov.w	r2, #4294967295
 8003124:	e7e1      	b.n	80030ea <_strtol_l.constprop.0+0x8a>
 8003126:	1c53      	adds	r3, r2, #1
 8003128:	d108      	bne.n	800313c <_strtol_l.constprop.0+0xdc>
 800312a:	2322      	movs	r3, #34	@ 0x22
 800312c:	4660      	mov	r0, ip
 800312e:	f8ce 3000 	str.w	r3, [lr]
 8003132:	f1b8 0f00 	cmp.w	r8, #0
 8003136:	d0a0      	beq.n	800307a <_strtol_l.constprop.0+0x1a>
 8003138:	1e69      	subs	r1, r5, #1
 800313a:	e006      	b.n	800314a <_strtol_l.constprop.0+0xea>
 800313c:	b106      	cbz	r6, 8003140 <_strtol_l.constprop.0+0xe0>
 800313e:	4240      	negs	r0, r0
 8003140:	f1b8 0f00 	cmp.w	r8, #0
 8003144:	d099      	beq.n	800307a <_strtol_l.constprop.0+0x1a>
 8003146:	2a00      	cmp	r2, #0
 8003148:	d1f6      	bne.n	8003138 <_strtol_l.constprop.0+0xd8>
 800314a:	f8c8 1000 	str.w	r1, [r8]
 800314e:	e794      	b.n	800307a <_strtol_l.constprop.0+0x1a>
 8003150:	080052b9 	.word	0x080052b9

08003154 <strtol>:
 8003154:	4613      	mov	r3, r2
 8003156:	460a      	mov	r2, r1
 8003158:	4601      	mov	r1, r0
 800315a:	4802      	ldr	r0, [pc, #8]	@ (8003164 <strtol+0x10>)
 800315c:	6800      	ldr	r0, [r0, #0]
 800315e:	f7ff bf7f 	b.w	8003060 <_strtol_l.constprop.0>
 8003162:	bf00      	nop
 8003164:	20000184 	.word	0x20000184

08003168 <std>:
 8003168:	2300      	movs	r3, #0
 800316a:	b510      	push	{r4, lr}
 800316c:	4604      	mov	r4, r0
 800316e:	e9c0 3300 	strd	r3, r3, [r0]
 8003172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003176:	6083      	str	r3, [r0, #8]
 8003178:	8181      	strh	r1, [r0, #12]
 800317a:	6643      	str	r3, [r0, #100]	@ 0x64
 800317c:	81c2      	strh	r2, [r0, #14]
 800317e:	6183      	str	r3, [r0, #24]
 8003180:	4619      	mov	r1, r3
 8003182:	2208      	movs	r2, #8
 8003184:	305c      	adds	r0, #92	@ 0x5c
 8003186:	f000 f8f4 	bl	8003372 <memset>
 800318a:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <std+0x58>)
 800318c:	6224      	str	r4, [r4, #32]
 800318e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003190:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <std+0x5c>)
 8003192:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <std+0x60>)
 8003196:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <std+0x64>)
 800319a:	6323      	str	r3, [r4, #48]	@ 0x30
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <std+0x68>)
 800319e:	429c      	cmp	r4, r3
 80031a0:	d006      	beq.n	80031b0 <std+0x48>
 80031a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80031a6:	4294      	cmp	r4, r2
 80031a8:	d002      	beq.n	80031b0 <std+0x48>
 80031aa:	33d0      	adds	r3, #208	@ 0xd0
 80031ac:	429c      	cmp	r4, r3
 80031ae:	d105      	bne.n	80031bc <std+0x54>
 80031b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80031b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b8:	f000 b9d4 	b.w	8003564 <__retarget_lock_init_recursive>
 80031bc:	bd10      	pop	{r4, pc}
 80031be:	bf00      	nop
 80031c0:	080032ed 	.word	0x080032ed
 80031c4:	0800330f 	.word	0x0800330f
 80031c8:	08003347 	.word	0x08003347
 80031cc:	0800336b 	.word	0x0800336b
 80031d0:	20000398 	.word	0x20000398

080031d4 <stdio_exit_handler>:
 80031d4:	4a02      	ldr	r2, [pc, #8]	@ (80031e0 <stdio_exit_handler+0xc>)
 80031d6:	4903      	ldr	r1, [pc, #12]	@ (80031e4 <stdio_exit_handler+0x10>)
 80031d8:	4803      	ldr	r0, [pc, #12]	@ (80031e8 <stdio_exit_handler+0x14>)
 80031da:	f000 b869 	b.w	80032b0 <_fwalk_sglue>
 80031de:	bf00      	nop
 80031e0:	2000000c 	.word	0x2000000c
 80031e4:	080048cd 	.word	0x080048cd
 80031e8:	20000188 	.word	0x20000188

080031ec <cleanup_stdio>:
 80031ec:	6841      	ldr	r1, [r0, #4]
 80031ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <cleanup_stdio+0x34>)
 80031f0:	b510      	push	{r4, lr}
 80031f2:	4299      	cmp	r1, r3
 80031f4:	4604      	mov	r4, r0
 80031f6:	d001      	beq.n	80031fc <cleanup_stdio+0x10>
 80031f8:	f001 fb68 	bl	80048cc <_fflush_r>
 80031fc:	68a1      	ldr	r1, [r4, #8]
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <cleanup_stdio+0x38>)
 8003200:	4299      	cmp	r1, r3
 8003202:	d002      	beq.n	800320a <cleanup_stdio+0x1e>
 8003204:	4620      	mov	r0, r4
 8003206:	f001 fb61 	bl	80048cc <_fflush_r>
 800320a:	68e1      	ldr	r1, [r4, #12]
 800320c:	4b06      	ldr	r3, [pc, #24]	@ (8003228 <cleanup_stdio+0x3c>)
 800320e:	4299      	cmp	r1, r3
 8003210:	d004      	beq.n	800321c <cleanup_stdio+0x30>
 8003212:	4620      	mov	r0, r4
 8003214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003218:	f001 bb58 	b.w	80048cc <_fflush_r>
 800321c:	bd10      	pop	{r4, pc}
 800321e:	bf00      	nop
 8003220:	20000398 	.word	0x20000398
 8003224:	20000400 	.word	0x20000400
 8003228:	20000468 	.word	0x20000468

0800322c <global_stdio_init.part.0>:
 800322c:	b510      	push	{r4, lr}
 800322e:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <global_stdio_init.part.0+0x30>)
 8003230:	4c0b      	ldr	r4, [pc, #44]	@ (8003260 <global_stdio_init.part.0+0x34>)
 8003232:	4a0c      	ldr	r2, [pc, #48]	@ (8003264 <global_stdio_init.part.0+0x38>)
 8003234:	4620      	mov	r0, r4
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	2104      	movs	r1, #4
 800323a:	2200      	movs	r2, #0
 800323c:	f7ff ff94 	bl	8003168 <std>
 8003240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003244:	2201      	movs	r2, #1
 8003246:	2109      	movs	r1, #9
 8003248:	f7ff ff8e 	bl	8003168 <std>
 800324c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003250:	2202      	movs	r2, #2
 8003252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003256:	2112      	movs	r1, #18
 8003258:	f7ff bf86 	b.w	8003168 <std>
 800325c:	200004d0 	.word	0x200004d0
 8003260:	20000398 	.word	0x20000398
 8003264:	080031d5 	.word	0x080031d5

08003268 <__sfp_lock_acquire>:
 8003268:	4801      	ldr	r0, [pc, #4]	@ (8003270 <__sfp_lock_acquire+0x8>)
 800326a:	f000 b97c 	b.w	8003566 <__retarget_lock_acquire_recursive>
 800326e:	bf00      	nop
 8003270:	200004d9 	.word	0x200004d9

08003274 <__sfp_lock_release>:
 8003274:	4801      	ldr	r0, [pc, #4]	@ (800327c <__sfp_lock_release+0x8>)
 8003276:	f000 b977 	b.w	8003568 <__retarget_lock_release_recursive>
 800327a:	bf00      	nop
 800327c:	200004d9 	.word	0x200004d9

08003280 <__sinit>:
 8003280:	b510      	push	{r4, lr}
 8003282:	4604      	mov	r4, r0
 8003284:	f7ff fff0 	bl	8003268 <__sfp_lock_acquire>
 8003288:	6a23      	ldr	r3, [r4, #32]
 800328a:	b11b      	cbz	r3, 8003294 <__sinit+0x14>
 800328c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003290:	f7ff bff0 	b.w	8003274 <__sfp_lock_release>
 8003294:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <__sinit+0x28>)
 8003296:	6223      	str	r3, [r4, #32]
 8003298:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <__sinit+0x2c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f5      	bne.n	800328c <__sinit+0xc>
 80032a0:	f7ff ffc4 	bl	800322c <global_stdio_init.part.0>
 80032a4:	e7f2      	b.n	800328c <__sinit+0xc>
 80032a6:	bf00      	nop
 80032a8:	080031ed 	.word	0x080031ed
 80032ac:	200004d0 	.word	0x200004d0

080032b0 <_fwalk_sglue>:
 80032b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032b4:	4607      	mov	r7, r0
 80032b6:	4688      	mov	r8, r1
 80032b8:	4614      	mov	r4, r2
 80032ba:	2600      	movs	r6, #0
 80032bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032c0:	f1b9 0901 	subs.w	r9, r9, #1
 80032c4:	d505      	bpl.n	80032d2 <_fwalk_sglue+0x22>
 80032c6:	6824      	ldr	r4, [r4, #0]
 80032c8:	2c00      	cmp	r4, #0
 80032ca:	d1f7      	bne.n	80032bc <_fwalk_sglue+0xc>
 80032cc:	4630      	mov	r0, r6
 80032ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032d2:	89ab      	ldrh	r3, [r5, #12]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d907      	bls.n	80032e8 <_fwalk_sglue+0x38>
 80032d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032dc:	3301      	adds	r3, #1
 80032de:	d003      	beq.n	80032e8 <_fwalk_sglue+0x38>
 80032e0:	4629      	mov	r1, r5
 80032e2:	4638      	mov	r0, r7
 80032e4:	47c0      	blx	r8
 80032e6:	4306      	orrs	r6, r0
 80032e8:	3568      	adds	r5, #104	@ 0x68
 80032ea:	e7e9      	b.n	80032c0 <_fwalk_sglue+0x10>

080032ec <__sread>:
 80032ec:	b510      	push	{r4, lr}
 80032ee:	460c      	mov	r4, r1
 80032f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f4:	f000 f8e8 	bl	80034c8 <_read_r>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	bfab      	itete	ge
 80032fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80032fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003300:	181b      	addge	r3, r3, r0
 8003302:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003306:	bfac      	ite	ge
 8003308:	6563      	strge	r3, [r4, #84]	@ 0x54
 800330a:	81a3      	strhlt	r3, [r4, #12]
 800330c:	bd10      	pop	{r4, pc}

0800330e <__swrite>:
 800330e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003312:	461f      	mov	r7, r3
 8003314:	898b      	ldrh	r3, [r1, #12]
 8003316:	4605      	mov	r5, r0
 8003318:	05db      	lsls	r3, r3, #23
 800331a:	460c      	mov	r4, r1
 800331c:	4616      	mov	r6, r2
 800331e:	d505      	bpl.n	800332c <__swrite+0x1e>
 8003320:	2302      	movs	r3, #2
 8003322:	2200      	movs	r2, #0
 8003324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003328:	f000 f8bc 	bl	80034a4 <_lseek_r>
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	4632      	mov	r2, r6
 8003330:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003334:	81a3      	strh	r3, [r4, #12]
 8003336:	4628      	mov	r0, r5
 8003338:	463b      	mov	r3, r7
 800333a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800333e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003342:	f000 b8d3 	b.w	80034ec <_write_r>

08003346 <__sseek>:
 8003346:	b510      	push	{r4, lr}
 8003348:	460c      	mov	r4, r1
 800334a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800334e:	f000 f8a9 	bl	80034a4 <_lseek_r>
 8003352:	1c43      	adds	r3, r0, #1
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	bf15      	itete	ne
 8003358:	6560      	strne	r0, [r4, #84]	@ 0x54
 800335a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800335e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003362:	81a3      	strheq	r3, [r4, #12]
 8003364:	bf18      	it	ne
 8003366:	81a3      	strhne	r3, [r4, #12]
 8003368:	bd10      	pop	{r4, pc}

0800336a <__sclose>:
 800336a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800336e:	f000 b889 	b.w	8003484 <_close_r>

08003372 <memset>:
 8003372:	4603      	mov	r3, r0
 8003374:	4402      	add	r2, r0
 8003376:	4293      	cmp	r3, r2
 8003378:	d100      	bne.n	800337c <memset+0xa>
 800337a:	4770      	bx	lr
 800337c:	f803 1b01 	strb.w	r1, [r3], #1
 8003380:	e7f9      	b.n	8003376 <memset+0x4>

08003382 <strncmp>:
 8003382:	b510      	push	{r4, lr}
 8003384:	b16a      	cbz	r2, 80033a2 <strncmp+0x20>
 8003386:	3901      	subs	r1, #1
 8003388:	1884      	adds	r4, r0, r2
 800338a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800338e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003392:	429a      	cmp	r2, r3
 8003394:	d103      	bne.n	800339e <strncmp+0x1c>
 8003396:	42a0      	cmp	r0, r4
 8003398:	d001      	beq.n	800339e <strncmp+0x1c>
 800339a:	2a00      	cmp	r2, #0
 800339c:	d1f5      	bne.n	800338a <strncmp+0x8>
 800339e:	1ad0      	subs	r0, r2, r3
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	4610      	mov	r0, r2
 80033a4:	e7fc      	b.n	80033a0 <strncmp+0x1e>

080033a6 <strncpy>:
 80033a6:	4603      	mov	r3, r0
 80033a8:	b510      	push	{r4, lr}
 80033aa:	3901      	subs	r1, #1
 80033ac:	b132      	cbz	r2, 80033bc <strncpy+0x16>
 80033ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80033b2:	3a01      	subs	r2, #1
 80033b4:	f803 4b01 	strb.w	r4, [r3], #1
 80033b8:	2c00      	cmp	r4, #0
 80033ba:	d1f7      	bne.n	80033ac <strncpy+0x6>
 80033bc:	2100      	movs	r1, #0
 80033be:	441a      	add	r2, r3
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d100      	bne.n	80033c6 <strncpy+0x20>
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ca:	e7f9      	b.n	80033c0 <strncpy+0x1a>

080033cc <strtok>:
 80033cc:	4b16      	ldr	r3, [pc, #88]	@ (8003428 <strtok+0x5c>)
 80033ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d2:	681f      	ldr	r7, [r3, #0]
 80033d4:	4605      	mov	r5, r0
 80033d6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80033d8:	460e      	mov	r6, r1
 80033da:	b9ec      	cbnz	r4, 8003418 <strtok+0x4c>
 80033dc:	2050      	movs	r0, #80	@ 0x50
 80033de:	f000 fc79 	bl	8003cd4 <malloc>
 80033e2:	4602      	mov	r2, r0
 80033e4:	6478      	str	r0, [r7, #68]	@ 0x44
 80033e6:	b920      	cbnz	r0, 80033f2 <strtok+0x26>
 80033e8:	215b      	movs	r1, #91	@ 0x5b
 80033ea:	4b10      	ldr	r3, [pc, #64]	@ (800342c <strtok+0x60>)
 80033ec:	4810      	ldr	r0, [pc, #64]	@ (8003430 <strtok+0x64>)
 80033ee:	f000 f8d1 	bl	8003594 <__assert_func>
 80033f2:	e9c0 4400 	strd	r4, r4, [r0]
 80033f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80033fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80033fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8003402:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8003406:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800340a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800340e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8003412:	6184      	str	r4, [r0, #24]
 8003414:	7704      	strb	r4, [r0, #28]
 8003416:	6244      	str	r4, [r0, #36]	@ 0x24
 8003418:	4631      	mov	r1, r6
 800341a:	4628      	mov	r0, r5
 800341c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800341e:	2301      	movs	r3, #1
 8003420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003424:	f000 b806 	b.w	8003434 <__strtok_r>
 8003428:	20000184 	.word	0x20000184
 800342c:	080053b9 	.word	0x080053b9
 8003430:	080053d0 	.word	0x080053d0

08003434 <__strtok_r>:
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	4604      	mov	r4, r0
 8003438:	b908      	cbnz	r0, 800343e <__strtok_r+0xa>
 800343a:	6814      	ldr	r4, [r2, #0]
 800343c:	b144      	cbz	r4, 8003450 <__strtok_r+0x1c>
 800343e:	460f      	mov	r7, r1
 8003440:	4620      	mov	r0, r4
 8003442:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003446:	f817 6b01 	ldrb.w	r6, [r7], #1
 800344a:	b91e      	cbnz	r6, 8003454 <__strtok_r+0x20>
 800344c:	b965      	cbnz	r5, 8003468 <__strtok_r+0x34>
 800344e:	6015      	str	r5, [r2, #0]
 8003450:	2000      	movs	r0, #0
 8003452:	e005      	b.n	8003460 <__strtok_r+0x2c>
 8003454:	42b5      	cmp	r5, r6
 8003456:	d1f6      	bne.n	8003446 <__strtok_r+0x12>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <__strtok_r+0xa>
 800345c:	6014      	str	r4, [r2, #0]
 800345e:	7003      	strb	r3, [r0, #0]
 8003460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003462:	461c      	mov	r4, r3
 8003464:	e00c      	b.n	8003480 <__strtok_r+0x4c>
 8003466:	b915      	cbnz	r5, 800346e <__strtok_r+0x3a>
 8003468:	460e      	mov	r6, r1
 800346a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800346e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003472:	42ab      	cmp	r3, r5
 8003474:	d1f7      	bne.n	8003466 <__strtok_r+0x32>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f3      	beq.n	8003462 <__strtok_r+0x2e>
 800347a:	2300      	movs	r3, #0
 800347c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003480:	6014      	str	r4, [r2, #0]
 8003482:	e7ed      	b.n	8003460 <__strtok_r+0x2c>

08003484 <_close_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	2300      	movs	r3, #0
 8003488:	4d05      	ldr	r5, [pc, #20]	@ (80034a0 <_close_r+0x1c>)
 800348a:	4604      	mov	r4, r0
 800348c:	4608      	mov	r0, r1
 800348e:	602b      	str	r3, [r5, #0]
 8003490:	f7fd fe7d 	bl	800118e <_close>
 8003494:	1c43      	adds	r3, r0, #1
 8003496:	d102      	bne.n	800349e <_close_r+0x1a>
 8003498:	682b      	ldr	r3, [r5, #0]
 800349a:	b103      	cbz	r3, 800349e <_close_r+0x1a>
 800349c:	6023      	str	r3, [r4, #0]
 800349e:	bd38      	pop	{r3, r4, r5, pc}
 80034a0:	200004d4 	.word	0x200004d4

080034a4 <_lseek_r>:
 80034a4:	b538      	push	{r3, r4, r5, lr}
 80034a6:	4604      	mov	r4, r0
 80034a8:	4608      	mov	r0, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	2200      	movs	r2, #0
 80034ae:	4d05      	ldr	r5, [pc, #20]	@ (80034c4 <_lseek_r+0x20>)
 80034b0:	602a      	str	r2, [r5, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	f7fd fe8f 	bl	80011d6 <_lseek>
 80034b8:	1c43      	adds	r3, r0, #1
 80034ba:	d102      	bne.n	80034c2 <_lseek_r+0x1e>
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	b103      	cbz	r3, 80034c2 <_lseek_r+0x1e>
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	200004d4 	.word	0x200004d4

080034c8 <_read_r>:
 80034c8:	b538      	push	{r3, r4, r5, lr}
 80034ca:	4604      	mov	r4, r0
 80034cc:	4608      	mov	r0, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	2200      	movs	r2, #0
 80034d2:	4d05      	ldr	r5, [pc, #20]	@ (80034e8 <_read_r+0x20>)
 80034d4:	602a      	str	r2, [r5, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f7fd fe20 	bl	800111c <_read>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d102      	bne.n	80034e6 <_read_r+0x1e>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b103      	cbz	r3, 80034e6 <_read_r+0x1e>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	200004d4 	.word	0x200004d4

080034ec <_write_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4604      	mov	r4, r0
 80034f0:	4608      	mov	r0, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	2200      	movs	r2, #0
 80034f6:	4d05      	ldr	r5, [pc, #20]	@ (800350c <_write_r+0x20>)
 80034f8:	602a      	str	r2, [r5, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f7fd fe2b 	bl	8001156 <_write>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d102      	bne.n	800350a <_write_r+0x1e>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b103      	cbz	r3, 800350a <_write_r+0x1e>
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	200004d4 	.word	0x200004d4

08003510 <__errno>:
 8003510:	4b01      	ldr	r3, [pc, #4]	@ (8003518 <__errno+0x8>)
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000184 	.word	0x20000184

0800351c <__libc_init_array>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	2600      	movs	r6, #0
 8003520:	4d0c      	ldr	r5, [pc, #48]	@ (8003554 <__libc_init_array+0x38>)
 8003522:	4c0d      	ldr	r4, [pc, #52]	@ (8003558 <__libc_init_array+0x3c>)
 8003524:	1b64      	subs	r4, r4, r5
 8003526:	10a4      	asrs	r4, r4, #2
 8003528:	42a6      	cmp	r6, r4
 800352a:	d109      	bne.n	8003540 <__libc_init_array+0x24>
 800352c:	f001 fe6e 	bl	800520c <_init>
 8003530:	2600      	movs	r6, #0
 8003532:	4d0a      	ldr	r5, [pc, #40]	@ (800355c <__libc_init_array+0x40>)
 8003534:	4c0a      	ldr	r4, [pc, #40]	@ (8003560 <__libc_init_array+0x44>)
 8003536:	1b64      	subs	r4, r4, r5
 8003538:	10a4      	asrs	r4, r4, #2
 800353a:	42a6      	cmp	r6, r4
 800353c:	d105      	bne.n	800354a <__libc_init_array+0x2e>
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	f855 3b04 	ldr.w	r3, [r5], #4
 8003544:	4798      	blx	r3
 8003546:	3601      	adds	r6, #1
 8003548:	e7ee      	b.n	8003528 <__libc_init_array+0xc>
 800354a:	f855 3b04 	ldr.w	r3, [r5], #4
 800354e:	4798      	blx	r3
 8003550:	3601      	adds	r6, #1
 8003552:	e7f2      	b.n	800353a <__libc_init_array+0x1e>
 8003554:	0800566c 	.word	0x0800566c
 8003558:	0800566c 	.word	0x0800566c
 800355c:	0800566c 	.word	0x0800566c
 8003560:	08005670 	.word	0x08005670

08003564 <__retarget_lock_init_recursive>:
 8003564:	4770      	bx	lr

08003566 <__retarget_lock_acquire_recursive>:
 8003566:	4770      	bx	lr

08003568 <__retarget_lock_release_recursive>:
 8003568:	4770      	bx	lr

0800356a <memcpy>:
 800356a:	440a      	add	r2, r1
 800356c:	4291      	cmp	r1, r2
 800356e:	f100 33ff 	add.w	r3, r0, #4294967295
 8003572:	d100      	bne.n	8003576 <memcpy+0xc>
 8003574:	4770      	bx	lr
 8003576:	b510      	push	{r4, lr}
 8003578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800357c:	4291      	cmp	r1, r2
 800357e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003582:	d1f9      	bne.n	8003578 <memcpy+0xe>
 8003584:	bd10      	pop	{r4, pc}
	...

08003588 <nan>:
 8003588:	2000      	movs	r0, #0
 800358a:	4901      	ldr	r1, [pc, #4]	@ (8003590 <nan+0x8>)
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	7ff80000 	.word	0x7ff80000

08003594 <__assert_func>:
 8003594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003596:	4614      	mov	r4, r2
 8003598:	461a      	mov	r2, r3
 800359a:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <__assert_func+0x2c>)
 800359c:	4605      	mov	r5, r0
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68d8      	ldr	r0, [r3, #12]
 80035a2:	b954      	cbnz	r4, 80035ba <__assert_func+0x26>
 80035a4:	4b07      	ldr	r3, [pc, #28]	@ (80035c4 <__assert_func+0x30>)
 80035a6:	461c      	mov	r4, r3
 80035a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80035ac:	9100      	str	r1, [sp, #0]
 80035ae:	462b      	mov	r3, r5
 80035b0:	4905      	ldr	r1, [pc, #20]	@ (80035c8 <__assert_func+0x34>)
 80035b2:	f001 f9b3 	bl	800491c <fiprintf>
 80035b6:	f001 f9d3 	bl	8004960 <abort>
 80035ba:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <__assert_func+0x38>)
 80035bc:	e7f4      	b.n	80035a8 <__assert_func+0x14>
 80035be:	bf00      	nop
 80035c0:	20000184 	.word	0x20000184
 80035c4:	0800546d 	.word	0x0800546d
 80035c8:	0800543f 	.word	0x0800543f
 80035cc:	08005432 	.word	0x08005432

080035d0 <_free_r>:
 80035d0:	b538      	push	{r3, r4, r5, lr}
 80035d2:	4605      	mov	r5, r0
 80035d4:	2900      	cmp	r1, #0
 80035d6:	d040      	beq.n	800365a <_free_r+0x8a>
 80035d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035dc:	1f0c      	subs	r4, r1, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	bfb8      	it	lt
 80035e2:	18e4      	addlt	r4, r4, r3
 80035e4:	f000 fc32 	bl	8003e4c <__malloc_lock>
 80035e8:	4a1c      	ldr	r2, [pc, #112]	@ (800365c <_free_r+0x8c>)
 80035ea:	6813      	ldr	r3, [r2, #0]
 80035ec:	b933      	cbnz	r3, 80035fc <_free_r+0x2c>
 80035ee:	6063      	str	r3, [r4, #4]
 80035f0:	6014      	str	r4, [r2, #0]
 80035f2:	4628      	mov	r0, r5
 80035f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035f8:	f000 bc2e 	b.w	8003e58 <__malloc_unlock>
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	d908      	bls.n	8003612 <_free_r+0x42>
 8003600:	6820      	ldr	r0, [r4, #0]
 8003602:	1821      	adds	r1, r4, r0
 8003604:	428b      	cmp	r3, r1
 8003606:	bf01      	itttt	eq
 8003608:	6819      	ldreq	r1, [r3, #0]
 800360a:	685b      	ldreq	r3, [r3, #4]
 800360c:	1809      	addeq	r1, r1, r0
 800360e:	6021      	streq	r1, [r4, #0]
 8003610:	e7ed      	b.n	80035ee <_free_r+0x1e>
 8003612:	461a      	mov	r2, r3
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	b10b      	cbz	r3, 800361c <_free_r+0x4c>
 8003618:	42a3      	cmp	r3, r4
 800361a:	d9fa      	bls.n	8003612 <_free_r+0x42>
 800361c:	6811      	ldr	r1, [r2, #0]
 800361e:	1850      	adds	r0, r2, r1
 8003620:	42a0      	cmp	r0, r4
 8003622:	d10b      	bne.n	800363c <_free_r+0x6c>
 8003624:	6820      	ldr	r0, [r4, #0]
 8003626:	4401      	add	r1, r0
 8003628:	1850      	adds	r0, r2, r1
 800362a:	4283      	cmp	r3, r0
 800362c:	6011      	str	r1, [r2, #0]
 800362e:	d1e0      	bne.n	80035f2 <_free_r+0x22>
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4408      	add	r0, r1
 8003636:	6010      	str	r0, [r2, #0]
 8003638:	6053      	str	r3, [r2, #4]
 800363a:	e7da      	b.n	80035f2 <_free_r+0x22>
 800363c:	d902      	bls.n	8003644 <_free_r+0x74>
 800363e:	230c      	movs	r3, #12
 8003640:	602b      	str	r3, [r5, #0]
 8003642:	e7d6      	b.n	80035f2 <_free_r+0x22>
 8003644:	6820      	ldr	r0, [r4, #0]
 8003646:	1821      	adds	r1, r4, r0
 8003648:	428b      	cmp	r3, r1
 800364a:	bf01      	itttt	eq
 800364c:	6819      	ldreq	r1, [r3, #0]
 800364e:	685b      	ldreq	r3, [r3, #4]
 8003650:	1809      	addeq	r1, r1, r0
 8003652:	6021      	streq	r1, [r4, #0]
 8003654:	6063      	str	r3, [r4, #4]
 8003656:	6054      	str	r4, [r2, #4]
 8003658:	e7cb      	b.n	80035f2 <_free_r+0x22>
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	200004e0 	.word	0x200004e0

08003660 <rshift>:
 8003660:	6903      	ldr	r3, [r0, #16]
 8003662:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003666:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800366a:	f100 0414 	add.w	r4, r0, #20
 800366e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8003672:	dd46      	ble.n	8003702 <rshift+0xa2>
 8003674:	f011 011f 	ands.w	r1, r1, #31
 8003678:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800367c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8003680:	d10c      	bne.n	800369c <rshift+0x3c>
 8003682:	4629      	mov	r1, r5
 8003684:	f100 0710 	add.w	r7, r0, #16
 8003688:	42b1      	cmp	r1, r6
 800368a:	d335      	bcc.n	80036f8 <rshift+0x98>
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	1eea      	subs	r2, r5, #3
 8003692:	4296      	cmp	r6, r2
 8003694:	bf38      	it	cc
 8003696:	2300      	movcc	r3, #0
 8003698:	4423      	add	r3, r4
 800369a:	e015      	b.n	80036c8 <rshift+0x68>
 800369c:	46a1      	mov	r9, r4
 800369e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80036a2:	f1c1 0820 	rsb	r8, r1, #32
 80036a6:	40cf      	lsrs	r7, r1
 80036a8:	f105 0e04 	add.w	lr, r5, #4
 80036ac:	4576      	cmp	r6, lr
 80036ae:	46f4      	mov	ip, lr
 80036b0:	d816      	bhi.n	80036e0 <rshift+0x80>
 80036b2:	1a9a      	subs	r2, r3, r2
 80036b4:	0092      	lsls	r2, r2, #2
 80036b6:	3a04      	subs	r2, #4
 80036b8:	3501      	adds	r5, #1
 80036ba:	42ae      	cmp	r6, r5
 80036bc:	bf38      	it	cc
 80036be:	2200      	movcc	r2, #0
 80036c0:	18a3      	adds	r3, r4, r2
 80036c2:	50a7      	str	r7, [r4, r2]
 80036c4:	b107      	cbz	r7, 80036c8 <rshift+0x68>
 80036c6:	3304      	adds	r3, #4
 80036c8:	42a3      	cmp	r3, r4
 80036ca:	eba3 0204 	sub.w	r2, r3, r4
 80036ce:	bf08      	it	eq
 80036d0:	2300      	moveq	r3, #0
 80036d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80036d6:	6102      	str	r2, [r0, #16]
 80036d8:	bf08      	it	eq
 80036da:	6143      	streq	r3, [r0, #20]
 80036dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036e0:	f8dc c000 	ldr.w	ip, [ip]
 80036e4:	fa0c fc08 	lsl.w	ip, ip, r8
 80036e8:	ea4c 0707 	orr.w	r7, ip, r7
 80036ec:	f849 7b04 	str.w	r7, [r9], #4
 80036f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80036f4:	40cf      	lsrs	r7, r1
 80036f6:	e7d9      	b.n	80036ac <rshift+0x4c>
 80036f8:	f851 cb04 	ldr.w	ip, [r1], #4
 80036fc:	f847 cf04 	str.w	ip, [r7, #4]!
 8003700:	e7c2      	b.n	8003688 <rshift+0x28>
 8003702:	4623      	mov	r3, r4
 8003704:	e7e0      	b.n	80036c8 <rshift+0x68>

08003706 <__hexdig_fun>:
 8003706:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800370a:	2b09      	cmp	r3, #9
 800370c:	d802      	bhi.n	8003714 <__hexdig_fun+0xe>
 800370e:	3820      	subs	r0, #32
 8003710:	b2c0      	uxtb	r0, r0
 8003712:	4770      	bx	lr
 8003714:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8003718:	2b05      	cmp	r3, #5
 800371a:	d801      	bhi.n	8003720 <__hexdig_fun+0x1a>
 800371c:	3847      	subs	r0, #71	@ 0x47
 800371e:	e7f7      	b.n	8003710 <__hexdig_fun+0xa>
 8003720:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8003724:	2b05      	cmp	r3, #5
 8003726:	d801      	bhi.n	800372c <__hexdig_fun+0x26>
 8003728:	3827      	subs	r0, #39	@ 0x27
 800372a:	e7f1      	b.n	8003710 <__hexdig_fun+0xa>
 800372c:	2000      	movs	r0, #0
 800372e:	4770      	bx	lr

08003730 <__gethex>:
 8003730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003734:	468a      	mov	sl, r1
 8003736:	4690      	mov	r8, r2
 8003738:	b085      	sub	sp, #20
 800373a:	9302      	str	r3, [sp, #8]
 800373c:	680b      	ldr	r3, [r1, #0]
 800373e:	9001      	str	r0, [sp, #4]
 8003740:	1c9c      	adds	r4, r3, #2
 8003742:	46a1      	mov	r9, r4
 8003744:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003748:	2830      	cmp	r0, #48	@ 0x30
 800374a:	d0fa      	beq.n	8003742 <__gethex+0x12>
 800374c:	eba9 0303 	sub.w	r3, r9, r3
 8003750:	f1a3 0b02 	sub.w	fp, r3, #2
 8003754:	f7ff ffd7 	bl	8003706 <__hexdig_fun>
 8003758:	4605      	mov	r5, r0
 800375a:	2800      	cmp	r0, #0
 800375c:	d168      	bne.n	8003830 <__gethex+0x100>
 800375e:	2201      	movs	r2, #1
 8003760:	4648      	mov	r0, r9
 8003762:	499f      	ldr	r1, [pc, #636]	@ (80039e0 <__gethex+0x2b0>)
 8003764:	f7ff fe0d 	bl	8003382 <strncmp>
 8003768:	4607      	mov	r7, r0
 800376a:	2800      	cmp	r0, #0
 800376c:	d167      	bne.n	800383e <__gethex+0x10e>
 800376e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8003772:	4626      	mov	r6, r4
 8003774:	f7ff ffc7 	bl	8003706 <__hexdig_fun>
 8003778:	2800      	cmp	r0, #0
 800377a:	d062      	beq.n	8003842 <__gethex+0x112>
 800377c:	4623      	mov	r3, r4
 800377e:	7818      	ldrb	r0, [r3, #0]
 8003780:	4699      	mov	r9, r3
 8003782:	2830      	cmp	r0, #48	@ 0x30
 8003784:	f103 0301 	add.w	r3, r3, #1
 8003788:	d0f9      	beq.n	800377e <__gethex+0x4e>
 800378a:	f7ff ffbc 	bl	8003706 <__hexdig_fun>
 800378e:	fab0 f580 	clz	r5, r0
 8003792:	f04f 0b01 	mov.w	fp, #1
 8003796:	096d      	lsrs	r5, r5, #5
 8003798:	464a      	mov	r2, r9
 800379a:	4616      	mov	r6, r2
 800379c:	7830      	ldrb	r0, [r6, #0]
 800379e:	3201      	adds	r2, #1
 80037a0:	f7ff ffb1 	bl	8003706 <__hexdig_fun>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d1f8      	bne.n	800379a <__gethex+0x6a>
 80037a8:	2201      	movs	r2, #1
 80037aa:	4630      	mov	r0, r6
 80037ac:	498c      	ldr	r1, [pc, #560]	@ (80039e0 <__gethex+0x2b0>)
 80037ae:	f7ff fde8 	bl	8003382 <strncmp>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d13f      	bne.n	8003836 <__gethex+0x106>
 80037b6:	b944      	cbnz	r4, 80037ca <__gethex+0x9a>
 80037b8:	1c74      	adds	r4, r6, #1
 80037ba:	4622      	mov	r2, r4
 80037bc:	4616      	mov	r6, r2
 80037be:	7830      	ldrb	r0, [r6, #0]
 80037c0:	3201      	adds	r2, #1
 80037c2:	f7ff ffa0 	bl	8003706 <__hexdig_fun>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d1f8      	bne.n	80037bc <__gethex+0x8c>
 80037ca:	1ba4      	subs	r4, r4, r6
 80037cc:	00a7      	lsls	r7, r4, #2
 80037ce:	7833      	ldrb	r3, [r6, #0]
 80037d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80037d4:	2b50      	cmp	r3, #80	@ 0x50
 80037d6:	d13e      	bne.n	8003856 <__gethex+0x126>
 80037d8:	7873      	ldrb	r3, [r6, #1]
 80037da:	2b2b      	cmp	r3, #43	@ 0x2b
 80037dc:	d033      	beq.n	8003846 <__gethex+0x116>
 80037de:	2b2d      	cmp	r3, #45	@ 0x2d
 80037e0:	d034      	beq.n	800384c <__gethex+0x11c>
 80037e2:	2400      	movs	r4, #0
 80037e4:	1c71      	adds	r1, r6, #1
 80037e6:	7808      	ldrb	r0, [r1, #0]
 80037e8:	f7ff ff8d 	bl	8003706 <__hexdig_fun>
 80037ec:	1e43      	subs	r3, r0, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b18      	cmp	r3, #24
 80037f2:	d830      	bhi.n	8003856 <__gethex+0x126>
 80037f4:	f1a0 0210 	sub.w	r2, r0, #16
 80037f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80037fc:	f7ff ff83 	bl	8003706 <__hexdig_fun>
 8003800:	f100 3cff 	add.w	ip, r0, #4294967295
 8003804:	fa5f fc8c 	uxtb.w	ip, ip
 8003808:	f1bc 0f18 	cmp.w	ip, #24
 800380c:	f04f 030a 	mov.w	r3, #10
 8003810:	d91e      	bls.n	8003850 <__gethex+0x120>
 8003812:	b104      	cbz	r4, 8003816 <__gethex+0xe6>
 8003814:	4252      	negs	r2, r2
 8003816:	4417      	add	r7, r2
 8003818:	f8ca 1000 	str.w	r1, [sl]
 800381c:	b1ed      	cbz	r5, 800385a <__gethex+0x12a>
 800381e:	f1bb 0f00 	cmp.w	fp, #0
 8003822:	bf0c      	ite	eq
 8003824:	2506      	moveq	r5, #6
 8003826:	2500      	movne	r5, #0
 8003828:	4628      	mov	r0, r5
 800382a:	b005      	add	sp, #20
 800382c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003830:	2500      	movs	r5, #0
 8003832:	462c      	mov	r4, r5
 8003834:	e7b0      	b.n	8003798 <__gethex+0x68>
 8003836:	2c00      	cmp	r4, #0
 8003838:	d1c7      	bne.n	80037ca <__gethex+0x9a>
 800383a:	4627      	mov	r7, r4
 800383c:	e7c7      	b.n	80037ce <__gethex+0x9e>
 800383e:	464e      	mov	r6, r9
 8003840:	462f      	mov	r7, r5
 8003842:	2501      	movs	r5, #1
 8003844:	e7c3      	b.n	80037ce <__gethex+0x9e>
 8003846:	2400      	movs	r4, #0
 8003848:	1cb1      	adds	r1, r6, #2
 800384a:	e7cc      	b.n	80037e6 <__gethex+0xb6>
 800384c:	2401      	movs	r4, #1
 800384e:	e7fb      	b.n	8003848 <__gethex+0x118>
 8003850:	fb03 0002 	mla	r0, r3, r2, r0
 8003854:	e7ce      	b.n	80037f4 <__gethex+0xc4>
 8003856:	4631      	mov	r1, r6
 8003858:	e7de      	b.n	8003818 <__gethex+0xe8>
 800385a:	4629      	mov	r1, r5
 800385c:	eba6 0309 	sub.w	r3, r6, r9
 8003860:	3b01      	subs	r3, #1
 8003862:	2b07      	cmp	r3, #7
 8003864:	dc0a      	bgt.n	800387c <__gethex+0x14c>
 8003866:	9801      	ldr	r0, [sp, #4]
 8003868:	f000 fafc 	bl	8003e64 <_Balloc>
 800386c:	4604      	mov	r4, r0
 800386e:	b940      	cbnz	r0, 8003882 <__gethex+0x152>
 8003870:	4602      	mov	r2, r0
 8003872:	21e4      	movs	r1, #228	@ 0xe4
 8003874:	4b5b      	ldr	r3, [pc, #364]	@ (80039e4 <__gethex+0x2b4>)
 8003876:	485c      	ldr	r0, [pc, #368]	@ (80039e8 <__gethex+0x2b8>)
 8003878:	f7ff fe8c 	bl	8003594 <__assert_func>
 800387c:	3101      	adds	r1, #1
 800387e:	105b      	asrs	r3, r3, #1
 8003880:	e7ef      	b.n	8003862 <__gethex+0x132>
 8003882:	2300      	movs	r3, #0
 8003884:	f100 0a14 	add.w	sl, r0, #20
 8003888:	4655      	mov	r5, sl
 800388a:	469b      	mov	fp, r3
 800388c:	45b1      	cmp	r9, r6
 800388e:	d337      	bcc.n	8003900 <__gethex+0x1d0>
 8003890:	f845 bb04 	str.w	fp, [r5], #4
 8003894:	eba5 050a 	sub.w	r5, r5, sl
 8003898:	10ad      	asrs	r5, r5, #2
 800389a:	6125      	str	r5, [r4, #16]
 800389c:	4658      	mov	r0, fp
 800389e:	f000 fbd3 	bl	8004048 <__hi0bits>
 80038a2:	016d      	lsls	r5, r5, #5
 80038a4:	f8d8 6000 	ldr.w	r6, [r8]
 80038a8:	1a2d      	subs	r5, r5, r0
 80038aa:	42b5      	cmp	r5, r6
 80038ac:	dd54      	ble.n	8003958 <__gethex+0x228>
 80038ae:	1bad      	subs	r5, r5, r6
 80038b0:	4629      	mov	r1, r5
 80038b2:	4620      	mov	r0, r4
 80038b4:	f000 ff5b 	bl	800476e <__any_on>
 80038b8:	4681      	mov	r9, r0
 80038ba:	b178      	cbz	r0, 80038dc <__gethex+0x1ac>
 80038bc:	f04f 0901 	mov.w	r9, #1
 80038c0:	1e6b      	subs	r3, r5, #1
 80038c2:	1159      	asrs	r1, r3, #5
 80038c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80038c8:	f003 021f 	and.w	r2, r3, #31
 80038cc:	fa09 f202 	lsl.w	r2, r9, r2
 80038d0:	420a      	tst	r2, r1
 80038d2:	d003      	beq.n	80038dc <__gethex+0x1ac>
 80038d4:	454b      	cmp	r3, r9
 80038d6:	dc36      	bgt.n	8003946 <__gethex+0x216>
 80038d8:	f04f 0902 	mov.w	r9, #2
 80038dc:	4629      	mov	r1, r5
 80038de:	4620      	mov	r0, r4
 80038e0:	f7ff febe 	bl	8003660 <rshift>
 80038e4:	442f      	add	r7, r5
 80038e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80038ea:	42bb      	cmp	r3, r7
 80038ec:	da42      	bge.n	8003974 <__gethex+0x244>
 80038ee:	4621      	mov	r1, r4
 80038f0:	9801      	ldr	r0, [sp, #4]
 80038f2:	f000 faf7 	bl	8003ee4 <_Bfree>
 80038f6:	2300      	movs	r3, #0
 80038f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80038fa:	25a3      	movs	r5, #163	@ 0xa3
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e793      	b.n	8003828 <__gethex+0xf8>
 8003900:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8003904:	2a2e      	cmp	r2, #46	@ 0x2e
 8003906:	d012      	beq.n	800392e <__gethex+0x1fe>
 8003908:	2b20      	cmp	r3, #32
 800390a:	d104      	bne.n	8003916 <__gethex+0x1e6>
 800390c:	f845 bb04 	str.w	fp, [r5], #4
 8003910:	f04f 0b00 	mov.w	fp, #0
 8003914:	465b      	mov	r3, fp
 8003916:	7830      	ldrb	r0, [r6, #0]
 8003918:	9303      	str	r3, [sp, #12]
 800391a:	f7ff fef4 	bl	8003706 <__hexdig_fun>
 800391e:	9b03      	ldr	r3, [sp, #12]
 8003920:	f000 000f 	and.w	r0, r0, #15
 8003924:	4098      	lsls	r0, r3
 8003926:	ea4b 0b00 	orr.w	fp, fp, r0
 800392a:	3304      	adds	r3, #4
 800392c:	e7ae      	b.n	800388c <__gethex+0x15c>
 800392e:	45b1      	cmp	r9, r6
 8003930:	d8ea      	bhi.n	8003908 <__gethex+0x1d8>
 8003932:	2201      	movs	r2, #1
 8003934:	4630      	mov	r0, r6
 8003936:	492a      	ldr	r1, [pc, #168]	@ (80039e0 <__gethex+0x2b0>)
 8003938:	9303      	str	r3, [sp, #12]
 800393a:	f7ff fd22 	bl	8003382 <strncmp>
 800393e:	9b03      	ldr	r3, [sp, #12]
 8003940:	2800      	cmp	r0, #0
 8003942:	d1e1      	bne.n	8003908 <__gethex+0x1d8>
 8003944:	e7a2      	b.n	800388c <__gethex+0x15c>
 8003946:	4620      	mov	r0, r4
 8003948:	1ea9      	subs	r1, r5, #2
 800394a:	f000 ff10 	bl	800476e <__any_on>
 800394e:	2800      	cmp	r0, #0
 8003950:	d0c2      	beq.n	80038d8 <__gethex+0x1a8>
 8003952:	f04f 0903 	mov.w	r9, #3
 8003956:	e7c1      	b.n	80038dc <__gethex+0x1ac>
 8003958:	da09      	bge.n	800396e <__gethex+0x23e>
 800395a:	1b75      	subs	r5, r6, r5
 800395c:	4621      	mov	r1, r4
 800395e:	462a      	mov	r2, r5
 8003960:	9801      	ldr	r0, [sp, #4]
 8003962:	f000 fcd5 	bl	8004310 <__lshift>
 8003966:	4604      	mov	r4, r0
 8003968:	1b7f      	subs	r7, r7, r5
 800396a:	f100 0a14 	add.w	sl, r0, #20
 800396e:	f04f 0900 	mov.w	r9, #0
 8003972:	e7b8      	b.n	80038e6 <__gethex+0x1b6>
 8003974:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8003978:	42bd      	cmp	r5, r7
 800397a:	dd6f      	ble.n	8003a5c <__gethex+0x32c>
 800397c:	1bed      	subs	r5, r5, r7
 800397e:	42ae      	cmp	r6, r5
 8003980:	dc34      	bgt.n	80039ec <__gethex+0x2bc>
 8003982:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d022      	beq.n	80039d0 <__gethex+0x2a0>
 800398a:	2b03      	cmp	r3, #3
 800398c:	d024      	beq.n	80039d8 <__gethex+0x2a8>
 800398e:	2b01      	cmp	r3, #1
 8003990:	d115      	bne.n	80039be <__gethex+0x28e>
 8003992:	42ae      	cmp	r6, r5
 8003994:	d113      	bne.n	80039be <__gethex+0x28e>
 8003996:	2e01      	cmp	r6, #1
 8003998:	d10b      	bne.n	80039b2 <__gethex+0x282>
 800399a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800399e:	9a02      	ldr	r2, [sp, #8]
 80039a0:	2562      	movs	r5, #98	@ 0x62
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	2301      	movs	r3, #1
 80039a6:	6123      	str	r3, [r4, #16]
 80039a8:	f8ca 3000 	str.w	r3, [sl]
 80039ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80039ae:	601c      	str	r4, [r3, #0]
 80039b0:	e73a      	b.n	8003828 <__gethex+0xf8>
 80039b2:	4620      	mov	r0, r4
 80039b4:	1e71      	subs	r1, r6, #1
 80039b6:	f000 feda 	bl	800476e <__any_on>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d1ed      	bne.n	800399a <__gethex+0x26a>
 80039be:	4621      	mov	r1, r4
 80039c0:	9801      	ldr	r0, [sp, #4]
 80039c2:	f000 fa8f 	bl	8003ee4 <_Bfree>
 80039c6:	2300      	movs	r3, #0
 80039c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80039ca:	2550      	movs	r5, #80	@ 0x50
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e72b      	b.n	8003828 <__gethex+0xf8>
 80039d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f3      	bne.n	80039be <__gethex+0x28e>
 80039d6:	e7e0      	b.n	800399a <__gethex+0x26a>
 80039d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1dd      	bne.n	800399a <__gethex+0x26a>
 80039de:	e7ee      	b.n	80039be <__gethex+0x28e>
 80039e0:	08005256 	.word	0x08005256
 80039e4:	0800546e 	.word	0x0800546e
 80039e8:	0800547f 	.word	0x0800547f
 80039ec:	1e6f      	subs	r7, r5, #1
 80039ee:	f1b9 0f00 	cmp.w	r9, #0
 80039f2:	d130      	bne.n	8003a56 <__gethex+0x326>
 80039f4:	b127      	cbz	r7, 8003a00 <__gethex+0x2d0>
 80039f6:	4639      	mov	r1, r7
 80039f8:	4620      	mov	r0, r4
 80039fa:	f000 feb8 	bl	800476e <__any_on>
 80039fe:	4681      	mov	r9, r0
 8003a00:	2301      	movs	r3, #1
 8003a02:	4629      	mov	r1, r5
 8003a04:	1b76      	subs	r6, r6, r5
 8003a06:	2502      	movs	r5, #2
 8003a08:	117a      	asrs	r2, r7, #5
 8003a0a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8003a0e:	f007 071f 	and.w	r7, r7, #31
 8003a12:	40bb      	lsls	r3, r7
 8003a14:	4213      	tst	r3, r2
 8003a16:	4620      	mov	r0, r4
 8003a18:	bf18      	it	ne
 8003a1a:	f049 0902 	orrne.w	r9, r9, #2
 8003a1e:	f7ff fe1f 	bl	8003660 <rshift>
 8003a22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8003a26:	f1b9 0f00 	cmp.w	r9, #0
 8003a2a:	d047      	beq.n	8003abc <__gethex+0x38c>
 8003a2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d015      	beq.n	8003a60 <__gethex+0x330>
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d017      	beq.n	8003a68 <__gethex+0x338>
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d109      	bne.n	8003a50 <__gethex+0x320>
 8003a3c:	f019 0f02 	tst.w	r9, #2
 8003a40:	d006      	beq.n	8003a50 <__gethex+0x320>
 8003a42:	f8da 3000 	ldr.w	r3, [sl]
 8003a46:	ea49 0903 	orr.w	r9, r9, r3
 8003a4a:	f019 0f01 	tst.w	r9, #1
 8003a4e:	d10e      	bne.n	8003a6e <__gethex+0x33e>
 8003a50:	f045 0510 	orr.w	r5, r5, #16
 8003a54:	e032      	b.n	8003abc <__gethex+0x38c>
 8003a56:	f04f 0901 	mov.w	r9, #1
 8003a5a:	e7d1      	b.n	8003a00 <__gethex+0x2d0>
 8003a5c:	2501      	movs	r5, #1
 8003a5e:	e7e2      	b.n	8003a26 <__gethex+0x2f6>
 8003a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003a62:	f1c3 0301 	rsb	r3, r3, #1
 8003a66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <__gethex+0x320>
 8003a6e:	f04f 0c00 	mov.w	ip, #0
 8003a72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8003a76:	f104 0314 	add.w	r3, r4, #20
 8003a7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8003a7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a88:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003a8c:	d01b      	beq.n	8003ac6 <__gethex+0x396>
 8003a8e:	3201      	adds	r2, #1
 8003a90:	6002      	str	r2, [r0, #0]
 8003a92:	2d02      	cmp	r5, #2
 8003a94:	f104 0314 	add.w	r3, r4, #20
 8003a98:	d13c      	bne.n	8003b14 <__gethex+0x3e4>
 8003a9a:	f8d8 2000 	ldr.w	r2, [r8]
 8003a9e:	3a01      	subs	r2, #1
 8003aa0:	42b2      	cmp	r2, r6
 8003aa2:	d109      	bne.n	8003ab8 <__gethex+0x388>
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	1171      	asrs	r1, r6, #5
 8003aa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003aac:	f006 061f 	and.w	r6, r6, #31
 8003ab0:	fa02 f606 	lsl.w	r6, r2, r6
 8003ab4:	421e      	tst	r6, r3
 8003ab6:	d13a      	bne.n	8003b2e <__gethex+0x3fe>
 8003ab8:	f045 0520 	orr.w	r5, r5, #32
 8003abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003abe:	601c      	str	r4, [r3, #0]
 8003ac0:	9b02      	ldr	r3, [sp, #8]
 8003ac2:	601f      	str	r7, [r3, #0]
 8003ac4:	e6b0      	b.n	8003828 <__gethex+0xf8>
 8003ac6:	4299      	cmp	r1, r3
 8003ac8:	f843 cc04 	str.w	ip, [r3, #-4]
 8003acc:	d8d9      	bhi.n	8003a82 <__gethex+0x352>
 8003ace:	68a3      	ldr	r3, [r4, #8]
 8003ad0:	459b      	cmp	fp, r3
 8003ad2:	db17      	blt.n	8003b04 <__gethex+0x3d4>
 8003ad4:	6861      	ldr	r1, [r4, #4]
 8003ad6:	9801      	ldr	r0, [sp, #4]
 8003ad8:	3101      	adds	r1, #1
 8003ada:	f000 f9c3 	bl	8003e64 <_Balloc>
 8003ade:	4681      	mov	r9, r0
 8003ae0:	b918      	cbnz	r0, 8003aea <__gethex+0x3ba>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	2184      	movs	r1, #132	@ 0x84
 8003ae6:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <__gethex+0x41c>)
 8003ae8:	e6c5      	b.n	8003876 <__gethex+0x146>
 8003aea:	6922      	ldr	r2, [r4, #16]
 8003aec:	f104 010c 	add.w	r1, r4, #12
 8003af0:	3202      	adds	r2, #2
 8003af2:	0092      	lsls	r2, r2, #2
 8003af4:	300c      	adds	r0, #12
 8003af6:	f7ff fd38 	bl	800356a <memcpy>
 8003afa:	4621      	mov	r1, r4
 8003afc:	9801      	ldr	r0, [sp, #4]
 8003afe:	f000 f9f1 	bl	8003ee4 <_Bfree>
 8003b02:	464c      	mov	r4, r9
 8003b04:	6923      	ldr	r3, [r4, #16]
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	6122      	str	r2, [r4, #16]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003b10:	615a      	str	r2, [r3, #20]
 8003b12:	e7be      	b.n	8003a92 <__gethex+0x362>
 8003b14:	6922      	ldr	r2, [r4, #16]
 8003b16:	455a      	cmp	r2, fp
 8003b18:	dd0b      	ble.n	8003b32 <__gethex+0x402>
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff fd9f 	bl	8003660 <rshift>
 8003b22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003b26:	3701      	adds	r7, #1
 8003b28:	42bb      	cmp	r3, r7
 8003b2a:	f6ff aee0 	blt.w	80038ee <__gethex+0x1be>
 8003b2e:	2501      	movs	r5, #1
 8003b30:	e7c2      	b.n	8003ab8 <__gethex+0x388>
 8003b32:	f016 061f 	ands.w	r6, r6, #31
 8003b36:	d0fa      	beq.n	8003b2e <__gethex+0x3fe>
 8003b38:	4453      	add	r3, sl
 8003b3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8003b3e:	f000 fa83 	bl	8004048 <__hi0bits>
 8003b42:	f1c6 0620 	rsb	r6, r6, #32
 8003b46:	42b0      	cmp	r0, r6
 8003b48:	dbe7      	blt.n	8003b1a <__gethex+0x3ea>
 8003b4a:	e7f0      	b.n	8003b2e <__gethex+0x3fe>
 8003b4c:	0800546e 	.word	0x0800546e

08003b50 <L_shift>:
 8003b50:	f1c2 0208 	rsb	r2, r2, #8
 8003b54:	0092      	lsls	r2, r2, #2
 8003b56:	b570      	push	{r4, r5, r6, lr}
 8003b58:	f1c2 0620 	rsb	r6, r2, #32
 8003b5c:	6843      	ldr	r3, [r0, #4]
 8003b5e:	6804      	ldr	r4, [r0, #0]
 8003b60:	fa03 f506 	lsl.w	r5, r3, r6
 8003b64:	432c      	orrs	r4, r5
 8003b66:	40d3      	lsrs	r3, r2
 8003b68:	6004      	str	r4, [r0, #0]
 8003b6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8003b6e:	4288      	cmp	r0, r1
 8003b70:	d3f4      	bcc.n	8003b5c <L_shift+0xc>
 8003b72:	bd70      	pop	{r4, r5, r6, pc}

08003b74 <__match>:
 8003b74:	b530      	push	{r4, r5, lr}
 8003b76:	6803      	ldr	r3, [r0, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b7e:	b914      	cbnz	r4, 8003b86 <__match+0x12>
 8003b80:	6003      	str	r3, [r0, #0]
 8003b82:	2001      	movs	r0, #1
 8003b84:	bd30      	pop	{r4, r5, pc}
 8003b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b8a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8003b8e:	2d19      	cmp	r5, #25
 8003b90:	bf98      	it	ls
 8003b92:	3220      	addls	r2, #32
 8003b94:	42a2      	cmp	r2, r4
 8003b96:	d0f0      	beq.n	8003b7a <__match+0x6>
 8003b98:	2000      	movs	r0, #0
 8003b9a:	e7f3      	b.n	8003b84 <__match+0x10>

08003b9c <__hexnan>:
 8003b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba0:	2500      	movs	r5, #0
 8003ba2:	680b      	ldr	r3, [r1, #0]
 8003ba4:	4682      	mov	sl, r0
 8003ba6:	115e      	asrs	r6, r3, #5
 8003ba8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003bac:	f013 031f 	ands.w	r3, r3, #31
 8003bb0:	bf18      	it	ne
 8003bb2:	3604      	addne	r6, #4
 8003bb4:	1f37      	subs	r7, r6, #4
 8003bb6:	4690      	mov	r8, r2
 8003bb8:	46b9      	mov	r9, r7
 8003bba:	463c      	mov	r4, r7
 8003bbc:	46ab      	mov	fp, r5
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	6801      	ldr	r1, [r0, #0]
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	f846 5c04 	str.w	r5, [r6, #-4]
 8003bc8:	9502      	str	r5, [sp, #8]
 8003bca:	784a      	ldrb	r2, [r1, #1]
 8003bcc:	1c4b      	adds	r3, r1, #1
 8003bce:	9303      	str	r3, [sp, #12]
 8003bd0:	b342      	cbz	r2, 8003c24 <__hexnan+0x88>
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	9105      	str	r1, [sp, #20]
 8003bd6:	9204      	str	r2, [sp, #16]
 8003bd8:	f7ff fd95 	bl	8003706 <__hexdig_fun>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d151      	bne.n	8003c84 <__hexnan+0xe8>
 8003be0:	9a04      	ldr	r2, [sp, #16]
 8003be2:	9905      	ldr	r1, [sp, #20]
 8003be4:	2a20      	cmp	r2, #32
 8003be6:	d818      	bhi.n	8003c1a <__hexnan+0x7e>
 8003be8:	9b02      	ldr	r3, [sp, #8]
 8003bea:	459b      	cmp	fp, r3
 8003bec:	dd13      	ble.n	8003c16 <__hexnan+0x7a>
 8003bee:	454c      	cmp	r4, r9
 8003bf0:	d206      	bcs.n	8003c00 <__hexnan+0x64>
 8003bf2:	2d07      	cmp	r5, #7
 8003bf4:	dc04      	bgt.n	8003c00 <__hexnan+0x64>
 8003bf6:	462a      	mov	r2, r5
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7ff ffa8 	bl	8003b50 <L_shift>
 8003c00:	4544      	cmp	r4, r8
 8003c02:	d952      	bls.n	8003caa <__hexnan+0x10e>
 8003c04:	2300      	movs	r3, #0
 8003c06:	f1a4 0904 	sub.w	r9, r4, #4
 8003c0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8003c0e:	461d      	mov	r5, r3
 8003c10:	464c      	mov	r4, r9
 8003c12:	f8cd b008 	str.w	fp, [sp, #8]
 8003c16:	9903      	ldr	r1, [sp, #12]
 8003c18:	e7d7      	b.n	8003bca <__hexnan+0x2e>
 8003c1a:	2a29      	cmp	r2, #41	@ 0x29
 8003c1c:	d157      	bne.n	8003cce <__hexnan+0x132>
 8003c1e:	3102      	adds	r1, #2
 8003c20:	f8ca 1000 	str.w	r1, [sl]
 8003c24:	f1bb 0f00 	cmp.w	fp, #0
 8003c28:	d051      	beq.n	8003cce <__hexnan+0x132>
 8003c2a:	454c      	cmp	r4, r9
 8003c2c:	d206      	bcs.n	8003c3c <__hexnan+0xa0>
 8003c2e:	2d07      	cmp	r5, #7
 8003c30:	dc04      	bgt.n	8003c3c <__hexnan+0xa0>
 8003c32:	462a      	mov	r2, r5
 8003c34:	4649      	mov	r1, r9
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7ff ff8a 	bl	8003b50 <L_shift>
 8003c3c:	4544      	cmp	r4, r8
 8003c3e:	d936      	bls.n	8003cae <__hexnan+0x112>
 8003c40:	4623      	mov	r3, r4
 8003c42:	f1a8 0204 	sub.w	r2, r8, #4
 8003c46:	f853 1b04 	ldr.w	r1, [r3], #4
 8003c4a:	429f      	cmp	r7, r3
 8003c4c:	f842 1f04 	str.w	r1, [r2, #4]!
 8003c50:	d2f9      	bcs.n	8003c46 <__hexnan+0xaa>
 8003c52:	1b3b      	subs	r3, r7, r4
 8003c54:	f023 0303 	bic.w	r3, r3, #3
 8003c58:	3304      	adds	r3, #4
 8003c5a:	3401      	adds	r4, #1
 8003c5c:	3e03      	subs	r6, #3
 8003c5e:	42b4      	cmp	r4, r6
 8003c60:	bf88      	it	hi
 8003c62:	2304      	movhi	r3, #4
 8003c64:	2200      	movs	r2, #0
 8003c66:	4443      	add	r3, r8
 8003c68:	f843 2b04 	str.w	r2, [r3], #4
 8003c6c:	429f      	cmp	r7, r3
 8003c6e:	d2fb      	bcs.n	8003c68 <__hexnan+0xcc>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b91b      	cbnz	r3, 8003c7c <__hexnan+0xe0>
 8003c74:	4547      	cmp	r7, r8
 8003c76:	d128      	bne.n	8003cca <__hexnan+0x12e>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	2005      	movs	r0, #5
 8003c7e:	b007      	add	sp, #28
 8003c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c84:	3501      	adds	r5, #1
 8003c86:	2d08      	cmp	r5, #8
 8003c88:	f10b 0b01 	add.w	fp, fp, #1
 8003c8c:	dd06      	ble.n	8003c9c <__hexnan+0x100>
 8003c8e:	4544      	cmp	r4, r8
 8003c90:	d9c1      	bls.n	8003c16 <__hexnan+0x7a>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2501      	movs	r5, #1
 8003c96:	f844 3c04 	str.w	r3, [r4, #-4]
 8003c9a:	3c04      	subs	r4, #4
 8003c9c:	6822      	ldr	r2, [r4, #0]
 8003c9e:	f000 000f 	and.w	r0, r0, #15
 8003ca2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003ca6:	6020      	str	r0, [r4, #0]
 8003ca8:	e7b5      	b.n	8003c16 <__hexnan+0x7a>
 8003caa:	2508      	movs	r5, #8
 8003cac:	e7b3      	b.n	8003c16 <__hexnan+0x7a>
 8003cae:	9b01      	ldr	r3, [sp, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0dd      	beq.n	8003c70 <__hexnan+0xd4>
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	f1c3 0320 	rsb	r3, r3, #32
 8003cbc:	40da      	lsrs	r2, r3
 8003cbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	f846 3c04 	str.w	r3, [r6, #-4]
 8003cc8:	e7d2      	b.n	8003c70 <__hexnan+0xd4>
 8003cca:	3f04      	subs	r7, #4
 8003ccc:	e7d0      	b.n	8003c70 <__hexnan+0xd4>
 8003cce:	2004      	movs	r0, #4
 8003cd0:	e7d5      	b.n	8003c7e <__hexnan+0xe2>
	...

08003cd4 <malloc>:
 8003cd4:	4b02      	ldr	r3, [pc, #8]	@ (8003ce0 <malloc+0xc>)
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	f000 b825 	b.w	8003d28 <_malloc_r>
 8003cde:	bf00      	nop
 8003ce0:	20000184 	.word	0x20000184

08003ce4 <sbrk_aligned>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8003d24 <sbrk_aligned+0x40>)
 8003ce8:	460c      	mov	r4, r1
 8003cea:	6831      	ldr	r1, [r6, #0]
 8003cec:	4605      	mov	r5, r0
 8003cee:	b911      	cbnz	r1, 8003cf6 <sbrk_aligned+0x12>
 8003cf0:	f000 fe26 	bl	8004940 <_sbrk_r>
 8003cf4:	6030      	str	r0, [r6, #0]
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f000 fe21 	bl	8004940 <_sbrk_r>
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	d103      	bne.n	8003d0a <sbrk_aligned+0x26>
 8003d02:	f04f 34ff 	mov.w	r4, #4294967295
 8003d06:	4620      	mov	r0, r4
 8003d08:	bd70      	pop	{r4, r5, r6, pc}
 8003d0a:	1cc4      	adds	r4, r0, #3
 8003d0c:	f024 0403 	bic.w	r4, r4, #3
 8003d10:	42a0      	cmp	r0, r4
 8003d12:	d0f8      	beq.n	8003d06 <sbrk_aligned+0x22>
 8003d14:	1a21      	subs	r1, r4, r0
 8003d16:	4628      	mov	r0, r5
 8003d18:	f000 fe12 	bl	8004940 <_sbrk_r>
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d1f2      	bne.n	8003d06 <sbrk_aligned+0x22>
 8003d20:	e7ef      	b.n	8003d02 <sbrk_aligned+0x1e>
 8003d22:	bf00      	nop
 8003d24:	200004dc 	.word	0x200004dc

08003d28 <_malloc_r>:
 8003d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d2c:	1ccd      	adds	r5, r1, #3
 8003d2e:	f025 0503 	bic.w	r5, r5, #3
 8003d32:	3508      	adds	r5, #8
 8003d34:	2d0c      	cmp	r5, #12
 8003d36:	bf38      	it	cc
 8003d38:	250c      	movcc	r5, #12
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	db01      	blt.n	8003d44 <_malloc_r+0x1c>
 8003d40:	42a9      	cmp	r1, r5
 8003d42:	d904      	bls.n	8003d4e <_malloc_r+0x26>
 8003d44:	230c      	movs	r3, #12
 8003d46:	6033      	str	r3, [r6, #0]
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e24 <_malloc_r+0xfc>
 8003d52:	f000 f87b 	bl	8003e4c <__malloc_lock>
 8003d56:	f8d8 3000 	ldr.w	r3, [r8]
 8003d5a:	461c      	mov	r4, r3
 8003d5c:	bb44      	cbnz	r4, 8003db0 <_malloc_r+0x88>
 8003d5e:	4629      	mov	r1, r5
 8003d60:	4630      	mov	r0, r6
 8003d62:	f7ff ffbf 	bl	8003ce4 <sbrk_aligned>
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	4604      	mov	r4, r0
 8003d6a:	d158      	bne.n	8003e1e <_malloc_r+0xf6>
 8003d6c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d70:	4627      	mov	r7, r4
 8003d72:	2f00      	cmp	r7, #0
 8003d74:	d143      	bne.n	8003dfe <_malloc_r+0xd6>
 8003d76:	2c00      	cmp	r4, #0
 8003d78:	d04b      	beq.n	8003e12 <_malloc_r+0xea>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	4639      	mov	r1, r7
 8003d7e:	4630      	mov	r0, r6
 8003d80:	eb04 0903 	add.w	r9, r4, r3
 8003d84:	f000 fddc 	bl	8004940 <_sbrk_r>
 8003d88:	4581      	cmp	r9, r0
 8003d8a:	d142      	bne.n	8003e12 <_malloc_r+0xea>
 8003d8c:	6821      	ldr	r1, [r4, #0]
 8003d8e:	4630      	mov	r0, r6
 8003d90:	1a6d      	subs	r5, r5, r1
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7ff ffa6 	bl	8003ce4 <sbrk_aligned>
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d03a      	beq.n	8003e12 <_malloc_r+0xea>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	442b      	add	r3, r5
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	f8d8 3000 	ldr.w	r3, [r8]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	bb62      	cbnz	r2, 8003e04 <_malloc_r+0xdc>
 8003daa:	f8c8 7000 	str.w	r7, [r8]
 8003dae:	e00f      	b.n	8003dd0 <_malloc_r+0xa8>
 8003db0:	6822      	ldr	r2, [r4, #0]
 8003db2:	1b52      	subs	r2, r2, r5
 8003db4:	d420      	bmi.n	8003df8 <_malloc_r+0xd0>
 8003db6:	2a0b      	cmp	r2, #11
 8003db8:	d917      	bls.n	8003dea <_malloc_r+0xc2>
 8003dba:	1961      	adds	r1, r4, r5
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	6025      	str	r5, [r4, #0]
 8003dc0:	bf18      	it	ne
 8003dc2:	6059      	strne	r1, [r3, #4]
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	bf08      	it	eq
 8003dc8:	f8c8 1000 	streq.w	r1, [r8]
 8003dcc:	5162      	str	r2, [r4, r5]
 8003dce:	604b      	str	r3, [r1, #4]
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f000 f841 	bl	8003e58 <__malloc_unlock>
 8003dd6:	f104 000b 	add.w	r0, r4, #11
 8003dda:	1d23      	adds	r3, r4, #4
 8003ddc:	f020 0007 	bic.w	r0, r0, #7
 8003de0:	1ac2      	subs	r2, r0, r3
 8003de2:	bf1c      	itt	ne
 8003de4:	1a1b      	subne	r3, r3, r0
 8003de6:	50a3      	strne	r3, [r4, r2]
 8003de8:	e7af      	b.n	8003d4a <_malloc_r+0x22>
 8003dea:	6862      	ldr	r2, [r4, #4]
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	bf0c      	ite	eq
 8003df0:	f8c8 2000 	streq.w	r2, [r8]
 8003df4:	605a      	strne	r2, [r3, #4]
 8003df6:	e7eb      	b.n	8003dd0 <_malloc_r+0xa8>
 8003df8:	4623      	mov	r3, r4
 8003dfa:	6864      	ldr	r4, [r4, #4]
 8003dfc:	e7ae      	b.n	8003d5c <_malloc_r+0x34>
 8003dfe:	463c      	mov	r4, r7
 8003e00:	687f      	ldr	r7, [r7, #4]
 8003e02:	e7b6      	b.n	8003d72 <_malloc_r+0x4a>
 8003e04:	461a      	mov	r2, r3
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	d1fb      	bne.n	8003e04 <_malloc_r+0xdc>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	6053      	str	r3, [r2, #4]
 8003e10:	e7de      	b.n	8003dd0 <_malloc_r+0xa8>
 8003e12:	230c      	movs	r3, #12
 8003e14:	4630      	mov	r0, r6
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	f000 f81e 	bl	8003e58 <__malloc_unlock>
 8003e1c:	e794      	b.n	8003d48 <_malloc_r+0x20>
 8003e1e:	6005      	str	r5, [r0, #0]
 8003e20:	e7d6      	b.n	8003dd0 <_malloc_r+0xa8>
 8003e22:	bf00      	nop
 8003e24:	200004e0 	.word	0x200004e0

08003e28 <__ascii_mbtowc>:
 8003e28:	b082      	sub	sp, #8
 8003e2a:	b901      	cbnz	r1, 8003e2e <__ascii_mbtowc+0x6>
 8003e2c:	a901      	add	r1, sp, #4
 8003e2e:	b142      	cbz	r2, 8003e42 <__ascii_mbtowc+0x1a>
 8003e30:	b14b      	cbz	r3, 8003e46 <__ascii_mbtowc+0x1e>
 8003e32:	7813      	ldrb	r3, [r2, #0]
 8003e34:	600b      	str	r3, [r1, #0]
 8003e36:	7812      	ldrb	r2, [r2, #0]
 8003e38:	1e10      	subs	r0, r2, #0
 8003e3a:	bf18      	it	ne
 8003e3c:	2001      	movne	r0, #1
 8003e3e:	b002      	add	sp, #8
 8003e40:	4770      	bx	lr
 8003e42:	4610      	mov	r0, r2
 8003e44:	e7fb      	b.n	8003e3e <__ascii_mbtowc+0x16>
 8003e46:	f06f 0001 	mvn.w	r0, #1
 8003e4a:	e7f8      	b.n	8003e3e <__ascii_mbtowc+0x16>

08003e4c <__malloc_lock>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	@ (8003e54 <__malloc_lock+0x8>)
 8003e4e:	f7ff bb8a 	b.w	8003566 <__retarget_lock_acquire_recursive>
 8003e52:	bf00      	nop
 8003e54:	200004d8 	.word	0x200004d8

08003e58 <__malloc_unlock>:
 8003e58:	4801      	ldr	r0, [pc, #4]	@ (8003e60 <__malloc_unlock+0x8>)
 8003e5a:	f7ff bb85 	b.w	8003568 <__retarget_lock_release_recursive>
 8003e5e:	bf00      	nop
 8003e60:	200004d8 	.word	0x200004d8

08003e64 <_Balloc>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	69c6      	ldr	r6, [r0, #28]
 8003e68:	4604      	mov	r4, r0
 8003e6a:	460d      	mov	r5, r1
 8003e6c:	b976      	cbnz	r6, 8003e8c <_Balloc+0x28>
 8003e6e:	2010      	movs	r0, #16
 8003e70:	f7ff ff30 	bl	8003cd4 <malloc>
 8003e74:	4602      	mov	r2, r0
 8003e76:	61e0      	str	r0, [r4, #28]
 8003e78:	b920      	cbnz	r0, 8003e84 <_Balloc+0x20>
 8003e7a:	216b      	movs	r1, #107	@ 0x6b
 8003e7c:	4b17      	ldr	r3, [pc, #92]	@ (8003edc <_Balloc+0x78>)
 8003e7e:	4818      	ldr	r0, [pc, #96]	@ (8003ee0 <_Balloc+0x7c>)
 8003e80:	f7ff fb88 	bl	8003594 <__assert_func>
 8003e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003e88:	6006      	str	r6, [r0, #0]
 8003e8a:	60c6      	str	r6, [r0, #12]
 8003e8c:	69e6      	ldr	r6, [r4, #28]
 8003e8e:	68f3      	ldr	r3, [r6, #12]
 8003e90:	b183      	cbz	r3, 8003eb4 <_Balloc+0x50>
 8003e92:	69e3      	ldr	r3, [r4, #28]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003e9a:	b9b8      	cbnz	r0, 8003ecc <_Balloc+0x68>
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	fa01 f605 	lsl.w	r6, r1, r5
 8003ea2:	1d72      	adds	r2, r6, #5
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	0092      	lsls	r2, r2, #2
 8003ea8:	f000 fd61 	bl	800496e <_calloc_r>
 8003eac:	b160      	cbz	r0, 8003ec8 <_Balloc+0x64>
 8003eae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003eb2:	e00e      	b.n	8003ed2 <_Balloc+0x6e>
 8003eb4:	2221      	movs	r2, #33	@ 0x21
 8003eb6:	2104      	movs	r1, #4
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f000 fd58 	bl	800496e <_calloc_r>
 8003ebe:	69e3      	ldr	r3, [r4, #28]
 8003ec0:	60f0      	str	r0, [r6, #12]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e4      	bne.n	8003e92 <_Balloc+0x2e>
 8003ec8:	2000      	movs	r0, #0
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	6802      	ldr	r2, [r0, #0]
 8003ece:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003ed8:	e7f7      	b.n	8003eca <_Balloc+0x66>
 8003eda:	bf00      	nop
 8003edc:	080053b9 	.word	0x080053b9
 8003ee0:	080054df 	.word	0x080054df

08003ee4 <_Bfree>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	69c6      	ldr	r6, [r0, #28]
 8003ee8:	4605      	mov	r5, r0
 8003eea:	460c      	mov	r4, r1
 8003eec:	b976      	cbnz	r6, 8003f0c <_Bfree+0x28>
 8003eee:	2010      	movs	r0, #16
 8003ef0:	f7ff fef0 	bl	8003cd4 <malloc>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	61e8      	str	r0, [r5, #28]
 8003ef8:	b920      	cbnz	r0, 8003f04 <_Bfree+0x20>
 8003efa:	218f      	movs	r1, #143	@ 0x8f
 8003efc:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <_Bfree+0x3c>)
 8003efe:	4809      	ldr	r0, [pc, #36]	@ (8003f24 <_Bfree+0x40>)
 8003f00:	f7ff fb48 	bl	8003594 <__assert_func>
 8003f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003f08:	6006      	str	r6, [r0, #0]
 8003f0a:	60c6      	str	r6, [r0, #12]
 8003f0c:	b13c      	cbz	r4, 8003f1e <_Bfree+0x3a>
 8003f0e:	69eb      	ldr	r3, [r5, #28]
 8003f10:	6862      	ldr	r2, [r4, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f18:	6021      	str	r1, [r4, #0]
 8003f1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	080053b9 	.word	0x080053b9
 8003f24:	080054df 	.word	0x080054df

08003f28 <__multadd>:
 8003f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	461e      	mov	r6, r3
 8003f32:	2000      	movs	r0, #0
 8003f34:	690d      	ldr	r5, [r1, #16]
 8003f36:	f101 0c14 	add.w	ip, r1, #20
 8003f3a:	f8dc 3000 	ldr.w	r3, [ip]
 8003f3e:	3001      	adds	r0, #1
 8003f40:	b299      	uxth	r1, r3
 8003f42:	fb02 6101 	mla	r1, r2, r1, r6
 8003f46:	0c1e      	lsrs	r6, r3, #16
 8003f48:	0c0b      	lsrs	r3, r1, #16
 8003f4a:	fb02 3306 	mla	r3, r2, r6, r3
 8003f4e:	b289      	uxth	r1, r1
 8003f50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003f54:	4285      	cmp	r5, r0
 8003f56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003f5a:	f84c 1b04 	str.w	r1, [ip], #4
 8003f5e:	dcec      	bgt.n	8003f3a <__multadd+0x12>
 8003f60:	b30e      	cbz	r6, 8003fa6 <__multadd+0x7e>
 8003f62:	68a3      	ldr	r3, [r4, #8]
 8003f64:	42ab      	cmp	r3, r5
 8003f66:	dc19      	bgt.n	8003f9c <__multadd+0x74>
 8003f68:	6861      	ldr	r1, [r4, #4]
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	3101      	adds	r1, #1
 8003f6e:	f7ff ff79 	bl	8003e64 <_Balloc>
 8003f72:	4680      	mov	r8, r0
 8003f74:	b928      	cbnz	r0, 8003f82 <__multadd+0x5a>
 8003f76:	4602      	mov	r2, r0
 8003f78:	21ba      	movs	r1, #186	@ 0xba
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fac <__multadd+0x84>)
 8003f7c:	480c      	ldr	r0, [pc, #48]	@ (8003fb0 <__multadd+0x88>)
 8003f7e:	f7ff fb09 	bl	8003594 <__assert_func>
 8003f82:	6922      	ldr	r2, [r4, #16]
 8003f84:	f104 010c 	add.w	r1, r4, #12
 8003f88:	3202      	adds	r2, #2
 8003f8a:	0092      	lsls	r2, r2, #2
 8003f8c:	300c      	adds	r0, #12
 8003f8e:	f7ff faec 	bl	800356a <memcpy>
 8003f92:	4621      	mov	r1, r4
 8003f94:	4638      	mov	r0, r7
 8003f96:	f7ff ffa5 	bl	8003ee4 <_Bfree>
 8003f9a:	4644      	mov	r4, r8
 8003f9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003fa0:	3501      	adds	r5, #1
 8003fa2:	615e      	str	r6, [r3, #20]
 8003fa4:	6125      	str	r5, [r4, #16]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fac:	0800546e 	.word	0x0800546e
 8003fb0:	080054df 	.word	0x080054df

08003fb4 <__s2b>:
 8003fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb8:	4615      	mov	r5, r2
 8003fba:	2209      	movs	r2, #9
 8003fbc:	461f      	mov	r7, r3
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	2201      	movs	r2, #1
 8003fca:	2100      	movs	r1, #0
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	db09      	blt.n	8003fe4 <__s2b+0x30>
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f7ff ff47 	bl	8003e64 <_Balloc>
 8003fd6:	b940      	cbnz	r0, 8003fea <__s2b+0x36>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	21d3      	movs	r1, #211	@ 0xd3
 8003fdc:	4b18      	ldr	r3, [pc, #96]	@ (8004040 <__s2b+0x8c>)
 8003fde:	4819      	ldr	r0, [pc, #100]	@ (8004044 <__s2b+0x90>)
 8003fe0:	f7ff fad8 	bl	8003594 <__assert_func>
 8003fe4:	0052      	lsls	r2, r2, #1
 8003fe6:	3101      	adds	r1, #1
 8003fe8:	e7f0      	b.n	8003fcc <__s2b+0x18>
 8003fea:	9b08      	ldr	r3, [sp, #32]
 8003fec:	2d09      	cmp	r5, #9
 8003fee:	6143      	str	r3, [r0, #20]
 8003ff0:	f04f 0301 	mov.w	r3, #1
 8003ff4:	6103      	str	r3, [r0, #16]
 8003ff6:	dd16      	ble.n	8004026 <__s2b+0x72>
 8003ff8:	f104 0909 	add.w	r9, r4, #9
 8003ffc:	46c8      	mov	r8, r9
 8003ffe:	442c      	add	r4, r5
 8004000:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004004:	4601      	mov	r1, r0
 8004006:	220a      	movs	r2, #10
 8004008:	4630      	mov	r0, r6
 800400a:	3b30      	subs	r3, #48	@ 0x30
 800400c:	f7ff ff8c 	bl	8003f28 <__multadd>
 8004010:	45a0      	cmp	r8, r4
 8004012:	d1f5      	bne.n	8004000 <__s2b+0x4c>
 8004014:	f1a5 0408 	sub.w	r4, r5, #8
 8004018:	444c      	add	r4, r9
 800401a:	1b2d      	subs	r5, r5, r4
 800401c:	1963      	adds	r3, r4, r5
 800401e:	42bb      	cmp	r3, r7
 8004020:	db04      	blt.n	800402c <__s2b+0x78>
 8004022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004026:	2509      	movs	r5, #9
 8004028:	340a      	adds	r4, #10
 800402a:	e7f6      	b.n	800401a <__s2b+0x66>
 800402c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004030:	4601      	mov	r1, r0
 8004032:	220a      	movs	r2, #10
 8004034:	4630      	mov	r0, r6
 8004036:	3b30      	subs	r3, #48	@ 0x30
 8004038:	f7ff ff76 	bl	8003f28 <__multadd>
 800403c:	e7ee      	b.n	800401c <__s2b+0x68>
 800403e:	bf00      	nop
 8004040:	0800546e 	.word	0x0800546e
 8004044:	080054df 	.word	0x080054df

08004048 <__hi0bits>:
 8004048:	4603      	mov	r3, r0
 800404a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800404e:	bf3a      	itte	cc
 8004050:	0403      	lslcc	r3, r0, #16
 8004052:	2010      	movcc	r0, #16
 8004054:	2000      	movcs	r0, #0
 8004056:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800405a:	bf3c      	itt	cc
 800405c:	021b      	lslcc	r3, r3, #8
 800405e:	3008      	addcc	r0, #8
 8004060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004064:	bf3c      	itt	cc
 8004066:	011b      	lslcc	r3, r3, #4
 8004068:	3004      	addcc	r0, #4
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406e:	bf3c      	itt	cc
 8004070:	009b      	lslcc	r3, r3, #2
 8004072:	3002      	addcc	r0, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	db05      	blt.n	8004084 <__hi0bits+0x3c>
 8004078:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800407c:	f100 0001 	add.w	r0, r0, #1
 8004080:	bf08      	it	eq
 8004082:	2020      	moveq	r0, #32
 8004084:	4770      	bx	lr

08004086 <__lo0bits>:
 8004086:	6803      	ldr	r3, [r0, #0]
 8004088:	4602      	mov	r2, r0
 800408a:	f013 0007 	ands.w	r0, r3, #7
 800408e:	d00b      	beq.n	80040a8 <__lo0bits+0x22>
 8004090:	07d9      	lsls	r1, r3, #31
 8004092:	d421      	bmi.n	80040d8 <__lo0bits+0x52>
 8004094:	0798      	lsls	r0, r3, #30
 8004096:	bf49      	itett	mi
 8004098:	085b      	lsrmi	r3, r3, #1
 800409a:	089b      	lsrpl	r3, r3, #2
 800409c:	2001      	movmi	r0, #1
 800409e:	6013      	strmi	r3, [r2, #0]
 80040a0:	bf5c      	itt	pl
 80040a2:	2002      	movpl	r0, #2
 80040a4:	6013      	strpl	r3, [r2, #0]
 80040a6:	4770      	bx	lr
 80040a8:	b299      	uxth	r1, r3
 80040aa:	b909      	cbnz	r1, 80040b0 <__lo0bits+0x2a>
 80040ac:	2010      	movs	r0, #16
 80040ae:	0c1b      	lsrs	r3, r3, #16
 80040b0:	b2d9      	uxtb	r1, r3
 80040b2:	b909      	cbnz	r1, 80040b8 <__lo0bits+0x32>
 80040b4:	3008      	adds	r0, #8
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	0719      	lsls	r1, r3, #28
 80040ba:	bf04      	itt	eq
 80040bc:	091b      	lsreq	r3, r3, #4
 80040be:	3004      	addeq	r0, #4
 80040c0:	0799      	lsls	r1, r3, #30
 80040c2:	bf04      	itt	eq
 80040c4:	089b      	lsreq	r3, r3, #2
 80040c6:	3002      	addeq	r0, #2
 80040c8:	07d9      	lsls	r1, r3, #31
 80040ca:	d403      	bmi.n	80040d4 <__lo0bits+0x4e>
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	f100 0001 	add.w	r0, r0, #1
 80040d2:	d003      	beq.n	80040dc <__lo0bits+0x56>
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4770      	bx	lr
 80040d8:	2000      	movs	r0, #0
 80040da:	4770      	bx	lr
 80040dc:	2020      	movs	r0, #32
 80040de:	4770      	bx	lr

080040e0 <__i2b>:
 80040e0:	b510      	push	{r4, lr}
 80040e2:	460c      	mov	r4, r1
 80040e4:	2101      	movs	r1, #1
 80040e6:	f7ff febd 	bl	8003e64 <_Balloc>
 80040ea:	4602      	mov	r2, r0
 80040ec:	b928      	cbnz	r0, 80040fa <__i2b+0x1a>
 80040ee:	f240 1145 	movw	r1, #325	@ 0x145
 80040f2:	4b04      	ldr	r3, [pc, #16]	@ (8004104 <__i2b+0x24>)
 80040f4:	4804      	ldr	r0, [pc, #16]	@ (8004108 <__i2b+0x28>)
 80040f6:	f7ff fa4d 	bl	8003594 <__assert_func>
 80040fa:	2301      	movs	r3, #1
 80040fc:	6144      	str	r4, [r0, #20]
 80040fe:	6103      	str	r3, [r0, #16]
 8004100:	bd10      	pop	{r4, pc}
 8004102:	bf00      	nop
 8004104:	0800546e 	.word	0x0800546e
 8004108:	080054df 	.word	0x080054df

0800410c <__multiply>:
 800410c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004110:	4614      	mov	r4, r2
 8004112:	690a      	ldr	r2, [r1, #16]
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	460f      	mov	r7, r1
 8004118:	429a      	cmp	r2, r3
 800411a:	bfa2      	ittt	ge
 800411c:	4623      	movge	r3, r4
 800411e:	460c      	movge	r4, r1
 8004120:	461f      	movge	r7, r3
 8004122:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004126:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800412a:	68a3      	ldr	r3, [r4, #8]
 800412c:	6861      	ldr	r1, [r4, #4]
 800412e:	eb0a 0609 	add.w	r6, sl, r9
 8004132:	42b3      	cmp	r3, r6
 8004134:	b085      	sub	sp, #20
 8004136:	bfb8      	it	lt
 8004138:	3101      	addlt	r1, #1
 800413a:	f7ff fe93 	bl	8003e64 <_Balloc>
 800413e:	b930      	cbnz	r0, 800414e <__multiply+0x42>
 8004140:	4602      	mov	r2, r0
 8004142:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004146:	4b43      	ldr	r3, [pc, #268]	@ (8004254 <__multiply+0x148>)
 8004148:	4843      	ldr	r0, [pc, #268]	@ (8004258 <__multiply+0x14c>)
 800414a:	f7ff fa23 	bl	8003594 <__assert_func>
 800414e:	f100 0514 	add.w	r5, r0, #20
 8004152:	462b      	mov	r3, r5
 8004154:	2200      	movs	r2, #0
 8004156:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800415a:	4543      	cmp	r3, r8
 800415c:	d321      	bcc.n	80041a2 <__multiply+0x96>
 800415e:	f107 0114 	add.w	r1, r7, #20
 8004162:	f104 0214 	add.w	r2, r4, #20
 8004166:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800416a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800416e:	9302      	str	r3, [sp, #8]
 8004170:	1b13      	subs	r3, r2, r4
 8004172:	3b15      	subs	r3, #21
 8004174:	f023 0303 	bic.w	r3, r3, #3
 8004178:	3304      	adds	r3, #4
 800417a:	f104 0715 	add.w	r7, r4, #21
 800417e:	42ba      	cmp	r2, r7
 8004180:	bf38      	it	cc
 8004182:	2304      	movcc	r3, #4
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	9b02      	ldr	r3, [sp, #8]
 8004188:	9103      	str	r1, [sp, #12]
 800418a:	428b      	cmp	r3, r1
 800418c:	d80c      	bhi.n	80041a8 <__multiply+0x9c>
 800418e:	2e00      	cmp	r6, #0
 8004190:	dd03      	ble.n	800419a <__multiply+0x8e>
 8004192:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004196:	2b00      	cmp	r3, #0
 8004198:	d05a      	beq.n	8004250 <__multiply+0x144>
 800419a:	6106      	str	r6, [r0, #16]
 800419c:	b005      	add	sp, #20
 800419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a2:	f843 2b04 	str.w	r2, [r3], #4
 80041a6:	e7d8      	b.n	800415a <__multiply+0x4e>
 80041a8:	f8b1 a000 	ldrh.w	sl, [r1]
 80041ac:	f1ba 0f00 	cmp.w	sl, #0
 80041b0:	d023      	beq.n	80041fa <__multiply+0xee>
 80041b2:	46a9      	mov	r9, r5
 80041b4:	f04f 0c00 	mov.w	ip, #0
 80041b8:	f104 0e14 	add.w	lr, r4, #20
 80041bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80041c0:	f8d9 3000 	ldr.w	r3, [r9]
 80041c4:	fa1f fb87 	uxth.w	fp, r7
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	fb0a 330b 	mla	r3, sl, fp, r3
 80041ce:	4463      	add	r3, ip
 80041d0:	f8d9 c000 	ldr.w	ip, [r9]
 80041d4:	0c3f      	lsrs	r7, r7, #16
 80041d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80041da:	fb0a c707 	mla	r7, sl, r7, ip
 80041de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80041e8:	4572      	cmp	r2, lr
 80041ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80041ee:	f849 3b04 	str.w	r3, [r9], #4
 80041f2:	d8e3      	bhi.n	80041bc <__multiply+0xb0>
 80041f4:	9b01      	ldr	r3, [sp, #4]
 80041f6:	f845 c003 	str.w	ip, [r5, r3]
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	3104      	adds	r1, #4
 80041fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004202:	f1b9 0f00 	cmp.w	r9, #0
 8004206:	d021      	beq.n	800424c <__multiply+0x140>
 8004208:	46ae      	mov	lr, r5
 800420a:	f04f 0a00 	mov.w	sl, #0
 800420e:	682b      	ldr	r3, [r5, #0]
 8004210:	f104 0c14 	add.w	ip, r4, #20
 8004214:	f8bc b000 	ldrh.w	fp, [ip]
 8004218:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800421c:	b29b      	uxth	r3, r3
 800421e:	fb09 770b 	mla	r7, r9, fp, r7
 8004222:	4457      	add	r7, sl
 8004224:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004228:	f84e 3b04 	str.w	r3, [lr], #4
 800422c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004230:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004234:	f8be 3000 	ldrh.w	r3, [lr]
 8004238:	4562      	cmp	r2, ip
 800423a:	fb09 330a 	mla	r3, r9, sl, r3
 800423e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004242:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004246:	d8e5      	bhi.n	8004214 <__multiply+0x108>
 8004248:	9f01      	ldr	r7, [sp, #4]
 800424a:	51eb      	str	r3, [r5, r7]
 800424c:	3504      	adds	r5, #4
 800424e:	e79a      	b.n	8004186 <__multiply+0x7a>
 8004250:	3e01      	subs	r6, #1
 8004252:	e79c      	b.n	800418e <__multiply+0x82>
 8004254:	0800546e 	.word	0x0800546e
 8004258:	080054df 	.word	0x080054df

0800425c <__pow5mult>:
 800425c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004260:	4615      	mov	r5, r2
 8004262:	f012 0203 	ands.w	r2, r2, #3
 8004266:	4607      	mov	r7, r0
 8004268:	460e      	mov	r6, r1
 800426a:	d007      	beq.n	800427c <__pow5mult+0x20>
 800426c:	4c25      	ldr	r4, [pc, #148]	@ (8004304 <__pow5mult+0xa8>)
 800426e:	3a01      	subs	r2, #1
 8004270:	2300      	movs	r3, #0
 8004272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004276:	f7ff fe57 	bl	8003f28 <__multadd>
 800427a:	4606      	mov	r6, r0
 800427c:	10ad      	asrs	r5, r5, #2
 800427e:	d03d      	beq.n	80042fc <__pow5mult+0xa0>
 8004280:	69fc      	ldr	r4, [r7, #28]
 8004282:	b97c      	cbnz	r4, 80042a4 <__pow5mult+0x48>
 8004284:	2010      	movs	r0, #16
 8004286:	f7ff fd25 	bl	8003cd4 <malloc>
 800428a:	4602      	mov	r2, r0
 800428c:	61f8      	str	r0, [r7, #28]
 800428e:	b928      	cbnz	r0, 800429c <__pow5mult+0x40>
 8004290:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004294:	4b1c      	ldr	r3, [pc, #112]	@ (8004308 <__pow5mult+0xac>)
 8004296:	481d      	ldr	r0, [pc, #116]	@ (800430c <__pow5mult+0xb0>)
 8004298:	f7ff f97c 	bl	8003594 <__assert_func>
 800429c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80042a0:	6004      	str	r4, [r0, #0]
 80042a2:	60c4      	str	r4, [r0, #12]
 80042a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80042a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80042ac:	b94c      	cbnz	r4, 80042c2 <__pow5mult+0x66>
 80042ae:	f240 2171 	movw	r1, #625	@ 0x271
 80042b2:	4638      	mov	r0, r7
 80042b4:	f7ff ff14 	bl	80040e0 <__i2b>
 80042b8:	2300      	movs	r3, #0
 80042ba:	4604      	mov	r4, r0
 80042bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80042c0:	6003      	str	r3, [r0, #0]
 80042c2:	f04f 0900 	mov.w	r9, #0
 80042c6:	07eb      	lsls	r3, r5, #31
 80042c8:	d50a      	bpl.n	80042e0 <__pow5mult+0x84>
 80042ca:	4631      	mov	r1, r6
 80042cc:	4622      	mov	r2, r4
 80042ce:	4638      	mov	r0, r7
 80042d0:	f7ff ff1c 	bl	800410c <__multiply>
 80042d4:	4680      	mov	r8, r0
 80042d6:	4631      	mov	r1, r6
 80042d8:	4638      	mov	r0, r7
 80042da:	f7ff fe03 	bl	8003ee4 <_Bfree>
 80042de:	4646      	mov	r6, r8
 80042e0:	106d      	asrs	r5, r5, #1
 80042e2:	d00b      	beq.n	80042fc <__pow5mult+0xa0>
 80042e4:	6820      	ldr	r0, [r4, #0]
 80042e6:	b938      	cbnz	r0, 80042f8 <__pow5mult+0x9c>
 80042e8:	4622      	mov	r2, r4
 80042ea:	4621      	mov	r1, r4
 80042ec:	4638      	mov	r0, r7
 80042ee:	f7ff ff0d 	bl	800410c <__multiply>
 80042f2:	6020      	str	r0, [r4, #0]
 80042f4:	f8c0 9000 	str.w	r9, [r0]
 80042f8:	4604      	mov	r4, r0
 80042fa:	e7e4      	b.n	80042c6 <__pow5mult+0x6a>
 80042fc:	4630      	mov	r0, r6
 80042fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004302:	bf00      	nop
 8004304:	08005538 	.word	0x08005538
 8004308:	080053b9 	.word	0x080053b9
 800430c:	080054df 	.word	0x080054df

08004310 <__lshift>:
 8004310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004314:	460c      	mov	r4, r1
 8004316:	4607      	mov	r7, r0
 8004318:	4691      	mov	r9, r2
 800431a:	6923      	ldr	r3, [r4, #16]
 800431c:	6849      	ldr	r1, [r1, #4]
 800431e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004322:	68a3      	ldr	r3, [r4, #8]
 8004324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004328:	f108 0601 	add.w	r6, r8, #1
 800432c:	42b3      	cmp	r3, r6
 800432e:	db0b      	blt.n	8004348 <__lshift+0x38>
 8004330:	4638      	mov	r0, r7
 8004332:	f7ff fd97 	bl	8003e64 <_Balloc>
 8004336:	4605      	mov	r5, r0
 8004338:	b948      	cbnz	r0, 800434e <__lshift+0x3e>
 800433a:	4602      	mov	r2, r0
 800433c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004340:	4b27      	ldr	r3, [pc, #156]	@ (80043e0 <__lshift+0xd0>)
 8004342:	4828      	ldr	r0, [pc, #160]	@ (80043e4 <__lshift+0xd4>)
 8004344:	f7ff f926 	bl	8003594 <__assert_func>
 8004348:	3101      	adds	r1, #1
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	e7ee      	b.n	800432c <__lshift+0x1c>
 800434e:	2300      	movs	r3, #0
 8004350:	f100 0114 	add.w	r1, r0, #20
 8004354:	f100 0210 	add.w	r2, r0, #16
 8004358:	4618      	mov	r0, r3
 800435a:	4553      	cmp	r3, sl
 800435c:	db33      	blt.n	80043c6 <__lshift+0xb6>
 800435e:	6920      	ldr	r0, [r4, #16]
 8004360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004364:	f104 0314 	add.w	r3, r4, #20
 8004368:	f019 091f 	ands.w	r9, r9, #31
 800436c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004370:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004374:	d02b      	beq.n	80043ce <__lshift+0xbe>
 8004376:	468a      	mov	sl, r1
 8004378:	2200      	movs	r2, #0
 800437a:	f1c9 0e20 	rsb	lr, r9, #32
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	fa00 f009 	lsl.w	r0, r0, r9
 8004384:	4310      	orrs	r0, r2
 8004386:	f84a 0b04 	str.w	r0, [sl], #4
 800438a:	f853 2b04 	ldr.w	r2, [r3], #4
 800438e:	459c      	cmp	ip, r3
 8004390:	fa22 f20e 	lsr.w	r2, r2, lr
 8004394:	d8f3      	bhi.n	800437e <__lshift+0x6e>
 8004396:	ebac 0304 	sub.w	r3, ip, r4
 800439a:	3b15      	subs	r3, #21
 800439c:	f023 0303 	bic.w	r3, r3, #3
 80043a0:	3304      	adds	r3, #4
 80043a2:	f104 0015 	add.w	r0, r4, #21
 80043a6:	4584      	cmp	ip, r0
 80043a8:	bf38      	it	cc
 80043aa:	2304      	movcc	r3, #4
 80043ac:	50ca      	str	r2, [r1, r3]
 80043ae:	b10a      	cbz	r2, 80043b4 <__lshift+0xa4>
 80043b0:	f108 0602 	add.w	r6, r8, #2
 80043b4:	3e01      	subs	r6, #1
 80043b6:	4638      	mov	r0, r7
 80043b8:	4621      	mov	r1, r4
 80043ba:	612e      	str	r6, [r5, #16]
 80043bc:	f7ff fd92 	bl	8003ee4 <_Bfree>
 80043c0:	4628      	mov	r0, r5
 80043c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80043ca:	3301      	adds	r3, #1
 80043cc:	e7c5      	b.n	800435a <__lshift+0x4a>
 80043ce:	3904      	subs	r1, #4
 80043d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043d4:	459c      	cmp	ip, r3
 80043d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80043da:	d8f9      	bhi.n	80043d0 <__lshift+0xc0>
 80043dc:	e7ea      	b.n	80043b4 <__lshift+0xa4>
 80043de:	bf00      	nop
 80043e0:	0800546e 	.word	0x0800546e
 80043e4:	080054df 	.word	0x080054df

080043e8 <__mcmp>:
 80043e8:	4603      	mov	r3, r0
 80043ea:	690a      	ldr	r2, [r1, #16]
 80043ec:	6900      	ldr	r0, [r0, #16]
 80043ee:	b530      	push	{r4, r5, lr}
 80043f0:	1a80      	subs	r0, r0, r2
 80043f2:	d10e      	bne.n	8004412 <__mcmp+0x2a>
 80043f4:	3314      	adds	r3, #20
 80043f6:	3114      	adds	r1, #20
 80043f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80043fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004400:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004404:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004408:	4295      	cmp	r5, r2
 800440a:	d003      	beq.n	8004414 <__mcmp+0x2c>
 800440c:	d205      	bcs.n	800441a <__mcmp+0x32>
 800440e:	f04f 30ff 	mov.w	r0, #4294967295
 8004412:	bd30      	pop	{r4, r5, pc}
 8004414:	42a3      	cmp	r3, r4
 8004416:	d3f3      	bcc.n	8004400 <__mcmp+0x18>
 8004418:	e7fb      	b.n	8004412 <__mcmp+0x2a>
 800441a:	2001      	movs	r0, #1
 800441c:	e7f9      	b.n	8004412 <__mcmp+0x2a>
	...

08004420 <__mdiff>:
 8004420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	4689      	mov	r9, r1
 8004426:	4606      	mov	r6, r0
 8004428:	4611      	mov	r1, r2
 800442a:	4648      	mov	r0, r9
 800442c:	4614      	mov	r4, r2
 800442e:	f7ff ffdb 	bl	80043e8 <__mcmp>
 8004432:	1e05      	subs	r5, r0, #0
 8004434:	d112      	bne.n	800445c <__mdiff+0x3c>
 8004436:	4629      	mov	r1, r5
 8004438:	4630      	mov	r0, r6
 800443a:	f7ff fd13 	bl	8003e64 <_Balloc>
 800443e:	4602      	mov	r2, r0
 8004440:	b928      	cbnz	r0, 800444e <__mdiff+0x2e>
 8004442:	f240 2137 	movw	r1, #567	@ 0x237
 8004446:	4b3e      	ldr	r3, [pc, #248]	@ (8004540 <__mdiff+0x120>)
 8004448:	483e      	ldr	r0, [pc, #248]	@ (8004544 <__mdiff+0x124>)
 800444a:	f7ff f8a3 	bl	8003594 <__assert_func>
 800444e:	2301      	movs	r3, #1
 8004450:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004454:	4610      	mov	r0, r2
 8004456:	b003      	add	sp, #12
 8004458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445c:	bfbc      	itt	lt
 800445e:	464b      	movlt	r3, r9
 8004460:	46a1      	movlt	r9, r4
 8004462:	4630      	mov	r0, r6
 8004464:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004468:	bfba      	itte	lt
 800446a:	461c      	movlt	r4, r3
 800446c:	2501      	movlt	r5, #1
 800446e:	2500      	movge	r5, #0
 8004470:	f7ff fcf8 	bl	8003e64 <_Balloc>
 8004474:	4602      	mov	r2, r0
 8004476:	b918      	cbnz	r0, 8004480 <__mdiff+0x60>
 8004478:	f240 2145 	movw	r1, #581	@ 0x245
 800447c:	4b30      	ldr	r3, [pc, #192]	@ (8004540 <__mdiff+0x120>)
 800447e:	e7e3      	b.n	8004448 <__mdiff+0x28>
 8004480:	f100 0b14 	add.w	fp, r0, #20
 8004484:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004488:	f109 0310 	add.w	r3, r9, #16
 800448c:	60c5      	str	r5, [r0, #12]
 800448e:	f04f 0c00 	mov.w	ip, #0
 8004492:	f109 0514 	add.w	r5, r9, #20
 8004496:	46d9      	mov	r9, fp
 8004498:	6926      	ldr	r6, [r4, #16]
 800449a:	f104 0e14 	add.w	lr, r4, #20
 800449e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80044a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	9b01      	ldr	r3, [sp, #4]
 80044aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80044ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80044b2:	b281      	uxth	r1, r0
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	fa1f f38a 	uxth.w	r3, sl
 80044ba:	1a5b      	subs	r3, r3, r1
 80044bc:	0c00      	lsrs	r0, r0, #16
 80044be:	4463      	add	r3, ip
 80044c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80044c4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80044ce:	4576      	cmp	r6, lr
 80044d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80044d4:	f849 3b04 	str.w	r3, [r9], #4
 80044d8:	d8e6      	bhi.n	80044a8 <__mdiff+0x88>
 80044da:	1b33      	subs	r3, r6, r4
 80044dc:	3b15      	subs	r3, #21
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	3415      	adds	r4, #21
 80044e4:	3304      	adds	r3, #4
 80044e6:	42a6      	cmp	r6, r4
 80044e8:	bf38      	it	cc
 80044ea:	2304      	movcc	r3, #4
 80044ec:	441d      	add	r5, r3
 80044ee:	445b      	add	r3, fp
 80044f0:	461e      	mov	r6, r3
 80044f2:	462c      	mov	r4, r5
 80044f4:	4544      	cmp	r4, r8
 80044f6:	d30e      	bcc.n	8004516 <__mdiff+0xf6>
 80044f8:	f108 0103 	add.w	r1, r8, #3
 80044fc:	1b49      	subs	r1, r1, r5
 80044fe:	f021 0103 	bic.w	r1, r1, #3
 8004502:	3d03      	subs	r5, #3
 8004504:	45a8      	cmp	r8, r5
 8004506:	bf38      	it	cc
 8004508:	2100      	movcc	r1, #0
 800450a:	440b      	add	r3, r1
 800450c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004510:	b199      	cbz	r1, 800453a <__mdiff+0x11a>
 8004512:	6117      	str	r7, [r2, #16]
 8004514:	e79e      	b.n	8004454 <__mdiff+0x34>
 8004516:	46e6      	mov	lr, ip
 8004518:	f854 1b04 	ldr.w	r1, [r4], #4
 800451c:	fa1f fc81 	uxth.w	ip, r1
 8004520:	44f4      	add	ip, lr
 8004522:	0c08      	lsrs	r0, r1, #16
 8004524:	4471      	add	r1, lr
 8004526:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800452a:	b289      	uxth	r1, r1
 800452c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004530:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004534:	f846 1b04 	str.w	r1, [r6], #4
 8004538:	e7dc      	b.n	80044f4 <__mdiff+0xd4>
 800453a:	3f01      	subs	r7, #1
 800453c:	e7e6      	b.n	800450c <__mdiff+0xec>
 800453e:	bf00      	nop
 8004540:	0800546e 	.word	0x0800546e
 8004544:	080054df 	.word	0x080054df

08004548 <__ulp>:
 8004548:	4b0e      	ldr	r3, [pc, #56]	@ (8004584 <__ulp+0x3c>)
 800454a:	400b      	ands	r3, r1
 800454c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8004550:	2b00      	cmp	r3, #0
 8004552:	dc08      	bgt.n	8004566 <__ulp+0x1e>
 8004554:	425b      	negs	r3, r3
 8004556:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800455a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800455e:	da04      	bge.n	800456a <__ulp+0x22>
 8004560:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004564:	4113      	asrs	r3, r2
 8004566:	2200      	movs	r2, #0
 8004568:	e008      	b.n	800457c <__ulp+0x34>
 800456a:	f1a2 0314 	sub.w	r3, r2, #20
 800456e:	2b1e      	cmp	r3, #30
 8004570:	bfd6      	itet	le
 8004572:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8004576:	2201      	movgt	r2, #1
 8004578:	40da      	lsrle	r2, r3
 800457a:	2300      	movs	r3, #0
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	7ff00000 	.word	0x7ff00000

08004588 <__b2d>:
 8004588:	6902      	ldr	r2, [r0, #16]
 800458a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458c:	f100 0614 	add.w	r6, r0, #20
 8004590:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004594:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8004598:	4f1e      	ldr	r7, [pc, #120]	@ (8004614 <__b2d+0x8c>)
 800459a:	4620      	mov	r0, r4
 800459c:	f7ff fd54 	bl	8004048 <__hi0bits>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f1c0 0020 	rsb	r0, r0, #32
 80045a6:	2b0a      	cmp	r3, #10
 80045a8:	f1a2 0504 	sub.w	r5, r2, #4
 80045ac:	6008      	str	r0, [r1, #0]
 80045ae:	dc12      	bgt.n	80045d6 <__b2d+0x4e>
 80045b0:	42ae      	cmp	r6, r5
 80045b2:	bf2c      	ite	cs
 80045b4:	2200      	movcs	r2, #0
 80045b6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80045ba:	f1c3 0c0b 	rsb	ip, r3, #11
 80045be:	3315      	adds	r3, #21
 80045c0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80045c4:	fa04 f303 	lsl.w	r3, r4, r3
 80045c8:	fa22 f20c 	lsr.w	r2, r2, ip
 80045cc:	ea4e 0107 	orr.w	r1, lr, r7
 80045d0:	431a      	orrs	r2, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d6:	42ae      	cmp	r6, r5
 80045d8:	bf36      	itet	cc
 80045da:	f1a2 0508 	subcc.w	r5, r2, #8
 80045de:	2200      	movcs	r2, #0
 80045e0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80045e4:	3b0b      	subs	r3, #11
 80045e6:	d012      	beq.n	800460e <__b2d+0x86>
 80045e8:	f1c3 0720 	rsb	r7, r3, #32
 80045ec:	fa22 f107 	lsr.w	r1, r2, r7
 80045f0:	409c      	lsls	r4, r3
 80045f2:	430c      	orrs	r4, r1
 80045f4:	42b5      	cmp	r5, r6
 80045f6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80045fa:	bf94      	ite	ls
 80045fc:	2400      	movls	r4, #0
 80045fe:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8004602:	409a      	lsls	r2, r3
 8004604:	40fc      	lsrs	r4, r7
 8004606:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800460a:	4322      	orrs	r2, r4
 800460c:	e7e1      	b.n	80045d2 <__b2d+0x4a>
 800460e:	ea44 0107 	orr.w	r1, r4, r7
 8004612:	e7de      	b.n	80045d2 <__b2d+0x4a>
 8004614:	3ff00000 	.word	0x3ff00000

08004618 <__d2b>:
 8004618:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800461c:	2101      	movs	r1, #1
 800461e:	4690      	mov	r8, r2
 8004620:	4699      	mov	r9, r3
 8004622:	9e08      	ldr	r6, [sp, #32]
 8004624:	f7ff fc1e 	bl	8003e64 <_Balloc>
 8004628:	4604      	mov	r4, r0
 800462a:	b930      	cbnz	r0, 800463a <__d2b+0x22>
 800462c:	4602      	mov	r2, r0
 800462e:	f240 310f 	movw	r1, #783	@ 0x30f
 8004632:	4b23      	ldr	r3, [pc, #140]	@ (80046c0 <__d2b+0xa8>)
 8004634:	4823      	ldr	r0, [pc, #140]	@ (80046c4 <__d2b+0xac>)
 8004636:	f7fe ffad 	bl	8003594 <__assert_func>
 800463a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800463e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004642:	b10d      	cbz	r5, 8004648 <__d2b+0x30>
 8004644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	f1b8 0300 	subs.w	r3, r8, #0
 800464e:	d024      	beq.n	800469a <__d2b+0x82>
 8004650:	4668      	mov	r0, sp
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	f7ff fd17 	bl	8004086 <__lo0bits>
 8004658:	e9dd 1200 	ldrd	r1, r2, [sp]
 800465c:	b1d8      	cbz	r0, 8004696 <__d2b+0x7e>
 800465e:	f1c0 0320 	rsb	r3, r0, #32
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	430b      	orrs	r3, r1
 8004668:	40c2      	lsrs	r2, r0
 800466a:	6163      	str	r3, [r4, #20]
 800466c:	9201      	str	r2, [sp, #4]
 800466e:	9b01      	ldr	r3, [sp, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2201      	moveq	r2, #1
 8004676:	2202      	movne	r2, #2
 8004678:	61a3      	str	r3, [r4, #24]
 800467a:	6122      	str	r2, [r4, #16]
 800467c:	b1ad      	cbz	r5, 80046aa <__d2b+0x92>
 800467e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004682:	4405      	add	r5, r0
 8004684:	6035      	str	r5, [r6, #0]
 8004686:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800468a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800468c:	6018      	str	r0, [r3, #0]
 800468e:	4620      	mov	r0, r4
 8004690:	b002      	add	sp, #8
 8004692:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004696:	6161      	str	r1, [r4, #20]
 8004698:	e7e9      	b.n	800466e <__d2b+0x56>
 800469a:	a801      	add	r0, sp, #4
 800469c:	f7ff fcf3 	bl	8004086 <__lo0bits>
 80046a0:	9b01      	ldr	r3, [sp, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	6163      	str	r3, [r4, #20]
 80046a6:	3020      	adds	r0, #32
 80046a8:	e7e7      	b.n	800467a <__d2b+0x62>
 80046aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80046ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80046b2:	6030      	str	r0, [r6, #0]
 80046b4:	6918      	ldr	r0, [r3, #16]
 80046b6:	f7ff fcc7 	bl	8004048 <__hi0bits>
 80046ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80046be:	e7e4      	b.n	800468a <__d2b+0x72>
 80046c0:	0800546e 	.word	0x0800546e
 80046c4:	080054df 	.word	0x080054df

080046c8 <__ratio>:
 80046c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046cc:	b085      	sub	sp, #20
 80046ce:	e9cd 1000 	strd	r1, r0, [sp]
 80046d2:	a902      	add	r1, sp, #8
 80046d4:	f7ff ff58 	bl	8004588 <__b2d>
 80046d8:	468b      	mov	fp, r1
 80046da:	4606      	mov	r6, r0
 80046dc:	460f      	mov	r7, r1
 80046de:	9800      	ldr	r0, [sp, #0]
 80046e0:	a903      	add	r1, sp, #12
 80046e2:	f7ff ff51 	bl	8004588 <__b2d>
 80046e6:	460d      	mov	r5, r1
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	4689      	mov	r9, r1
 80046ec:	6919      	ldr	r1, [r3, #16]
 80046ee:	9b00      	ldr	r3, [sp, #0]
 80046f0:	4604      	mov	r4, r0
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	4630      	mov	r0, r6
 80046f6:	1ac9      	subs	r1, r1, r3
 80046f8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004702:	2b00      	cmp	r3, #0
 8004704:	bfcd      	iteet	gt
 8004706:	463a      	movgt	r2, r7
 8004708:	462a      	movle	r2, r5
 800470a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800470e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8004712:	bfd8      	it	le
 8004714:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8004718:	464b      	mov	r3, r9
 800471a:	4622      	mov	r2, r4
 800471c:	4659      	mov	r1, fp
 800471e:	f7fc f869 	bl	80007f4 <__aeabi_ddiv>
 8004722:	b005      	add	sp, #20
 8004724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004728 <__copybits>:
 8004728:	3901      	subs	r1, #1
 800472a:	b570      	push	{r4, r5, r6, lr}
 800472c:	1149      	asrs	r1, r1, #5
 800472e:	6914      	ldr	r4, [r2, #16]
 8004730:	3101      	adds	r1, #1
 8004732:	f102 0314 	add.w	r3, r2, #20
 8004736:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800473a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800473e:	1f05      	subs	r5, r0, #4
 8004740:	42a3      	cmp	r3, r4
 8004742:	d30c      	bcc.n	800475e <__copybits+0x36>
 8004744:	1aa3      	subs	r3, r4, r2
 8004746:	3b11      	subs	r3, #17
 8004748:	f023 0303 	bic.w	r3, r3, #3
 800474c:	3211      	adds	r2, #17
 800474e:	42a2      	cmp	r2, r4
 8004750:	bf88      	it	hi
 8004752:	2300      	movhi	r3, #0
 8004754:	4418      	add	r0, r3
 8004756:	2300      	movs	r3, #0
 8004758:	4288      	cmp	r0, r1
 800475a:	d305      	bcc.n	8004768 <__copybits+0x40>
 800475c:	bd70      	pop	{r4, r5, r6, pc}
 800475e:	f853 6b04 	ldr.w	r6, [r3], #4
 8004762:	f845 6f04 	str.w	r6, [r5, #4]!
 8004766:	e7eb      	b.n	8004740 <__copybits+0x18>
 8004768:	f840 3b04 	str.w	r3, [r0], #4
 800476c:	e7f4      	b.n	8004758 <__copybits+0x30>

0800476e <__any_on>:
 800476e:	f100 0214 	add.w	r2, r0, #20
 8004772:	6900      	ldr	r0, [r0, #16]
 8004774:	114b      	asrs	r3, r1, #5
 8004776:	4298      	cmp	r0, r3
 8004778:	b510      	push	{r4, lr}
 800477a:	db11      	blt.n	80047a0 <__any_on+0x32>
 800477c:	dd0a      	ble.n	8004794 <__any_on+0x26>
 800477e:	f011 011f 	ands.w	r1, r1, #31
 8004782:	d007      	beq.n	8004794 <__any_on+0x26>
 8004784:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004788:	fa24 f001 	lsr.w	r0, r4, r1
 800478c:	fa00 f101 	lsl.w	r1, r0, r1
 8004790:	428c      	cmp	r4, r1
 8004792:	d10b      	bne.n	80047ac <__any_on+0x3e>
 8004794:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004798:	4293      	cmp	r3, r2
 800479a:	d803      	bhi.n	80047a4 <__any_on+0x36>
 800479c:	2000      	movs	r0, #0
 800479e:	bd10      	pop	{r4, pc}
 80047a0:	4603      	mov	r3, r0
 80047a2:	e7f7      	b.n	8004794 <__any_on+0x26>
 80047a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d0f5      	beq.n	8004798 <__any_on+0x2a>
 80047ac:	2001      	movs	r0, #1
 80047ae:	e7f6      	b.n	800479e <__any_on+0x30>

080047b0 <__ascii_wctomb>:
 80047b0:	4603      	mov	r3, r0
 80047b2:	4608      	mov	r0, r1
 80047b4:	b141      	cbz	r1, 80047c8 <__ascii_wctomb+0x18>
 80047b6:	2aff      	cmp	r2, #255	@ 0xff
 80047b8:	d904      	bls.n	80047c4 <__ascii_wctomb+0x14>
 80047ba:	228a      	movs	r2, #138	@ 0x8a
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	4770      	bx	lr
 80047c4:	2001      	movs	r0, #1
 80047c6:	700a      	strb	r2, [r1, #0]
 80047c8:	4770      	bx	lr
	...

080047cc <__sflush_r>:
 80047cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	0716      	lsls	r6, r2, #28
 80047d4:	4605      	mov	r5, r0
 80047d6:	460c      	mov	r4, r1
 80047d8:	d454      	bmi.n	8004884 <__sflush_r+0xb8>
 80047da:	684b      	ldr	r3, [r1, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	dc02      	bgt.n	80047e6 <__sflush_r+0x1a>
 80047e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dd48      	ble.n	8004878 <__sflush_r+0xac>
 80047e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047e8:	2e00      	cmp	r6, #0
 80047ea:	d045      	beq.n	8004878 <__sflush_r+0xac>
 80047ec:	2300      	movs	r3, #0
 80047ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047f2:	682f      	ldr	r7, [r5, #0]
 80047f4:	6a21      	ldr	r1, [r4, #32]
 80047f6:	602b      	str	r3, [r5, #0]
 80047f8:	d030      	beq.n	800485c <__sflush_r+0x90>
 80047fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047fc:	89a3      	ldrh	r3, [r4, #12]
 80047fe:	0759      	lsls	r1, r3, #29
 8004800:	d505      	bpl.n	800480e <__sflush_r+0x42>
 8004802:	6863      	ldr	r3, [r4, #4]
 8004804:	1ad2      	subs	r2, r2, r3
 8004806:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004808:	b10b      	cbz	r3, 800480e <__sflush_r+0x42>
 800480a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800480c:	1ad2      	subs	r2, r2, r3
 800480e:	2300      	movs	r3, #0
 8004810:	4628      	mov	r0, r5
 8004812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004814:	6a21      	ldr	r1, [r4, #32]
 8004816:	47b0      	blx	r6
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	d106      	bne.n	800482c <__sflush_r+0x60>
 800481e:	6829      	ldr	r1, [r5, #0]
 8004820:	291d      	cmp	r1, #29
 8004822:	d82b      	bhi.n	800487c <__sflush_r+0xb0>
 8004824:	4a28      	ldr	r2, [pc, #160]	@ (80048c8 <__sflush_r+0xfc>)
 8004826:	410a      	asrs	r2, r1
 8004828:	07d6      	lsls	r6, r2, #31
 800482a:	d427      	bmi.n	800487c <__sflush_r+0xb0>
 800482c:	2200      	movs	r2, #0
 800482e:	6062      	str	r2, [r4, #4]
 8004830:	6922      	ldr	r2, [r4, #16]
 8004832:	04d9      	lsls	r1, r3, #19
 8004834:	6022      	str	r2, [r4, #0]
 8004836:	d504      	bpl.n	8004842 <__sflush_r+0x76>
 8004838:	1c42      	adds	r2, r0, #1
 800483a:	d101      	bne.n	8004840 <__sflush_r+0x74>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b903      	cbnz	r3, 8004842 <__sflush_r+0x76>
 8004840:	6560      	str	r0, [r4, #84]	@ 0x54
 8004842:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004844:	602f      	str	r7, [r5, #0]
 8004846:	b1b9      	cbz	r1, 8004878 <__sflush_r+0xac>
 8004848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800484c:	4299      	cmp	r1, r3
 800484e:	d002      	beq.n	8004856 <__sflush_r+0x8a>
 8004850:	4628      	mov	r0, r5
 8004852:	f7fe febd 	bl	80035d0 <_free_r>
 8004856:	2300      	movs	r3, #0
 8004858:	6363      	str	r3, [r4, #52]	@ 0x34
 800485a:	e00d      	b.n	8004878 <__sflush_r+0xac>
 800485c:	2301      	movs	r3, #1
 800485e:	4628      	mov	r0, r5
 8004860:	47b0      	blx	r6
 8004862:	4602      	mov	r2, r0
 8004864:	1c50      	adds	r0, r2, #1
 8004866:	d1c9      	bne.n	80047fc <__sflush_r+0x30>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0c6      	beq.n	80047fc <__sflush_r+0x30>
 800486e:	2b1d      	cmp	r3, #29
 8004870:	d001      	beq.n	8004876 <__sflush_r+0xaa>
 8004872:	2b16      	cmp	r3, #22
 8004874:	d11d      	bne.n	80048b2 <__sflush_r+0xe6>
 8004876:	602f      	str	r7, [r5, #0]
 8004878:	2000      	movs	r0, #0
 800487a:	e021      	b.n	80048c0 <__sflush_r+0xf4>
 800487c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004880:	b21b      	sxth	r3, r3
 8004882:	e01a      	b.n	80048ba <__sflush_r+0xee>
 8004884:	690f      	ldr	r7, [r1, #16]
 8004886:	2f00      	cmp	r7, #0
 8004888:	d0f6      	beq.n	8004878 <__sflush_r+0xac>
 800488a:	0793      	lsls	r3, r2, #30
 800488c:	bf18      	it	ne
 800488e:	2300      	movne	r3, #0
 8004890:	680e      	ldr	r6, [r1, #0]
 8004892:	bf08      	it	eq
 8004894:	694b      	ldreq	r3, [r1, #20]
 8004896:	1bf6      	subs	r6, r6, r7
 8004898:	600f      	str	r7, [r1, #0]
 800489a:	608b      	str	r3, [r1, #8]
 800489c:	2e00      	cmp	r6, #0
 800489e:	ddeb      	ble.n	8004878 <__sflush_r+0xac>
 80048a0:	4633      	mov	r3, r6
 80048a2:	463a      	mov	r2, r7
 80048a4:	4628      	mov	r0, r5
 80048a6:	6a21      	ldr	r1, [r4, #32]
 80048a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80048ac:	47e0      	blx	ip
 80048ae:	2800      	cmp	r0, #0
 80048b0:	dc07      	bgt.n	80048c2 <__sflush_r+0xf6>
 80048b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ba:	f04f 30ff 	mov.w	r0, #4294967295
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048c2:	4407      	add	r7, r0
 80048c4:	1a36      	subs	r6, r6, r0
 80048c6:	e7e9      	b.n	800489c <__sflush_r+0xd0>
 80048c8:	dfbffffe 	.word	0xdfbffffe

080048cc <_fflush_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	690b      	ldr	r3, [r1, #16]
 80048d0:	4605      	mov	r5, r0
 80048d2:	460c      	mov	r4, r1
 80048d4:	b913      	cbnz	r3, 80048dc <_fflush_r+0x10>
 80048d6:	2500      	movs	r5, #0
 80048d8:	4628      	mov	r0, r5
 80048da:	bd38      	pop	{r3, r4, r5, pc}
 80048dc:	b118      	cbz	r0, 80048e6 <_fflush_r+0x1a>
 80048de:	6a03      	ldr	r3, [r0, #32]
 80048e0:	b90b      	cbnz	r3, 80048e6 <_fflush_r+0x1a>
 80048e2:	f7fe fccd 	bl	8003280 <__sinit>
 80048e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f3      	beq.n	80048d6 <_fflush_r+0xa>
 80048ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048f0:	07d0      	lsls	r0, r2, #31
 80048f2:	d404      	bmi.n	80048fe <_fflush_r+0x32>
 80048f4:	0599      	lsls	r1, r3, #22
 80048f6:	d402      	bmi.n	80048fe <_fflush_r+0x32>
 80048f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048fa:	f7fe fe34 	bl	8003566 <__retarget_lock_acquire_recursive>
 80048fe:	4628      	mov	r0, r5
 8004900:	4621      	mov	r1, r4
 8004902:	f7ff ff63 	bl	80047cc <__sflush_r>
 8004906:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004908:	4605      	mov	r5, r0
 800490a:	07da      	lsls	r2, r3, #31
 800490c:	d4e4      	bmi.n	80048d8 <_fflush_r+0xc>
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	059b      	lsls	r3, r3, #22
 8004912:	d4e1      	bmi.n	80048d8 <_fflush_r+0xc>
 8004914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004916:	f7fe fe27 	bl	8003568 <__retarget_lock_release_recursive>
 800491a:	e7dd      	b.n	80048d8 <_fflush_r+0xc>

0800491c <fiprintf>:
 800491c:	b40e      	push	{r1, r2, r3}
 800491e:	b503      	push	{r0, r1, lr}
 8004920:	4601      	mov	r1, r0
 8004922:	ab03      	add	r3, sp, #12
 8004924:	4805      	ldr	r0, [pc, #20]	@ (800493c <fiprintf+0x20>)
 8004926:	f853 2b04 	ldr.w	r2, [r3], #4
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	f000 f859 	bl	80049e4 <_vfiprintf_r>
 8004932:	b002      	add	sp, #8
 8004934:	f85d eb04 	ldr.w	lr, [sp], #4
 8004938:	b003      	add	sp, #12
 800493a:	4770      	bx	lr
 800493c:	20000184 	.word	0x20000184

08004940 <_sbrk_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	2300      	movs	r3, #0
 8004944:	4d05      	ldr	r5, [pc, #20]	@ (800495c <_sbrk_r+0x1c>)
 8004946:	4604      	mov	r4, r0
 8004948:	4608      	mov	r0, r1
 800494a:	602b      	str	r3, [r5, #0]
 800494c:	f7fc fc50 	bl	80011f0 <_sbrk>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d102      	bne.n	800495a <_sbrk_r+0x1a>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	b103      	cbz	r3, 800495a <_sbrk_r+0x1a>
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	200004d4 	.word	0x200004d4

08004960 <abort>:
 8004960:	2006      	movs	r0, #6
 8004962:	b508      	push	{r3, lr}
 8004964:	f000 fba4 	bl	80050b0 <raise>
 8004968:	2001      	movs	r0, #1
 800496a:	f7fc fbcc 	bl	8001106 <_exit>

0800496e <_calloc_r>:
 800496e:	b570      	push	{r4, r5, r6, lr}
 8004970:	fba1 5402 	umull	r5, r4, r1, r2
 8004974:	b93c      	cbnz	r4, 8004986 <_calloc_r+0x18>
 8004976:	4629      	mov	r1, r5
 8004978:	f7ff f9d6 	bl	8003d28 <_malloc_r>
 800497c:	4606      	mov	r6, r0
 800497e:	b928      	cbnz	r0, 800498c <_calloc_r+0x1e>
 8004980:	2600      	movs	r6, #0
 8004982:	4630      	mov	r0, r6
 8004984:	bd70      	pop	{r4, r5, r6, pc}
 8004986:	220c      	movs	r2, #12
 8004988:	6002      	str	r2, [r0, #0]
 800498a:	e7f9      	b.n	8004980 <_calloc_r+0x12>
 800498c:	462a      	mov	r2, r5
 800498e:	4621      	mov	r1, r4
 8004990:	f7fe fcef 	bl	8003372 <memset>
 8004994:	e7f5      	b.n	8004982 <_calloc_r+0x14>

08004996 <__sfputc_r>:
 8004996:	6893      	ldr	r3, [r2, #8]
 8004998:	b410      	push	{r4}
 800499a:	3b01      	subs	r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	6093      	str	r3, [r2, #8]
 80049a0:	da07      	bge.n	80049b2 <__sfputc_r+0x1c>
 80049a2:	6994      	ldr	r4, [r2, #24]
 80049a4:	42a3      	cmp	r3, r4
 80049a6:	db01      	blt.n	80049ac <__sfputc_r+0x16>
 80049a8:	290a      	cmp	r1, #10
 80049aa:	d102      	bne.n	80049b2 <__sfputc_r+0x1c>
 80049ac:	bc10      	pop	{r4}
 80049ae:	f000 bac3 	b.w	8004f38 <__swbuf_r>
 80049b2:	6813      	ldr	r3, [r2, #0]
 80049b4:	1c58      	adds	r0, r3, #1
 80049b6:	6010      	str	r0, [r2, #0]
 80049b8:	7019      	strb	r1, [r3, #0]
 80049ba:	4608      	mov	r0, r1
 80049bc:	bc10      	pop	{r4}
 80049be:	4770      	bx	lr

080049c0 <__sfputs_r>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	4606      	mov	r6, r0
 80049c4:	460f      	mov	r7, r1
 80049c6:	4614      	mov	r4, r2
 80049c8:	18d5      	adds	r5, r2, r3
 80049ca:	42ac      	cmp	r4, r5
 80049cc:	d101      	bne.n	80049d2 <__sfputs_r+0x12>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e007      	b.n	80049e2 <__sfputs_r+0x22>
 80049d2:	463a      	mov	r2, r7
 80049d4:	4630      	mov	r0, r6
 80049d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049da:	f7ff ffdc 	bl	8004996 <__sfputc_r>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	d1f3      	bne.n	80049ca <__sfputs_r+0xa>
 80049e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049e4 <_vfiprintf_r>:
 80049e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	460d      	mov	r5, r1
 80049ea:	4614      	mov	r4, r2
 80049ec:	4698      	mov	r8, r3
 80049ee:	4606      	mov	r6, r0
 80049f0:	b09d      	sub	sp, #116	@ 0x74
 80049f2:	b118      	cbz	r0, 80049fc <_vfiprintf_r+0x18>
 80049f4:	6a03      	ldr	r3, [r0, #32]
 80049f6:	b90b      	cbnz	r3, 80049fc <_vfiprintf_r+0x18>
 80049f8:	f7fe fc42 	bl	8003280 <__sinit>
 80049fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049fe:	07d9      	lsls	r1, r3, #31
 8004a00:	d405      	bmi.n	8004a0e <_vfiprintf_r+0x2a>
 8004a02:	89ab      	ldrh	r3, [r5, #12]
 8004a04:	059a      	lsls	r2, r3, #22
 8004a06:	d402      	bmi.n	8004a0e <_vfiprintf_r+0x2a>
 8004a08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a0a:	f7fe fdac 	bl	8003566 <__retarget_lock_acquire_recursive>
 8004a0e:	89ab      	ldrh	r3, [r5, #12]
 8004a10:	071b      	lsls	r3, r3, #28
 8004a12:	d501      	bpl.n	8004a18 <_vfiprintf_r+0x34>
 8004a14:	692b      	ldr	r3, [r5, #16]
 8004a16:	b99b      	cbnz	r3, 8004a40 <_vfiprintf_r+0x5c>
 8004a18:	4629      	mov	r1, r5
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f000 faca 	bl	8004fb4 <__swsetup_r>
 8004a20:	b170      	cbz	r0, 8004a40 <_vfiprintf_r+0x5c>
 8004a22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a24:	07dc      	lsls	r4, r3, #31
 8004a26:	d504      	bpl.n	8004a32 <_vfiprintf_r+0x4e>
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	b01d      	add	sp, #116	@ 0x74
 8004a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a32:	89ab      	ldrh	r3, [r5, #12]
 8004a34:	0598      	lsls	r0, r3, #22
 8004a36:	d4f7      	bmi.n	8004a28 <_vfiprintf_r+0x44>
 8004a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a3a:	f7fe fd95 	bl	8003568 <__retarget_lock_release_recursive>
 8004a3e:	e7f3      	b.n	8004a28 <_vfiprintf_r+0x44>
 8004a40:	2300      	movs	r3, #0
 8004a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a44:	2320      	movs	r3, #32
 8004a46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a4a:	2330      	movs	r3, #48	@ 0x30
 8004a4c:	f04f 0901 	mov.w	r9, #1
 8004a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a54:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004c00 <_vfiprintf_r+0x21c>
 8004a58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a5c:	4623      	mov	r3, r4
 8004a5e:	469a      	mov	sl, r3
 8004a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a64:	b10a      	cbz	r2, 8004a6a <_vfiprintf_r+0x86>
 8004a66:	2a25      	cmp	r2, #37	@ 0x25
 8004a68:	d1f9      	bne.n	8004a5e <_vfiprintf_r+0x7a>
 8004a6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004a6e:	d00b      	beq.n	8004a88 <_vfiprintf_r+0xa4>
 8004a70:	465b      	mov	r3, fp
 8004a72:	4622      	mov	r2, r4
 8004a74:	4629      	mov	r1, r5
 8004a76:	4630      	mov	r0, r6
 8004a78:	f7ff ffa2 	bl	80049c0 <__sfputs_r>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	f000 80a7 	beq.w	8004bd0 <_vfiprintf_r+0x1ec>
 8004a82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a84:	445a      	add	r2, fp
 8004a86:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a88:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 809f 	beq.w	8004bd0 <_vfiprintf_r+0x1ec>
 8004a92:	2300      	movs	r3, #0
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295
 8004a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a9c:	f10a 0a01 	add.w	sl, sl, #1
 8004aa0:	9304      	str	r3, [sp, #16]
 8004aa2:	9307      	str	r3, [sp, #28]
 8004aa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004aa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004aaa:	4654      	mov	r4, sl
 8004aac:	2205      	movs	r2, #5
 8004aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab2:	4853      	ldr	r0, [pc, #332]	@ (8004c00 <_vfiprintf_r+0x21c>)
 8004ab4:	f000 fb18 	bl	80050e8 <memchr>
 8004ab8:	9a04      	ldr	r2, [sp, #16]
 8004aba:	b9d8      	cbnz	r0, 8004af4 <_vfiprintf_r+0x110>
 8004abc:	06d1      	lsls	r1, r2, #27
 8004abe:	bf44      	itt	mi
 8004ac0:	2320      	movmi	r3, #32
 8004ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ac6:	0713      	lsls	r3, r2, #28
 8004ac8:	bf44      	itt	mi
 8004aca:	232b      	movmi	r3, #43	@ 0x2b
 8004acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ad6:	d015      	beq.n	8004b04 <_vfiprintf_r+0x120>
 8004ad8:	4654      	mov	r4, sl
 8004ada:	2000      	movs	r0, #0
 8004adc:	f04f 0c0a 	mov.w	ip, #10
 8004ae0:	9a07      	ldr	r2, [sp, #28]
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ae8:	3b30      	subs	r3, #48	@ 0x30
 8004aea:	2b09      	cmp	r3, #9
 8004aec:	d94b      	bls.n	8004b86 <_vfiprintf_r+0x1a2>
 8004aee:	b1b0      	cbz	r0, 8004b1e <_vfiprintf_r+0x13a>
 8004af0:	9207      	str	r2, [sp, #28]
 8004af2:	e014      	b.n	8004b1e <_vfiprintf_r+0x13a>
 8004af4:	eba0 0308 	sub.w	r3, r0, r8
 8004af8:	fa09 f303 	lsl.w	r3, r9, r3
 8004afc:	4313      	orrs	r3, r2
 8004afe:	46a2      	mov	sl, r4
 8004b00:	9304      	str	r3, [sp, #16]
 8004b02:	e7d2      	b.n	8004aaa <_vfiprintf_r+0xc6>
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	1d19      	adds	r1, r3, #4
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	9103      	str	r1, [sp, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bfbb      	ittet	lt
 8004b10:	425b      	neglt	r3, r3
 8004b12:	f042 0202 	orrlt.w	r2, r2, #2
 8004b16:	9307      	strge	r3, [sp, #28]
 8004b18:	9307      	strlt	r3, [sp, #28]
 8004b1a:	bfb8      	it	lt
 8004b1c:	9204      	strlt	r2, [sp, #16]
 8004b1e:	7823      	ldrb	r3, [r4, #0]
 8004b20:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b22:	d10a      	bne.n	8004b3a <_vfiprintf_r+0x156>
 8004b24:	7863      	ldrb	r3, [r4, #1]
 8004b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b28:	d132      	bne.n	8004b90 <_vfiprintf_r+0x1ac>
 8004b2a:	9b03      	ldr	r3, [sp, #12]
 8004b2c:	3402      	adds	r4, #2
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	9203      	str	r2, [sp, #12]
 8004b34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b38:	9305      	str	r3, [sp, #20]
 8004b3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004c04 <_vfiprintf_r+0x220>
 8004b3e:	2203      	movs	r2, #3
 8004b40:	4650      	mov	r0, sl
 8004b42:	7821      	ldrb	r1, [r4, #0]
 8004b44:	f000 fad0 	bl	80050e8 <memchr>
 8004b48:	b138      	cbz	r0, 8004b5a <_vfiprintf_r+0x176>
 8004b4a:	2240      	movs	r2, #64	@ 0x40
 8004b4c:	9b04      	ldr	r3, [sp, #16]
 8004b4e:	eba0 000a 	sub.w	r0, r0, sl
 8004b52:	4082      	lsls	r2, r0
 8004b54:	4313      	orrs	r3, r2
 8004b56:	3401      	adds	r4, #1
 8004b58:	9304      	str	r3, [sp, #16]
 8004b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b5e:	2206      	movs	r2, #6
 8004b60:	4829      	ldr	r0, [pc, #164]	@ (8004c08 <_vfiprintf_r+0x224>)
 8004b62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b66:	f000 fabf 	bl	80050e8 <memchr>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d03f      	beq.n	8004bee <_vfiprintf_r+0x20a>
 8004b6e:	4b27      	ldr	r3, [pc, #156]	@ (8004c0c <_vfiprintf_r+0x228>)
 8004b70:	bb1b      	cbnz	r3, 8004bba <_vfiprintf_r+0x1d6>
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	3307      	adds	r3, #7
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	9303      	str	r3, [sp, #12]
 8004b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b80:	443b      	add	r3, r7
 8004b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b84:	e76a      	b.n	8004a5c <_vfiprintf_r+0x78>
 8004b86:	460c      	mov	r4, r1
 8004b88:	2001      	movs	r0, #1
 8004b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b8e:	e7a8      	b.n	8004ae2 <_vfiprintf_r+0xfe>
 8004b90:	2300      	movs	r3, #0
 8004b92:	f04f 0c0a 	mov.w	ip, #10
 8004b96:	4619      	mov	r1, r3
 8004b98:	3401      	adds	r4, #1
 8004b9a:	9305      	str	r3, [sp, #20]
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ba2:	3a30      	subs	r2, #48	@ 0x30
 8004ba4:	2a09      	cmp	r2, #9
 8004ba6:	d903      	bls.n	8004bb0 <_vfiprintf_r+0x1cc>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0c6      	beq.n	8004b3a <_vfiprintf_r+0x156>
 8004bac:	9105      	str	r1, [sp, #20]
 8004bae:	e7c4      	b.n	8004b3a <_vfiprintf_r+0x156>
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bb8:	e7f0      	b.n	8004b9c <_vfiprintf_r+0x1b8>
 8004bba:	ab03      	add	r3, sp, #12
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	462a      	mov	r2, r5
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <_vfiprintf_r+0x22c>)
 8004bc4:	a904      	add	r1, sp, #16
 8004bc6:	f3af 8000 	nop.w
 8004bca:	4607      	mov	r7, r0
 8004bcc:	1c78      	adds	r0, r7, #1
 8004bce:	d1d6      	bne.n	8004b7e <_vfiprintf_r+0x19a>
 8004bd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bd2:	07d9      	lsls	r1, r3, #31
 8004bd4:	d405      	bmi.n	8004be2 <_vfiprintf_r+0x1fe>
 8004bd6:	89ab      	ldrh	r3, [r5, #12]
 8004bd8:	059a      	lsls	r2, r3, #22
 8004bda:	d402      	bmi.n	8004be2 <_vfiprintf_r+0x1fe>
 8004bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bde:	f7fe fcc3 	bl	8003568 <__retarget_lock_release_recursive>
 8004be2:	89ab      	ldrh	r3, [r5, #12]
 8004be4:	065b      	lsls	r3, r3, #25
 8004be6:	f53f af1f 	bmi.w	8004a28 <_vfiprintf_r+0x44>
 8004bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bec:	e71e      	b.n	8004a2c <_vfiprintf_r+0x48>
 8004bee:	ab03      	add	r3, sp, #12
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	462a      	mov	r2, r5
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <_vfiprintf_r+0x22c>)
 8004bf8:	a904      	add	r1, sp, #16
 8004bfa:	f000 f87d 	bl	8004cf8 <_printf_i>
 8004bfe:	e7e4      	b.n	8004bca <_vfiprintf_r+0x1e6>
 8004c00:	08005638 	.word	0x08005638
 8004c04:	0800563e 	.word	0x0800563e
 8004c08:	08005642 	.word	0x08005642
 8004c0c:	00000000 	.word	0x00000000
 8004c10:	080049c1 	.word	0x080049c1

08004c14 <_printf_common>:
 8004c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	4616      	mov	r6, r2
 8004c1a:	4698      	mov	r8, r3
 8004c1c:	688a      	ldr	r2, [r1, #8]
 8004c1e:	690b      	ldr	r3, [r1, #16]
 8004c20:	4607      	mov	r7, r0
 8004c22:	4293      	cmp	r3, r2
 8004c24:	bfb8      	it	lt
 8004c26:	4613      	movlt	r3, r2
 8004c28:	6033      	str	r3, [r6, #0]
 8004c2a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c2e:	460c      	mov	r4, r1
 8004c30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c34:	b10a      	cbz	r2, 8004c3a <_printf_common+0x26>
 8004c36:	3301      	adds	r3, #1
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	0699      	lsls	r1, r3, #26
 8004c3e:	bf42      	ittt	mi
 8004c40:	6833      	ldrmi	r3, [r6, #0]
 8004c42:	3302      	addmi	r3, #2
 8004c44:	6033      	strmi	r3, [r6, #0]
 8004c46:	6825      	ldr	r5, [r4, #0]
 8004c48:	f015 0506 	ands.w	r5, r5, #6
 8004c4c:	d106      	bne.n	8004c5c <_printf_common+0x48>
 8004c4e:	f104 0a19 	add.w	sl, r4, #25
 8004c52:	68e3      	ldr	r3, [r4, #12]
 8004c54:	6832      	ldr	r2, [r6, #0]
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	42ab      	cmp	r3, r5
 8004c5a:	dc2b      	bgt.n	8004cb4 <_printf_common+0xa0>
 8004c5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	3b00      	subs	r3, #0
 8004c64:	bf18      	it	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	0692      	lsls	r2, r2, #26
 8004c6a:	d430      	bmi.n	8004cce <_printf_common+0xba>
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c74:	47c8      	blx	r9
 8004c76:	3001      	adds	r0, #1
 8004c78:	d023      	beq.n	8004cc2 <_printf_common+0xae>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	6922      	ldr	r2, [r4, #16]
 8004c7e:	f003 0306 	and.w	r3, r3, #6
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	bf14      	ite	ne
 8004c86:	2500      	movne	r5, #0
 8004c88:	6833      	ldreq	r3, [r6, #0]
 8004c8a:	f04f 0600 	mov.w	r6, #0
 8004c8e:	bf08      	it	eq
 8004c90:	68e5      	ldreq	r5, [r4, #12]
 8004c92:	f104 041a 	add.w	r4, r4, #26
 8004c96:	bf08      	it	eq
 8004c98:	1aed      	subeq	r5, r5, r3
 8004c9a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c9e:	bf08      	it	eq
 8004ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	bfc4      	itt	gt
 8004ca8:	1a9b      	subgt	r3, r3, r2
 8004caa:	18ed      	addgt	r5, r5, r3
 8004cac:	42b5      	cmp	r5, r6
 8004cae:	d11a      	bne.n	8004ce6 <_printf_common+0xd2>
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	e008      	b.n	8004cc6 <_printf_common+0xb2>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	4652      	mov	r2, sl
 8004cb8:	4641      	mov	r1, r8
 8004cba:	4638      	mov	r0, r7
 8004cbc:	47c8      	blx	r9
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d103      	bne.n	8004cca <_printf_common+0xb6>
 8004cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cca:	3501      	adds	r5, #1
 8004ccc:	e7c1      	b.n	8004c52 <_printf_common+0x3e>
 8004cce:	2030      	movs	r0, #48	@ 0x30
 8004cd0:	18e1      	adds	r1, r4, r3
 8004cd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cdc:	4422      	add	r2, r4
 8004cde:	3302      	adds	r3, #2
 8004ce0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ce4:	e7c2      	b.n	8004c6c <_printf_common+0x58>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4622      	mov	r2, r4
 8004cea:	4641      	mov	r1, r8
 8004cec:	4638      	mov	r0, r7
 8004cee:	47c8      	blx	r9
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d0e6      	beq.n	8004cc2 <_printf_common+0xae>
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	e7d9      	b.n	8004cac <_printf_common+0x98>

08004cf8 <_printf_i>:
 8004cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cfc:	7e0f      	ldrb	r7, [r1, #24]
 8004cfe:	4691      	mov	r9, r2
 8004d00:	2f78      	cmp	r7, #120	@ 0x78
 8004d02:	4680      	mov	r8, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	469a      	mov	sl, r3
 8004d08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d0e:	d807      	bhi.n	8004d20 <_printf_i+0x28>
 8004d10:	2f62      	cmp	r7, #98	@ 0x62
 8004d12:	d80a      	bhi.n	8004d2a <_printf_i+0x32>
 8004d14:	2f00      	cmp	r7, #0
 8004d16:	f000 80d3 	beq.w	8004ec0 <_printf_i+0x1c8>
 8004d1a:	2f58      	cmp	r7, #88	@ 0x58
 8004d1c:	f000 80ba 	beq.w	8004e94 <_printf_i+0x19c>
 8004d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d28:	e03a      	b.n	8004da0 <_printf_i+0xa8>
 8004d2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d2e:	2b15      	cmp	r3, #21
 8004d30:	d8f6      	bhi.n	8004d20 <_printf_i+0x28>
 8004d32:	a101      	add	r1, pc, #4	@ (adr r1, 8004d38 <_printf_i+0x40>)
 8004d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d38:	08004d91 	.word	0x08004d91
 8004d3c:	08004da5 	.word	0x08004da5
 8004d40:	08004d21 	.word	0x08004d21
 8004d44:	08004d21 	.word	0x08004d21
 8004d48:	08004d21 	.word	0x08004d21
 8004d4c:	08004d21 	.word	0x08004d21
 8004d50:	08004da5 	.word	0x08004da5
 8004d54:	08004d21 	.word	0x08004d21
 8004d58:	08004d21 	.word	0x08004d21
 8004d5c:	08004d21 	.word	0x08004d21
 8004d60:	08004d21 	.word	0x08004d21
 8004d64:	08004ea7 	.word	0x08004ea7
 8004d68:	08004dcf 	.word	0x08004dcf
 8004d6c:	08004e61 	.word	0x08004e61
 8004d70:	08004d21 	.word	0x08004d21
 8004d74:	08004d21 	.word	0x08004d21
 8004d78:	08004ec9 	.word	0x08004ec9
 8004d7c:	08004d21 	.word	0x08004d21
 8004d80:	08004dcf 	.word	0x08004dcf
 8004d84:	08004d21 	.word	0x08004d21
 8004d88:	08004d21 	.word	0x08004d21
 8004d8c:	08004e69 	.word	0x08004e69
 8004d90:	6833      	ldr	r3, [r6, #0]
 8004d92:	1d1a      	adds	r2, r3, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6032      	str	r2, [r6, #0]
 8004d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004da0:	2301      	movs	r3, #1
 8004da2:	e09e      	b.n	8004ee2 <_printf_i+0x1ea>
 8004da4:	6833      	ldr	r3, [r6, #0]
 8004da6:	6820      	ldr	r0, [r4, #0]
 8004da8:	1d19      	adds	r1, r3, #4
 8004daa:	6031      	str	r1, [r6, #0]
 8004dac:	0606      	lsls	r6, r0, #24
 8004dae:	d501      	bpl.n	8004db4 <_printf_i+0xbc>
 8004db0:	681d      	ldr	r5, [r3, #0]
 8004db2:	e003      	b.n	8004dbc <_printf_i+0xc4>
 8004db4:	0645      	lsls	r5, r0, #25
 8004db6:	d5fb      	bpl.n	8004db0 <_printf_i+0xb8>
 8004db8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dbc:	2d00      	cmp	r5, #0
 8004dbe:	da03      	bge.n	8004dc8 <_printf_i+0xd0>
 8004dc0:	232d      	movs	r3, #45	@ 0x2d
 8004dc2:	426d      	negs	r5, r5
 8004dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc8:	230a      	movs	r3, #10
 8004dca:	4859      	ldr	r0, [pc, #356]	@ (8004f30 <_printf_i+0x238>)
 8004dcc:	e011      	b.n	8004df2 <_printf_i+0xfa>
 8004dce:	6821      	ldr	r1, [r4, #0]
 8004dd0:	6833      	ldr	r3, [r6, #0]
 8004dd2:	0608      	lsls	r0, r1, #24
 8004dd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004dd8:	d402      	bmi.n	8004de0 <_printf_i+0xe8>
 8004dda:	0649      	lsls	r1, r1, #25
 8004ddc:	bf48      	it	mi
 8004dde:	b2ad      	uxthmi	r5, r5
 8004de0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004de2:	6033      	str	r3, [r6, #0]
 8004de4:	bf14      	ite	ne
 8004de6:	230a      	movne	r3, #10
 8004de8:	2308      	moveq	r3, #8
 8004dea:	4851      	ldr	r0, [pc, #324]	@ (8004f30 <_printf_i+0x238>)
 8004dec:	2100      	movs	r1, #0
 8004dee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004df2:	6866      	ldr	r6, [r4, #4]
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	bfa8      	it	ge
 8004df8:	6821      	ldrge	r1, [r4, #0]
 8004dfa:	60a6      	str	r6, [r4, #8]
 8004dfc:	bfa4      	itt	ge
 8004dfe:	f021 0104 	bicge.w	r1, r1, #4
 8004e02:	6021      	strge	r1, [r4, #0]
 8004e04:	b90d      	cbnz	r5, 8004e0a <_printf_i+0x112>
 8004e06:	2e00      	cmp	r6, #0
 8004e08:	d04b      	beq.n	8004ea2 <_printf_i+0x1aa>
 8004e0a:	4616      	mov	r6, r2
 8004e0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e10:	fb03 5711 	mls	r7, r3, r1, r5
 8004e14:	5dc7      	ldrb	r7, [r0, r7]
 8004e16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e1a:	462f      	mov	r7, r5
 8004e1c:	42bb      	cmp	r3, r7
 8004e1e:	460d      	mov	r5, r1
 8004e20:	d9f4      	bls.n	8004e0c <_printf_i+0x114>
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d10b      	bne.n	8004e3e <_printf_i+0x146>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	07df      	lsls	r7, r3, #31
 8004e2a:	d508      	bpl.n	8004e3e <_printf_i+0x146>
 8004e2c:	6923      	ldr	r3, [r4, #16]
 8004e2e:	6861      	ldr	r1, [r4, #4]
 8004e30:	4299      	cmp	r1, r3
 8004e32:	bfde      	ittt	le
 8004e34:	2330      	movle	r3, #48	@ 0x30
 8004e36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e3e:	1b92      	subs	r2, r2, r6
 8004e40:	6122      	str	r2, [r4, #16]
 8004e42:	464b      	mov	r3, r9
 8004e44:	4621      	mov	r1, r4
 8004e46:	4640      	mov	r0, r8
 8004e48:	f8cd a000 	str.w	sl, [sp]
 8004e4c:	aa03      	add	r2, sp, #12
 8004e4e:	f7ff fee1 	bl	8004c14 <_printf_common>
 8004e52:	3001      	adds	r0, #1
 8004e54:	d14a      	bne.n	8004eec <_printf_i+0x1f4>
 8004e56:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5a:	b004      	add	sp, #16
 8004e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	f043 0320 	orr.w	r3, r3, #32
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	2778      	movs	r7, #120	@ 0x78
 8004e6a:	4832      	ldr	r0, [pc, #200]	@ (8004f34 <_printf_i+0x23c>)
 8004e6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	6831      	ldr	r1, [r6, #0]
 8004e74:	061f      	lsls	r7, r3, #24
 8004e76:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e7a:	d402      	bmi.n	8004e82 <_printf_i+0x18a>
 8004e7c:	065f      	lsls	r7, r3, #25
 8004e7e:	bf48      	it	mi
 8004e80:	b2ad      	uxthmi	r5, r5
 8004e82:	6031      	str	r1, [r6, #0]
 8004e84:	07d9      	lsls	r1, r3, #31
 8004e86:	bf44      	itt	mi
 8004e88:	f043 0320 	orrmi.w	r3, r3, #32
 8004e8c:	6023      	strmi	r3, [r4, #0]
 8004e8e:	b11d      	cbz	r5, 8004e98 <_printf_i+0x1a0>
 8004e90:	2310      	movs	r3, #16
 8004e92:	e7ab      	b.n	8004dec <_printf_i+0xf4>
 8004e94:	4826      	ldr	r0, [pc, #152]	@ (8004f30 <_printf_i+0x238>)
 8004e96:	e7e9      	b.n	8004e6c <_printf_i+0x174>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	f023 0320 	bic.w	r3, r3, #32
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	e7f6      	b.n	8004e90 <_printf_i+0x198>
 8004ea2:	4616      	mov	r6, r2
 8004ea4:	e7bd      	b.n	8004e22 <_printf_i+0x12a>
 8004ea6:	6833      	ldr	r3, [r6, #0]
 8004ea8:	6825      	ldr	r5, [r4, #0]
 8004eaa:	1d18      	adds	r0, r3, #4
 8004eac:	6961      	ldr	r1, [r4, #20]
 8004eae:	6030      	str	r0, [r6, #0]
 8004eb0:	062e      	lsls	r6, r5, #24
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	d501      	bpl.n	8004eba <_printf_i+0x1c2>
 8004eb6:	6019      	str	r1, [r3, #0]
 8004eb8:	e002      	b.n	8004ec0 <_printf_i+0x1c8>
 8004eba:	0668      	lsls	r0, r5, #25
 8004ebc:	d5fb      	bpl.n	8004eb6 <_printf_i+0x1be>
 8004ebe:	8019      	strh	r1, [r3, #0]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4616      	mov	r6, r2
 8004ec4:	6123      	str	r3, [r4, #16]
 8004ec6:	e7bc      	b.n	8004e42 <_printf_i+0x14a>
 8004ec8:	6833      	ldr	r3, [r6, #0]
 8004eca:	2100      	movs	r1, #0
 8004ecc:	1d1a      	adds	r2, r3, #4
 8004ece:	6032      	str	r2, [r6, #0]
 8004ed0:	681e      	ldr	r6, [r3, #0]
 8004ed2:	6862      	ldr	r2, [r4, #4]
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	f000 f907 	bl	80050e8 <memchr>
 8004eda:	b108      	cbz	r0, 8004ee0 <_printf_i+0x1e8>
 8004edc:	1b80      	subs	r0, r0, r6
 8004ede:	6060      	str	r0, [r4, #4]
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eea:	e7aa      	b.n	8004e42 <_printf_i+0x14a>
 8004eec:	4632      	mov	r2, r6
 8004eee:	4649      	mov	r1, r9
 8004ef0:	4640      	mov	r0, r8
 8004ef2:	6923      	ldr	r3, [r4, #16]
 8004ef4:	47d0      	blx	sl
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d0ad      	beq.n	8004e56 <_printf_i+0x15e>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	079b      	lsls	r3, r3, #30
 8004efe:	d413      	bmi.n	8004f28 <_printf_i+0x230>
 8004f00:	68e0      	ldr	r0, [r4, #12]
 8004f02:	9b03      	ldr	r3, [sp, #12]
 8004f04:	4298      	cmp	r0, r3
 8004f06:	bfb8      	it	lt
 8004f08:	4618      	movlt	r0, r3
 8004f0a:	e7a6      	b.n	8004e5a <_printf_i+0x162>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4632      	mov	r2, r6
 8004f10:	4649      	mov	r1, r9
 8004f12:	4640      	mov	r0, r8
 8004f14:	47d0      	blx	sl
 8004f16:	3001      	adds	r0, #1
 8004f18:	d09d      	beq.n	8004e56 <_printf_i+0x15e>
 8004f1a:	3501      	adds	r5, #1
 8004f1c:	68e3      	ldr	r3, [r4, #12]
 8004f1e:	9903      	ldr	r1, [sp, #12]
 8004f20:	1a5b      	subs	r3, r3, r1
 8004f22:	42ab      	cmp	r3, r5
 8004f24:	dcf2      	bgt.n	8004f0c <_printf_i+0x214>
 8004f26:	e7eb      	b.n	8004f00 <_printf_i+0x208>
 8004f28:	2500      	movs	r5, #0
 8004f2a:	f104 0619 	add.w	r6, r4, #25
 8004f2e:	e7f5      	b.n	8004f1c <_printf_i+0x224>
 8004f30:	08005649 	.word	0x08005649
 8004f34:	0800565a 	.word	0x0800565a

08004f38 <__swbuf_r>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	460e      	mov	r6, r1
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	4605      	mov	r5, r0
 8004f40:	b118      	cbz	r0, 8004f4a <__swbuf_r+0x12>
 8004f42:	6a03      	ldr	r3, [r0, #32]
 8004f44:	b90b      	cbnz	r3, 8004f4a <__swbuf_r+0x12>
 8004f46:	f7fe f99b 	bl	8003280 <__sinit>
 8004f4a:	69a3      	ldr	r3, [r4, #24]
 8004f4c:	60a3      	str	r3, [r4, #8]
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	071a      	lsls	r2, r3, #28
 8004f52:	d501      	bpl.n	8004f58 <__swbuf_r+0x20>
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	b943      	cbnz	r3, 8004f6a <__swbuf_r+0x32>
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 f82a 	bl	8004fb4 <__swsetup_r>
 8004f60:	b118      	cbz	r0, 8004f6a <__swbuf_r+0x32>
 8004f62:	f04f 37ff 	mov.w	r7, #4294967295
 8004f66:	4638      	mov	r0, r7
 8004f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	6922      	ldr	r2, [r4, #16]
 8004f6e:	b2f6      	uxtb	r6, r6
 8004f70:	1a98      	subs	r0, r3, r2
 8004f72:	6963      	ldr	r3, [r4, #20]
 8004f74:	4637      	mov	r7, r6
 8004f76:	4283      	cmp	r3, r0
 8004f78:	dc05      	bgt.n	8004f86 <__swbuf_r+0x4e>
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f7ff fca5 	bl	80048cc <_fflush_r>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d1ed      	bne.n	8004f62 <__swbuf_r+0x2a>
 8004f86:	68a3      	ldr	r3, [r4, #8]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	60a3      	str	r3, [r4, #8]
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	6022      	str	r2, [r4, #0]
 8004f92:	701e      	strb	r6, [r3, #0]
 8004f94:	6962      	ldr	r2, [r4, #20]
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d004      	beq.n	8004fa6 <__swbuf_r+0x6e>
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	07db      	lsls	r3, r3, #31
 8004fa0:	d5e1      	bpl.n	8004f66 <__swbuf_r+0x2e>
 8004fa2:	2e0a      	cmp	r6, #10
 8004fa4:	d1df      	bne.n	8004f66 <__swbuf_r+0x2e>
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	4628      	mov	r0, r5
 8004faa:	f7ff fc8f 	bl	80048cc <_fflush_r>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d0d9      	beq.n	8004f66 <__swbuf_r+0x2e>
 8004fb2:	e7d6      	b.n	8004f62 <__swbuf_r+0x2a>

08004fb4 <__swsetup_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4b29      	ldr	r3, [pc, #164]	@ (800505c <__swsetup_r+0xa8>)
 8004fb8:	4605      	mov	r5, r0
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	b118      	cbz	r0, 8004fc8 <__swsetup_r+0x14>
 8004fc0:	6a03      	ldr	r3, [r0, #32]
 8004fc2:	b90b      	cbnz	r3, 8004fc8 <__swsetup_r+0x14>
 8004fc4:	f7fe f95c 	bl	8003280 <__sinit>
 8004fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fcc:	0719      	lsls	r1, r3, #28
 8004fce:	d422      	bmi.n	8005016 <__swsetup_r+0x62>
 8004fd0:	06da      	lsls	r2, r3, #27
 8004fd2:	d407      	bmi.n	8004fe4 <__swsetup_r+0x30>
 8004fd4:	2209      	movs	r2, #9
 8004fd6:	602a      	str	r2, [r5, #0]
 8004fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe0:	81a3      	strh	r3, [r4, #12]
 8004fe2:	e033      	b.n	800504c <__swsetup_r+0x98>
 8004fe4:	0758      	lsls	r0, r3, #29
 8004fe6:	d512      	bpl.n	800500e <__swsetup_r+0x5a>
 8004fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fea:	b141      	cbz	r1, 8004ffe <__swsetup_r+0x4a>
 8004fec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ff0:	4299      	cmp	r1, r3
 8004ff2:	d002      	beq.n	8004ffa <__swsetup_r+0x46>
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f7fe faeb 	bl	80035d0 <_free_r>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005004:	81a3      	strh	r3, [r4, #12]
 8005006:	2300      	movs	r3, #0
 8005008:	6063      	str	r3, [r4, #4]
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	f043 0308 	orr.w	r3, r3, #8
 8005014:	81a3      	strh	r3, [r4, #12]
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	b94b      	cbnz	r3, 800502e <__swsetup_r+0x7a>
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005024:	d003      	beq.n	800502e <__swsetup_r+0x7a>
 8005026:	4621      	mov	r1, r4
 8005028:	4628      	mov	r0, r5
 800502a:	f000 f890 	bl	800514e <__smakebuf_r>
 800502e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005032:	f013 0201 	ands.w	r2, r3, #1
 8005036:	d00a      	beq.n	800504e <__swsetup_r+0x9a>
 8005038:	2200      	movs	r2, #0
 800503a:	60a2      	str	r2, [r4, #8]
 800503c:	6962      	ldr	r2, [r4, #20]
 800503e:	4252      	negs	r2, r2
 8005040:	61a2      	str	r2, [r4, #24]
 8005042:	6922      	ldr	r2, [r4, #16]
 8005044:	b942      	cbnz	r2, 8005058 <__swsetup_r+0xa4>
 8005046:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800504a:	d1c5      	bne.n	8004fd8 <__swsetup_r+0x24>
 800504c:	bd38      	pop	{r3, r4, r5, pc}
 800504e:	0799      	lsls	r1, r3, #30
 8005050:	bf58      	it	pl
 8005052:	6962      	ldrpl	r2, [r4, #20]
 8005054:	60a2      	str	r2, [r4, #8]
 8005056:	e7f4      	b.n	8005042 <__swsetup_r+0x8e>
 8005058:	2000      	movs	r0, #0
 800505a:	e7f7      	b.n	800504c <__swsetup_r+0x98>
 800505c:	20000184 	.word	0x20000184

08005060 <_raise_r>:
 8005060:	291f      	cmp	r1, #31
 8005062:	b538      	push	{r3, r4, r5, lr}
 8005064:	4605      	mov	r5, r0
 8005066:	460c      	mov	r4, r1
 8005068:	d904      	bls.n	8005074 <_raise_r+0x14>
 800506a:	2316      	movs	r3, #22
 800506c:	6003      	str	r3, [r0, #0]
 800506e:	f04f 30ff 	mov.w	r0, #4294967295
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005076:	b112      	cbz	r2, 800507e <_raise_r+0x1e>
 8005078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800507c:	b94b      	cbnz	r3, 8005092 <_raise_r+0x32>
 800507e:	4628      	mov	r0, r5
 8005080:	f000 f830 	bl	80050e4 <_getpid_r>
 8005084:	4622      	mov	r2, r4
 8005086:	4601      	mov	r1, r0
 8005088:	4628      	mov	r0, r5
 800508a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800508e:	f000 b817 	b.w	80050c0 <_kill_r>
 8005092:	2b01      	cmp	r3, #1
 8005094:	d00a      	beq.n	80050ac <_raise_r+0x4c>
 8005096:	1c59      	adds	r1, r3, #1
 8005098:	d103      	bne.n	80050a2 <_raise_r+0x42>
 800509a:	2316      	movs	r3, #22
 800509c:	6003      	str	r3, [r0, #0]
 800509e:	2001      	movs	r0, #1
 80050a0:	e7e7      	b.n	8005072 <_raise_r+0x12>
 80050a2:	2100      	movs	r1, #0
 80050a4:	4620      	mov	r0, r4
 80050a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80050aa:	4798      	blx	r3
 80050ac:	2000      	movs	r0, #0
 80050ae:	e7e0      	b.n	8005072 <_raise_r+0x12>

080050b0 <raise>:
 80050b0:	4b02      	ldr	r3, [pc, #8]	@ (80050bc <raise+0xc>)
 80050b2:	4601      	mov	r1, r0
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	f7ff bfd3 	b.w	8005060 <_raise_r>
 80050ba:	bf00      	nop
 80050bc:	20000184 	.word	0x20000184

080050c0 <_kill_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	2300      	movs	r3, #0
 80050c4:	4d06      	ldr	r5, [pc, #24]	@ (80050e0 <_kill_r+0x20>)
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	f7fc f80a 	bl	80010e6 <_kill>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	d102      	bne.n	80050dc <_kill_r+0x1c>
 80050d6:	682b      	ldr	r3, [r5, #0]
 80050d8:	b103      	cbz	r3, 80050dc <_kill_r+0x1c>
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	bd38      	pop	{r3, r4, r5, pc}
 80050de:	bf00      	nop
 80050e0:	200004d4 	.word	0x200004d4

080050e4 <_getpid_r>:
 80050e4:	f7fb bff8 	b.w	80010d8 <_getpid>

080050e8 <memchr>:
 80050e8:	4603      	mov	r3, r0
 80050ea:	b510      	push	{r4, lr}
 80050ec:	b2c9      	uxtb	r1, r1
 80050ee:	4402      	add	r2, r0
 80050f0:	4293      	cmp	r3, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	d101      	bne.n	80050fa <memchr+0x12>
 80050f6:	2000      	movs	r0, #0
 80050f8:	e003      	b.n	8005102 <memchr+0x1a>
 80050fa:	7804      	ldrb	r4, [r0, #0]
 80050fc:	3301      	adds	r3, #1
 80050fe:	428c      	cmp	r4, r1
 8005100:	d1f6      	bne.n	80050f0 <memchr+0x8>
 8005102:	bd10      	pop	{r4, pc}

08005104 <__swhatbuf_r>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	460c      	mov	r4, r1
 8005108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510c:	4615      	mov	r5, r2
 800510e:	2900      	cmp	r1, #0
 8005110:	461e      	mov	r6, r3
 8005112:	b096      	sub	sp, #88	@ 0x58
 8005114:	da0c      	bge.n	8005130 <__swhatbuf_r+0x2c>
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	2100      	movs	r1, #0
 800511a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800511e:	bf14      	ite	ne
 8005120:	2340      	movne	r3, #64	@ 0x40
 8005122:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005126:	2000      	movs	r0, #0
 8005128:	6031      	str	r1, [r6, #0]
 800512a:	602b      	str	r3, [r5, #0]
 800512c:	b016      	add	sp, #88	@ 0x58
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	466a      	mov	r2, sp
 8005132:	f000 f849 	bl	80051c8 <_fstat_r>
 8005136:	2800      	cmp	r0, #0
 8005138:	dbed      	blt.n	8005116 <__swhatbuf_r+0x12>
 800513a:	9901      	ldr	r1, [sp, #4]
 800513c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005140:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005144:	4259      	negs	r1, r3
 8005146:	4159      	adcs	r1, r3
 8005148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800514c:	e7eb      	b.n	8005126 <__swhatbuf_r+0x22>

0800514e <__smakebuf_r>:
 800514e:	898b      	ldrh	r3, [r1, #12]
 8005150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005152:	079d      	lsls	r5, r3, #30
 8005154:	4606      	mov	r6, r0
 8005156:	460c      	mov	r4, r1
 8005158:	d507      	bpl.n	800516a <__smakebuf_r+0x1c>
 800515a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	6123      	str	r3, [r4, #16]
 8005162:	2301      	movs	r3, #1
 8005164:	6163      	str	r3, [r4, #20]
 8005166:	b003      	add	sp, #12
 8005168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800516a:	466a      	mov	r2, sp
 800516c:	ab01      	add	r3, sp, #4
 800516e:	f7ff ffc9 	bl	8005104 <__swhatbuf_r>
 8005172:	9f00      	ldr	r7, [sp, #0]
 8005174:	4605      	mov	r5, r0
 8005176:	4639      	mov	r1, r7
 8005178:	4630      	mov	r0, r6
 800517a:	f7fe fdd5 	bl	8003d28 <_malloc_r>
 800517e:	b948      	cbnz	r0, 8005194 <__smakebuf_r+0x46>
 8005180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005184:	059a      	lsls	r2, r3, #22
 8005186:	d4ee      	bmi.n	8005166 <__smakebuf_r+0x18>
 8005188:	f023 0303 	bic.w	r3, r3, #3
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	81a3      	strh	r3, [r4, #12]
 8005192:	e7e2      	b.n	800515a <__smakebuf_r+0xc>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800519a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	9b01      	ldr	r3, [sp, #4]
 80051a2:	6020      	str	r0, [r4, #0]
 80051a4:	b15b      	cbz	r3, 80051be <__smakebuf_r+0x70>
 80051a6:	4630      	mov	r0, r6
 80051a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ac:	f000 f81e 	bl	80051ec <_isatty_r>
 80051b0:	b128      	cbz	r0, 80051be <__smakebuf_r+0x70>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	f023 0303 	bic.w	r3, r3, #3
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	81a3      	strh	r3, [r4, #12]
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	431d      	orrs	r5, r3
 80051c2:	81a5      	strh	r5, [r4, #12]
 80051c4:	e7cf      	b.n	8005166 <__smakebuf_r+0x18>
	...

080051c8 <_fstat_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	2300      	movs	r3, #0
 80051cc:	4d06      	ldr	r5, [pc, #24]	@ (80051e8 <_fstat_r+0x20>)
 80051ce:	4604      	mov	r4, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	602b      	str	r3, [r5, #0]
 80051d6:	f7fb ffe5 	bl	80011a4 <_fstat>
 80051da:	1c43      	adds	r3, r0, #1
 80051dc:	d102      	bne.n	80051e4 <_fstat_r+0x1c>
 80051de:	682b      	ldr	r3, [r5, #0]
 80051e0:	b103      	cbz	r3, 80051e4 <_fstat_r+0x1c>
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	bd38      	pop	{r3, r4, r5, pc}
 80051e6:	bf00      	nop
 80051e8:	200004d4 	.word	0x200004d4

080051ec <_isatty_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	2300      	movs	r3, #0
 80051f0:	4d05      	ldr	r5, [pc, #20]	@ (8005208 <_isatty_r+0x1c>)
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fb ffe3 	bl	80011c2 <_isatty>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_isatty_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_isatty_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	200004d4 	.word	0x200004d4

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
